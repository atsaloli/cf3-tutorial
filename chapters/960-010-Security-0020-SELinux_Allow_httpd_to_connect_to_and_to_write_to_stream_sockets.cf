body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  methods:
      "any" usebundle => allow_httpd_to_talk_to_pgbouncer;

}


bundle agent allow_httpd_to_talk_to_pgbouncer {

  classes:

      "module_missing"

        not => returnszero("/usr/sbin/semodule -l | \
/bin/grep allowHttpdSocketConnectWrite \
>/dev/null", "useshell");
# should be rewritten to use execresult and regcmp() so we can
# change "useshell" to "noshell" to make it more lightweight

  methods:
    module_missing::
      "any" usebundle => compile_and_package_and_load_selinux_module;

}


bundle agent compile_and_package_and_load_selinux_module {

  files:

      "/root/SELINUX/."
        create => "true",
        comment => "/root/SELINUX is my scratch space for SELinux
                    policy files as we compile, package and load
                    SELinux policy modules.";

  files:

      "/root/SELINUX/allowHttpdSocketConnectWrite.te"
        create => "true",
        perms  => m("0600"),
        edit_line => Allow_Httpd_Socket_Connect_and_Write,
        comment => "httpd connects to Postgres database through
                    pgbouncer.  we want httpd to connect to pgbouncer
                    using a socket file instead of over TCP/IP,
                    because we've had instances where PHP pages
                    that connect to the database a lot in quick
                    succession use up all available network ports
                    and subsequent connection attempts fail.";


  commands:

      "/usr/bin/checkmodule  -M -m \
-o /root/SELINUX/allowHttpdSocketConnectWrite.mod \
/root/SELINUX/allowHttpdSocketConnectWrite.te && \
/usr/bin/semodule_package \
-o /root/SELINUX/allowHttpdSocketConnectWrite.pp \
-m /root/SELINUX/allowHttpdSocketConnectWrite.mod && \
/usr/sbin/semodule \
-i /root/SELINUX/allowHttpdSocketConnectWrite.pp",
        comment => "Compile module; create package; load module.",
        contain => in_shell;

}


bundle edit_line Allow_Httpd_Socket_Connect_and_Write {

      delete_lines: ".*";

  insert_lines:
      "
# This file was generated by CFEngine

module allowHttpdSocketConnectWrite 1.0;

require {
type httpd_t;
type tmp_t;
type initrc_t;
class sock_file write;
class unix_stream_socket connectto;
}

#============= httpd_t ==============
allow httpd_t initrc_t:unix_stream_socket connectto;
allow httpd_t tmp_t:sock_file write;

"
        insert_type => "preserve_block";
}
