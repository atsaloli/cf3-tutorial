
<!---
Filename: 100-000-Part-Title-0000-Orientation.md
-->

## Orientation and Setup



<!---
Filename: 100-010-About\_Collection-0000-Chapter-Title.md
-->

### About the Collection



<!---
Filename: 100-010-About\_Collection-0130-About\_this\_collection.md
-->

#### Training examples

Vertical Sysadmin, an authorized CFEngine training partner,
has put together a collection of over 200 standalone working
examples of using CFEngine 3 to help get infrastructure
engineers up to speed with CFEngine 3.

These examples supplement the examples in the official
documentation.

All our examples are concrete and runnable.



<!---
Filename: 100-010-About\_Collection-0140-Using\_this\_collection.md
-->

#### Using this collection

Our course "Automating System Administration using CFEngine 3" is
based on demonstration of "CFEngine Essentials" examples, along with
with discussion, lab exercises, and a policy-writing workshop.

To support the growing CFEngine 3 community, we are making available
our course materials online.

The materials are arranged in sequence, so your initial study
should be in sequence.

You can also use these materials as reference (feel free to pull
out examples and use them to seed your policy set).




<!---
Filename: 100-010-About\_Collection-0145-collection\_scripts.md
-->

#### Using the examples

The materials are arranged in sequence, so we recommend you
study them in sequence; however you can also use them as
reference (to find specific examples of a feature or
promise attribute).

You are welcome to seed your policy set with any of these
examples.  We hope they will be of use to you!



<!---
Filename: 100-010-About\_Collection-0150-Feedback\_wanted.md
-->

#### Feedback Wanted

I would love to hear if you have wins with this collection,
or if you need help with anything.  Write me at aleksey (at) verticalsysadmin.com

#### Training and Professional Services
I'm available for on-site training and implemention consulting.



<!---
Filename: 100-010-About\_Collection-148-run\_the\_examples.md
-->

#### Run the Examples

Try out and run the examples. Modify them.  Do the provided
exercises to practice using this new tool and to get to know
it.

Work your way through the materials until you understand them
and have done the provided exercises.  There are additional
exercises at the end of the tutorial, or just start writing
your own code!

#### Look up any unfamiliar terms
Misunderstood or not understood terms can block understanding.
Look up unfamiliar terms in the [CFEngine Refernce Manual](http://docs.cfengine.com), or in a good [English dictionary](http://www.onelook.com).



<!---
Filename: 100-020-About\_Course-0000-Chapter-Title.md
-->

### About the Course



<!---
Filename: 100-020-About\_Course-0070-About\_This\_Course.md
-->

#### About the Course

*Automating System Administration with CFEngine 3 (5 days)*

Requirements: No knowledge of CFEngine or configuration management is
required, only basic knowledge of system administration.

Hardware Requirements: Bring a laptop with wi-fi capability so you can access the Internet.

At the End of this Course You Will Be Able To: automate system administration using CFEngine 3.



<!---
Filename: 100-020-About\_Course-0070-discussion\_question.md
-->

#### Discussion Question

What problems would you like to solve with automation?



<!---
Filename: 100-030-Why\_Automation-0000-Chapter-Title.md
-->

### Why Automation?

> Every time someone logs onto a system by hand, they jeopardize everyone's understanding of the system. 
> 
> --- Mark Burgess, author of CFEngine


Benefits of automation:

- decreases labor costs
- increases quality of IT services
- frees humans from drudgery, to focus on more challenging work

See "Why Automation?" in [CFEngine 3 Tutorial (archived)](https://auth.cfengine.com/archive/manuals/cf3-tutorial#Why-automation_003f)



<!---
Filename: 100-040-Why\_CFEngine-0000-Chapter-Title.md
-->

### Why CFEngine?

- Maturity (since 1993, now in its third generation)
- Small footprint (can run everywhere and run often)
- Security (check NVD, we beat the pants off our competition due to a more secure design)
  - [CFEngine in NVD](http://web.nvd.nist.gov/view/vuln/search-results?query#cfengine&search_type=all&cves=on)
  - [Puppet in NVD](http://web.nvd.nist.gov/view/vuln/search-results?query#puppet&search_type=all&cves=on)
- The only configuration management tool based on science (author is a theoretical physicist turned Computer Science researcher)

To learn more, see [20 Years of CFEngine](http://markburgess.org/blog_principles.html), by Mark Burgess.



<!---
Filename: 125-060-CFEngine\_Components-0000-Chapter-Title.md
-->

### CFEngine Components



<!---
Filename: 125-060-CFEngine\_Components-0400-The\_Agent\_cf\_promises\_and\_Cf\_agent.md
-->

CFEngine 3 consists of a number of components.

####  Agent (and the Syntax Checker it relies on)


cf-agent
: The CFEngine component that audits and makes any needed repairs to your system system. Actually does the work, as far as configuration management is concerned.

```bash
   cf-agent -f ./your_policy.cf
```

cf-promises
: You can use it to syntax check your policies:

```bash
    cf-promises -f ./your_policy.cf
```

Every CFEngine component runs cf-promises on policy files before reading them in.



<!---
Filename: 125-060-CFEngine\_Components-0410-The\_Executor\_cf\_execd.md
-->


#### Executor
cf-execd
: Used to run cf-agent on a regular (and user-configurable) basis, and to handle its output.



<!---
Filename: 125-060-CFEngine\_Components-0420-Networking\_cfserverd\_cfkey\_cfrunagent.md
-->


#### Inter-Node Communication

cf-serverd
: File server, used to distribute files; listens for network requests for additional runs of the local agent.  

cf-key
: Key generation tool, used on every host to create public/private key pairs for secure communication.

cf-runagent
: Remote run agent, is used to execute cf-agent on a remote machine.  cf-runagent does not keep any promises, but instead is used to ask another machine to do so.

cf-hub
: CFEngine Enterprise only, used to collect reports from hosts (connects to remote cf-serverd).



<!---
Filename: 125-060-CFEngine\_Components-0430-cfmonitord\_cfknow\_cfreport\_cfhub.md
-->


#### Miscellaneous components

cf-monitord
:
Passive monitoring agent, collects information about the status of your system (which can be reported or used to influence when promises are enforced).

The following add-on tools have to be installed separately:


cf-deploy
: Policy deployment automation tool.

reindent.pl
: Source code reformatter (like "tidy").  In contrib/.

cf-locate
: Locate bundles in CFEngine source code.  In contrib/.

cf-profiler
: Profiler (measures how long your bundles take to run so you can find and tune any slow spots)

cf-profile.pl
: Alternative profiler from Jon-Henrik (https://github.com/cfengineers-net/cf-profile)



<!---
Filename: 125-060-CFEngine\_Components-0435-cfengine-versions.md
-->

#### CFEngine Packages


cfengine-community
: Open-source product, also known as CFEngine Core.

The commercial product is called CFEngine Enterprise and it's Core plus Enterprise extensions (such as Reporting, native Windows build, etc.)


The original name for the first generation of the CFEngine Enterprise product was "Nova" and this is still reflected in thename of the packages:


cfengine-nova-hub
: Core plus Mission Portal (which is Report Collection system and an Admin GUI on an Apache/PHP/PostgreSQL stack with a Redis cache for report collection)


cfengine-nova
: Core plus Enterprise extensions (e.g. reporting)



<!---
Filename: 125-060-CFEngine\_Components-0440-examination\_of\_cfengine\_rpm.md
-->

#### Inspect Package of the CFEngine Core

- Download Core package:

```bash
wget https://cfengine-package-repos.s3.amazonaws.com/community_binaries/\
cfengine-community-3.7.1-1.el6.x86_64.rpm
```
or download from [CFEngine](https://cfengine.com/product/community/)

- Examine Core package:

```bash
rpm -q --filesbypkg cfengine-community-3.7.1-1.el6.x86_64.rpm | less
```



<!---
Filename: 125-065-Enterprise-0000-Chapter-Title.md
-->

### CFEngine Enterprise - Reporting



<!---
Filename: 125-065-Enterprise-0010-how\_enterprise\_works.md
-->

How CFEngine Enterprise works:

1. Hubs pull policy from version control (e.g. Git)
2. Hosts pull policy from hubs and execute it and create inventory and compliance reports
3. Hubs download inventory/compliance reports from hosts and aggregate them 
4. Humans use hub UI to gain insight into infrastructure:

  - promise compliance (including outliers)
  - changes (repairs)
  - standard and custom inventory
  - reporting interface (custom reports)

CFEngine Enterprise introduces additional components:

- Hub (report collection)
- Mission Portal (Admin/Reporting GUI)



<!---
Filename: 150-000-Part-Title-0000-Setup.md
-->





<!---
Filename: 150-010-Lab\_VMs-0000-Chapter-Title.md
-->

### Setting Up Your Lab Environment



<!---
Filename: 150-010-Lab\_VMs-0010-VMs.md
-->

Setup two VMs to do the course exercises.

Follow CFEngine's Vagrant guide to create your lab environment
complete with two VMs and the latest version of CFEngine Enterprise

https://docs.cfengine.com/latest/guide-installation-and-configuration-general-installation-installation-enterprise-vagrant.html

The VMs need to be able to get out to the Internet to install
packages.

Ensure your VMs have Internet access:

```bash
ping google.com
```

Some companies allow Internet access only through proxies in Web
browser. You will need access from the command line.



<!---
Filename: 150-040-Installing\_CFE\_Hub-0000-Chapter-Title.md
-->

### Installing CFEngine



<!---
Filename: 150-040-Installing\_CFE\_Hub-0050-Lab\_setup.md
-->

To do the exercises, each student should have two VMs:

One to play the role of the Hub, and one to play the role of a Host
connected to that Hub.

CFEngine itself is multiplatform. The examples in this collection
have been tested on RHEL 6.  If you're not sure what OS to install
on your VMs, we recommend you install the same OS as you use in
production and let us know if you have any trouble.



<!---
Filename: 150-040-Installing\_CFE\_Hub-0055-Installing\_CFE\_Hub.exr.md
-->

#### Installing CFEngine on your Hub VM

- Ensure your Hub VM has an FQDN hostname (required by Hub package)

  - Add line for FQDN hostname, e.g. "1.2.3.4 alpha.example.com"

```bash
vi /etc/hosts
```
  - Set hostname to FQDN:

```bash
/bin/hostname alpha.example.com
```

- Download hub package

```bash
wget https://cfengine-package-repos.s3.amazonaws.com/enterprise/\
Enterprise-3.7.1/hub/redhat_6_x86_64/cfengine-nova-hub-3.7.1-1.x86_64.rpm
```

If the above URL stops working, you can download the hub package
from [CFEngine.com](http://cfengine.com/download/)

- Install the hub package.

```bash
rpm -ihv ./cfengine-nova-hub-3.7.1-1.x86_64.rpm
```

- Bootstrap the hub to itself:

```bash
cf-agent -B <hostname>
```

NOTE: Bootstrapping performs a key exchange to establish a trust
relationship so that the host can download policy updates from
the hub, and the hub can download inventory and compliance reports
from the host.

- Login to hub admin UI over HTTPS (admin/admin) 

- Change the admin UI password so the VM doesn't get compromised
(Admin -> Settings -> User Management -> Change password)



<!---
Filename: 150-040-Installing\_CFE\_Hub-0060-Installing\_CFE\_host.exr.md
-->

#### Installing CFEngine on your 2nd VM (the managed host)

- Ensure your Host VM has an FQDN hostname.
```bash
vi /etc/hosts
/bin/hostname <hostname.domain>
```

- Download host package.
```bash
wget https://cfengine-package-repos.s3.amazonaws.com/enterprise/Enterprise-3.7.1/\
agent/agent_rhel6_x86_64/cfengine-nova-3.7.1-1.x86_64.rpm
```

- Install host package.
```bash
rpm -ihv ./cfengine-nova-3.7.1-1.x86_64.rpm
```

- Bootstrap the host to the hub:
```bash
cf-agent -B <hub IP address>
```

- Go to hub admin UI and within 5-10 minutes the hosts indicator at the top should go from 1 to 2.



<!---
Filename: 150-050-Policy\_Flows-0000-Chapter-Title.md
-->

### Policy Flows



<!---
Filename: 150-050-Policy\_Flows-0050-Policy\_Flow.md
-->

#### Policy Flow Diagram

The policy distribution point is /var/cfengine/masterfiles on a policy server.

TIP: Keep your policy in a Version Control System.

![policy flow diagram 1](150-050-Policy_Flows-0060-Policy_Flow_Diagram_Server.png)
![policy flow diagram 2](150-050-Policy_Flows-0070-Policy_Flow_Diagram.png)
![policy flow diagram 3](150-050-Policy_Flows-0080-Policy_Flow_Diagram_Clients.png)



<!---
Filename: 150-070-Installing\_Examples-0000-Chapter-Title.md
-->

### Installing the Collection

This chapter takes us through installing everything needed to use the collection
and do the exercises.



<!---
Filename: 150-070-Installing\_Examples-0150-GitHub\_URL.md
-->

#### Using git

We keep these examples on GitHub and may update them during or after class.

With git, you can download the updates during or after class.



<!---
Filename: 150-070-Installing\_Examples-0160-Install\_git.exr.md
-->

#### Installing git

On RHEL/Centos 6:
```bash
yum install git
```

On Debian/Ubuntu:
```bash
apt-get install git
```



<!---
Filename: 150-070-Installing\_Examples-0170-Definition\_of\_Design\_Center.md
-->

#### Definition: Design Center

The [CFEngine Design Center](http://github.com/cfengine/design-center) is a curated collection of policies and examples.

The CFEngine community contributes policies and examples,
and the CFEngine staff curate the collection to keep
quality high.

Our training examples are in the
"examples/verticalsysadmin\_training\_examples" directory.



<!---
Filename: 150-070-Installing\_Examples-0180-Downloading\_VSA\_Examples\_collection.md
-->

#### Downloading examples

Download Aleksey's fork of the CFEngine Design Center repo
(Aleksey's fork is usually ahead of the CFEngine repo, with
respect to the "verticalsysadmin\_training\_examples" directory):

```bash
git clone git://github.com/atsaloli/design-center.git 
```

Go to the Vertical Sysadmin Training Examples directory:

```bash
cd design-center/examples/verticalsysadmin_training_examples	
```



<!---
Filename: 150-070-Installing\_Examples-0190-Updating\_VSA\_Examples\_collection.md
-->

#### Updating Examples

If the instructor updates the examples during class and pushes the
updates to GitHub, run the following to pull in the updates:

```bash
git pull
```



<!---
Filename: 150-080-Installing\_Syntax\_Highlighter-0000-Chapter-Title.md
-->

### Installing Syntax Highlighter



<!---
Filename: 150-080-Installing\_Syntax\_Highlighter-0260-Syntax\_highlighting\_in\_VIM.md
-->

Use a syntax highlighter to catch errors early. This will save you time and trouble.

#### Syntax Highlighting in vim

You can install the CFEngine 3 syntax highlighter for vim using the
following shell script, or visit [Code Editors](http://www.cfengine.com/cfengine-code-editors/) on cfengine.com.



<!---
Filename: 150-080-Installing\_Syntax\_Highlighter-0263-install\_syntax\_highlighter.exr.md
-->

#### Vim syntax highlighter installation script

We provide a shell script that will install the vim syntax highlighter:

```bash
yum install vim
sh 150-080-Installing_Syntax_Highlighter-0265-Install_Vim_Plugin_CLASSONLY.sh
vim hello_world.cf
```



<!---
Filename: 150-080-Installing\_Syntax\_Highlighter-0270-Syntax\_highlighting\_in\_EMACS.md
-->

#### Emacs

See "Learning CFEngine 3" book or the [Code Editors](http://cfengine.com/cfengine-code-editors/) page on cfengine.com



<!---
Filename: 150-080-Installing\_Syntax\_Highlighter-0280-Syntax\_highlighting\_exercise.exr.md
-->

#### Verify Syntax Highlighter Has Pretty Colors

Open "hello\_world.cf" in your file editor and ensure you see the pretty
colors of syntax highlighting.

```bash
vim hello_world.cf
```



<!---
Filename: 150-090-Using\_Examples-0000-Chapter-Title.md
-->

### Using the Collection



<!---
Filename: 150-090-Using\_Examples-0240-Running\_the\_examples.md
-->

#### Running the examples

All of the examples are shipped as standalone CFEngine 3 files which
you can run on the command-line by specifying the path to the input
file with the *-f* switch:

```bash
cf-agent -f ./create_file.cf
```



<!---
Filename: 150-090-Using\_Examples-0245-Running\_the\_examples.exr.md
-->

#### Run the "Create File" example:

```bash
cf-agent -f ./create_file.cf
```



<!---
Filename: 150-090-Using\_Examples-0250-Running\_the\_examples.md
-->

#### Running the Examples: Inform Mode

We recommend adding *-I* to turn on Inform mode, to inform of
changes made to the system.  By default CFEngine won't inform of changes
as reports at scale (e.g. tens of thousands of systems) can be overwhelming.
However, while learning, it's educational to know when CFEngine makes changes
and what those changes are.

Example:

```bash
cf-agent -I -f ./create_file.cf
```



<!---
Filename: 150-090-Using\_Examples-0255-Running\_the\_examples.exr.md
-->

#### Inform Mode

Run the "Create File" example with "Inform" on:

```bash
rm /tmp/test
cf-agent -I -f ./create_file.cf
```



<!---
Filename: 150-090-Using\_Examples-0290-List\_contents.exr.md
-->

#### List contents

Run the "l.sh" script to list the collection contents.

```bash
./l.sh
```

Notice the content is structured and the materials proceed
in sequence from most basic to more advanced.

If you need to find something, you can grep for it, or use
"l.sh" as a sort of "table of contents".


\begin{codelisting}
\codecaption{1.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

      "The value is '$(mystring)'";

      "$(the_sum_of_all_parts)"
        handle => "list_demo",
        comment => "Demonstrate how list variables are handled";

  vars:

      "list_1"
        ilist => { "1", "2" };

      "list_2"
        ilist => { "3", "4" };

      "the_sum_of_all_parts"
        ilist => { @(list_1), @(list_2) };

      "mystring"
        string => join("->", the_sum_of_all_parts );

}
```
\end{codelisting}

<!---
Filename: 200-000-Part-Title-0000-Introduction.md
-->

## Introduction



<!---
Filename: 200-010-Introductory\_overview-0000-Chapter-Title.md
-->

### Overview

At this point of the course, a brief introductory lecture is given
introducing CFEngine and the idea of desired state management.

For students doing the correspondence course, please watch:

CFEngine 101 webinar series (Feb 2014)

1. [IT Automation with CFEngine: Business Values and Basic Concepts](https://www.youtube.com/watch?v#Atf5MhjBHpM)

2. [Getting Started with CFEngine](https://www.youtube.com/watch?v#riMkdQKBI0M)



<!---
Filename: 200-010-Introductory\_overview-0032-lifecycle\_of\_a\_machine.BOOKONLY.md
-->

![Alt text](200-010-Introductory_overview-0035-lifecycle.png)



<!---
Filename: 200-020-Definitions-0000-Chapter-Title.md
-->

### Definitions



<!---
Filename: 200-020-Definitions-0050-Promise.md
-->

#### Promise

Promise
: A promise is a statement of intention.

Trust is an economic time-saver. If you can't trust you have to verify,
and that is expensive.

To improve trust we make promises. A promise is the documentation of
an intention to act or behave in some manner. This is what we need to
learn to trust systems.



<!---
Filename: 200-020-Definitions-0051-Promise\_outcomes.md
-->

#### Promise Outcomes

CFEngine works on a simple notion of promises. Everything in CFEngine
can be thought of as a promise to be kept by different resources in
the system.

CFEngine manages every intended system outcome as "promises" to be kept.

Promises are always things that can be kept and repaired continuously,
on a real time basis, not just once at install-time.

#### Every promise in CFEngine can have one of three outcomes

KEPT
: No repairs needed, system matches spec (is already converged).

REPAIRED
: system did not match spec, and CFEngine repaired it (converged it).

NOTKEPT
: system did not match spec, and CFEngine could not repair (converge) it.

NOTKEPT outcomes likely require attention!

REPAIRED outcomes may require attention (especially if they keep recurring).



<!---
Filename: 200-020-Definitions-0051-Promises\_plus\_Patterns\_equals\_Configuration.md
-->

### Promises + Patterns = Configuration

Combining promises with patterns to describe where and when promises
should apply is how CFEngine works.

It can be represented by this formula:

{$$}
{Promises} {+} {Patterns} = {Configuration}
{/$$}

For example, you may want all hosts at your primary site to have
home directories mounted over autofs but not at your DR site;
or you may want to run extra file-integrity checking on hosts 
in your DMZ.  In both examples, you have a promise and a pattern
as to when and where it applies.



<!---
Filename: 200-020-Definitions-0060-Policy.md
-->

#### Policy
 
Policy
: A policy is a set of intentions about the system, coded as a list of
promises. A policy is not a standard, but the result of specific
organizational management decisions.



<!---
Filename: 200-020-Definitions-0065-simple\_promise\_files\_nologin.md
-->

#### Example simple promise - create a file

```cfengine3
files:

    "/etc/nologin" 

        create  => "true",
        comment => "Prevent non-root users from logging in so we can perform maintenance";
```



<!---
Filename: 200-020-Definitions-0070-the\_most\_basic\_form\_of\_a\_promise.md
-->

#### The Most Basic Form of a Promise

```cfengine3
promise_type:

       "promiser" 

            attribute1 => value1,
            attribute2 => value2;
```



<!---
Filename: 200-020-Definitions-0090-Promise\_Type.md
-->


#### Basic promise types
files
: A promise about a file, including its existence, attributes and contents.

packages
: A promise to install (or remove or update or verify) a package.

processes
: A promise concerning items in the system process table.

vars
: A promise to be a variable, representing a value.

reports
: A promise to report a message.

commands
: A promise to execute a command.




<!---
Filename: 200-020-Definitions-0100-Promise\_Type\_example.md
-->

#### Example of Promise Type

`files` followed by a single colon indicates the promise type.

The promise type is always followed by a single colon.


```cfengine3, options:  "hl_lines": [1]
files:    

    "/etc/nologin" 

        create  #> "true",
        comment #> "Prevent non-root users from logging in";
```



<!---
Filename: 200-020-Definitions-0110-Promiser.md
-->

#### Promiser

Promiser
: The promiser is the part of the system that will be affected by the
promise. (We are affected by the promises we make.)



<!---
Filename: 200-020-Definitions-0120-Promiser\_example.md
-->

#### Example of Promiser

'/etc/nologin' is the promiser (the affected system object).

```cfengine3, options:  "hl_lines": [3]
files:

    "/etc/nologin"  

        create  => "true",
        comment => "Prevent non-root users from logging in";
```



<!---
Filename: 200-020-Definitions-0130-Body.md
-->

#### Definition: "Body"

Body
: The main part of a book or document, not including the introduction,
notes, or appendices (parts added at the end). --- Macmillan Dictionary

Examples of bodies: body of a letter, body of a contract.

The body is where the details are.



<!---
Filename: 200-020-Definitions-0132-Definition\_of\_Attribute.md
-->

#### Definition: "Attribute"

> *Feature*
> - an important part or aspect of something
> "Each room has its own distinctive features."
> 
> *Quality*
> - a feature of a thing, substance, place etc.
> "the addictive qualities of tobacco"
> 
> *Attribute*
> - a quality or feature of someone or something
>
> --- Macmillan Dictionary



<!---
Filename: 200-020-Definitions-0135-Promise\_Body.md
-->

#### Promise Body

A promise body is a collection of promise attributes that details and
constrains the nature of the promise.



<!---
Filename: 200-020-Definitions-0140-Promise\_Body\_example\_2.md
-->

Example of Promise Body

The last three lines constitute the promise body.

```cfengine3, options:  "hl_lines": [5,6,7]
files:

    "/var/cfengine/i_am_alive" 

        create  => "true",                          
        touch   => "true",                         
        comment => "Prove CFEngine is running.";  
```



<!---
Filename: 200-020-Definitions-0150-Promise\_Bundle.md
-->

#### Promise Bundle

The promise bundle is one of the basic building blocks of configuration
in CFEngine.

A promise bundle is a group of one or more promises.

The bundle allows us to group related promises, and to refer to such
groups by name.

We will some examples of promise bundles in the next chapter.



<!---
Filename: 200-020-Definitions-0170-declarative\_vs\_imperativ\_sandwich\_example.md
-->

#### "Declarative" vs. "Imperative" Programming

> A declarative programming style ... is often unfamiliar to newcomers, even
> if they are experienced programmers in other domains. Most commonly-used
> programming languages are examples of imperative programming, in
> which the programmer must describe a specific algorithm or process.
> Declarative programming instead focuses on describing the particular
> state or goal be be achieved.
> --- [Mike English](http://spin.atomicobject.com/2012/09/13/from-imperative-to-declarative-system-configuration-with-puppet/)



<!---
Filename: 200-020-Definitions-0180-declarative\_vs\_imperative.md
-->

#### Examples

> Make Me a Sandwich! (Imperative) Spread peanut butter on one slice of
> bread. Set this slice of bread on a plate, face-up. Spread jelly on
> another slice of bread. Place this second slice of bread on top of the
> first, face-down.  Bring me the sandwich.
> 
> The Sandwich I Desire. (Declarative) There should be a sandwich on a
> plate in front of me... It should have only peanut butter and jelly
> between the two slices of bread.
> --- [Mike English](http://spin.atomicobject.com/2012/09/13/from-imperative-to-declarative-system-configuration-with-puppet/)


#### Declarative Programming for System Administration
> Declarative programming is a more natural fit for managing system
> configuration. We want to be talking about whether or not MySQL is
> installed on this machine or Apache on that machine, not whether yum
> install mysql-server has been run here or apt-get install apache2
> there. It allows us to express intent more clearly in the code. It is
> also less tedious to write and can even be more portable to different
> platforms.
> --- [Mike English](http://spin.atomicobject.com/2012/09/13/from-imperative-to-declarative-system-configuration-with-puppet/)



<!---
Filename: 200-020-Definitions-0190-Declarative\_intent.md
-->

#### Declarative has a higher Signal to Syntax Ratio

A declarative language allows us to express intent more clearly, to let
the intent shine through the syntax of the code.  It allows us to have
a higher Signal to Syntax ratio.



<!---
Filename: 200-020-Definitions-0200-Convergence.md
-->

Convergence

convergence
: coming to a desired end state  (Mark Burgess, http://markburgess.org/blog_cd.html)

![Convergence](convergence.png)

converge
: come from different directions and meet at (a place).
"half a million sports fans will converge on the capital"
: (of a number of things) gradually change so as to become similar or develop something in common.
OxfordDictionaries.com



<!---
Filename: 200-020-Definitions-0210-Thinking\_Declaratively.md
-->

#### Writing CFEngine policies

1. State the sysadmin problem.

2. Envision the desired end state.

3. Translate the desired end state into CFEngine Policy Language.




<!---
Filename: 200-020-Definitions-0220-Thiking\_Declaratively.exr.md
-->

#### Learning to Think Declaratively

1. State an actual sysadmin problem you need to solve

2. Envision the desired end state; state what the desired end result is, in a declarative (not procedural) fashion.

In other words, focus on the WHAT and let CFEngine handle the HOW (which may vary from OS to OS anyway).



<!---
Filename: 250-000-Part-Title-0000-Files\_Processes\_Commands\_and\_Reports.md
-->

## Basic Promises



<!---
Filename: 250-010-Files-0000-Chapter-Title.md
-->

### Files


\begin{codelisting}
\codecaption{250-010-Files-0210-Create\_a\_file.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/nologin2"

        handle => "touch_etc_nologin",
        comment => "Quiesce the system for maintenance",
        create  => "true";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{250-010-Files-0220-Touch\_a\_file.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/var/cfengine/i_am_alive"

        comment => "Update heartbeat timestamp (mtime)
                          to confirm CFEngine is running",
        create  => "true",
        touch   => "true";
}
```
\end{codelisting}

<!---
Filename: 250-010-Files-0230-Exercise.exr.md
-->

#### Create a file

Write and run a policy promising that /etc/ftp.deny is present




<!---
Filename: 250-020-Processes-0000-Chapter-Title.md
-->

### Processes


\begin{codelisting}
\codecaption{250-020-Processes-0010-Stopping\_A\_Process\_Gracefully.cf}
```cfengine3, options: "linenos": true
# Shut down print services.
# To set up for this demo, run:
# yum install cups
# /etc/init.d/cups start

bundle agent main {

  processes:

      "cupsd"

        handle => "shutdown_print_services",
        comment => "Shutdown print services on machines
that are not print servers",
        process_stop => "/etc/init.d/cups stop";

}
```
\end{codelisting}

<!---
Filename: 250-020-Processes-0255-Definition\_scalar.md
-->

#### Note on Syntax: Single Values vs Lists

Definitions

scalar
: (programming) Any data type that stores a single value (e.g. a number or Boolean), as opposed to an aggregate data type that has many elements. A string is regarded as a scalar in some languages (e.g. Perl)  --- Free On-Line Dictionary of Computing

In CFEngine syntax, scalar values are enclosed in double quotes:

```cfengine3
process_stop => "/etc/init.d/cups stop",
```



<!---
Filename: 250-020-Processes-0257-Definition\_list.md
-->

list
: A data structure holding many values --- Free On-Line Dictionary of Computing

In CFEngine syntax, lists are in curly braces and 
are a collection of comma-separated scalar values:

```cfengine3
processes:
    "cupsd"
        signals #> { "TERM", "KILL" };
```


\begin{codelisting}
\codecaption{250-020-Processes-0260-Terminating\_a\_process.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  processes:

      "eggdrop"

        handle => "kill_IRC_bots",
        comment => "We don't want IRC bots on our Web servers",
        signals => { "term", "KILL" };

}
```
\end{codelisting}

<!---
Filename: 250-020-Processes-0270-Exercise.exr.md
-->

#### Kill a process

Start print services:

  yum install cups
  /etc/init.d/cups start

Write and run a promise to signal TERM and KILL to the cupsd process


WARNING: add example here

 processes:

    "^root\s+\d+\s+\d+\s+\d+\s+[89][0-9]\..*splunkd"

      comment => "Restart splunk if it's using more than 80% of the CPU.
                  A restart seems to
                  clear it up.",
      process_stop => "/opt/splunkforwarder/bin/splunk restart";

Add ps command line and how to find it.





<!---
Filename: 250-030-Commands-0000-Chapter-Title.md
-->

### Commands


\begin{codelisting}
\codecaption{250-030-Commands-0290-date.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  commands:

      "/bin/date";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{250-030-Commands-0300-echo\_hello\_world.cf}
```cfengine3, options: "linenos": true
bundle agent main
{

  commands:

      "/bin/echo"

        comment => "Demonstrate a command with arguments",
        args => "Hello world!";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{250-030-Commands-0310-Relative\_path\_does\_not\_work.cf}
```cfengine3, options: "linenos": true
bundle agent main
{

  commands:

      "echo"
        args => "Hello world";

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{250-030-Commands-0320-Dig\_a\_deep\_hole.sh}
```bash, options: "linenos": true
#!/bin/sh

# demonstrate handling of multi-line output

# Create an executable with a long path name - we'll need
# it for the next example

LONG_PATH=/usr/local/sbin/a/really/long/path/to
/bin/mkdir  -p ${LONG_PATH}
/bin/cp -p /usr/bin/printf ${LONG_PATH}/printf >/dev/null
ls -l /usr/bin/printf ${LONG_PATH}/printf
```
\end{codelisting}
\begin{codelisting}
\codecaption{250-030-Commands-0330-Quoted\_multiline\_output.cf}
```cfengine3, options: "linenos": true
# demonstrate handling of multi-line output

bundle agent main
{

  commands:
      "/usr/local/sbin/a/really/long/path/to/printf"
        args => "Line 1\nLine 2\nLine 3",
        comment => "Demonstrate how CFEngine truncates
                    path names in command output";
}
```
\end{codelisting}

<!---
Filename: 250-030-Commands-0340-command.exr.md
-->

yum install mlocate

Write and run a promise to run the "updatedb" command to update the "locate" database.



<!---
Filename: 250-032-Reports-0000-Chapter-Title.md
-->

### Reports


\begin{codelisting}
\codecaption{250-032-Reports-0010-hello\_world.cf}
```cfengine3, options: "linenos": true
bundle agent main
{
  reports:

      "Hello world!";
}
```
\end{codelisting}

<!---
Filename: 275-000-Part-Title-0000-Variables.md
-->

### Variables

CFEngine variables can contain single values or collections of single values (lists, arrays and JSON containers).



<!---
Filename: 275-001-Scalars-0000-Chapter-Title.md
-->

#### Scalars



<!---
Filename: 275-001-Scalars-0010-intro.md
-->

Scalars

* A scalar is a single value.

* Each scalar may have one of three types: string, int or real.



<!---
Filename: 275-001-Scalars-0015-naming\_scalar\_vars.md
-->

#### Identifying scalar variables

A scalar variable is represented as

```cfengine3
$(identifier)
```

or

```cfengine3
${identifier}
```

Round braces are Make-style; curly braces are UNIX shell style.

Example:
```cfengine3
reports:
  "Hello, $(name)";
```

Braces help the parser know for sure when a variable name ends so it doesn't have to guess if the variable name is embedded in text: 

```cfengine3
reports:
  "The product number is: $(machine_type)$(model)";
```


\begin{codelisting}
\codecaption{275-001-Scalars-0018-scalar.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "name"
        string => "Inigo Montoya";

      "greeting"
        string  => "Hello. My name is $(name). ";

  reports:

      "$(greeting)";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-001-Scalars-0020-Examples\_of\_scalar\_variables.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "my_string"      string  => "String contents...";

      "my_int" int => "42";

      "my_real" real    => "3.141592654";

      "my_second_string"
        string =>  "I love: $(my_string)";

  reports:

      "My string is: $(my_string)
My integer is: $(my_int)
My real number is: $(my_real)
$(my_second_string)";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-001-Scalars-0160-var.cf}
```cfengine3, options: "linenos": true
SKIP
bundle agent main {


  vars:
      "my_string"
        handle => "declare_string_var",
        comment => "Demonstrate declaring var type and value",
        string  => "The answer is: ";

      "my_int"
        handle => "declare_int_var",
        comment => "Demonstrate declaring var type and value",
        int     => "42";


  commands:

      "/bin/echo $(my_string)  $(my_int)";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-001-Scalars-0170-typing.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "my_int"

        comment => "Try to assign a real number to an integer
                          variable to see how CFEngine handles
                          data typing.",
        int => "1.5";

  reports:

      "My value is $(my_int).";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-001-Scalars-0180-typing\_2.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "my_int"

        comment => "Try to assign a string to an integer variable.",
        int => "hello world";


  reports:

      "my int is $(my_int)";

}
```
\end{codelisting}

<!---
Filename: 275-001-Scalars-0190-vars.exr.md
-->

#### Make and use a variable

Write a policy to set a variable called "first_name" and set the value to your first name.

Then create a reports promise to have CFEngine say hello using this variable.




<!---
Filename: 275-001-Scalars-0200-variable\_scope.md
-->

#### Scope of variables

Note: a fully qualified variable consists of the bundle name wherein the variable is defined plus the variable name. 

```cfengine3
bundle agent mybundle {
  vars:
      "myvar"
        string => "myvalue";
}
```

Unqualified: $(myvar) 

Qualified: $(mybundle.myvar) 



\begin{codelisting}
\codecaption{275-001-Scalars-0410-Demo\_of\_variable\_scope.cf}
```cfengine3, options: "linenos": true
bundle agent bundle_1 {

  vars:
      "var_1"
        string  =>  "Hello World";
}

bundle agent bundle_2 {

  vars:
      "var_1"
        string => "My fair lady";

  reports:
      #"Variable value = $(bundle_1.var_1)";
      #"Variable value = $(bundle_2.var_1)";
      "Variable value = $(var_1)";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-001-Scalars-0411-variable\_scope\_2.cf}
```cfengine3, options: "linenos": true
# Simplify / break in parts

bundle agent bundle_0 {
      vars: "fruit" string => "banana";
      reports: "This is bundle_0";
}

bundle agent bundle_1 {
      vars: "fruit" string => "apple";
  reports:
      "Bundle 1: bundle_0.fruit = '$(bundle_0.fruit)'";
}

bundle agent bundle_2 {
  reports:
      "Bundle 2: bundle_1.fruit = '$(bundle_1.fruit)'";
}

bundle agent bundle_4 { vars: "xyzzy" string => "magic"; }
```
\end{codelisting}

<!---
Filename: 275-001-Scalars-0420-variable\_scope.exr.md
-->

Declare a variable in one bundle and then use it from another bundle.  Use the cf-agent -b switch to specify bundle sequence.

```bash
cf-agent -f <filepath> -b <bundlesequence>
```



<!---
Filename: 275-010-Integer\_Constants-0000-Chapter-Title.md
-->

##### Integer Constants



<!---
Filename: 275-010-Integer\_Constants-0220-Special\_suffixes\_for\_Integer\_constants.md
-->

#### Integer Suffixes

Integer values may use suffixes to represent large numbers.

Which is easier to read?

* 200000
* 200k



<!---
Filename: 275-010-Integer\_Constants-0230-Special\_suffixes\_for\_Integer\_constants\_refcard.md
-->

#### Integer Suffixes

*k*
: value times 1000.

*m*
: value times 1000^2

*g*
: value times 1000^3

*K*
: value times 1024.

*M*
: value times 1024^2

*G*
: value times 1024^3

*%*
: meaning percent, in limited contexts

*inf*
: a constant representing an unlimited value.


\begin{codelisting}
\codecaption{275-010-Integer\_Constants-0240-Integer\_suffixes\_demo.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "fourty_two_kilobytes"             int     => "42k";  # 42 x 1000
      "fourty_two_kibibytes"             int     => "42K";  # 42 x 1024
      "infinity"                         int     => "inf";  # infinity


  reports:

      "42 x 1000 = $(fourty_two_kilobytes)";
      "42 x 1024 = $(fourty_two_kibibytes)";
      "infinity = $(infinity)";
}
```
\end{codelisting}

<!---
Filename: 275-020-Lists-0000-Chapter-Title.md
-->

#### Lists



<!---
Filename: 275-020-Lists-0250-List\_variables.md
-->

A list is a collection of scalars (single values).

A list variable is represented as @(identifier) or @(bundlename.identifier)

If you refer to a list variable in scalar context by using $(identifier), cfengine will implicitly loop over the values of @(list).


\begin{codelisting}
\codecaption{275-020-Lists-0260-List\_variables\_and\_implicit\_looping.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "shopping_list"

        slist   => {
                     "apples",
                     "bananas",
                     "grapes",
                     "plantains",
                     "coconuts",
        };

  reports:

      "buy $(shopping_list)";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{275-020-Lists-0270-example\_of\_implicit\_looping\_removing\_unwanted\_groups.cf}
```cfengine3, options: "linenos": true
SKIP
bundle agent main {

  vars:

      "unwanted_groups"
        handle => "blacklist_demo",
        comment => "A practical example of looping over a list?",
        slist => {
                   "games",
                   "mail",
        };
  files:

      "/etc/group"

        edit_line => delete_group(@(unwanted_groups)),
        handle => "purge_unwanted_groups",
        comment => "Demonstrate parameterization of an edit_line bundle";

}

####################################################################

bundle edit_line delete_group(unwanted_group) {

  delete_lines:
      "^$(unwanted_group):.*"
        handle => "purge_a_single_unwanted_group",
        comment => "Remove a specified group";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{275-020-Lists-0280-List\_variables\_Concatenation\_of\_slists.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "preface"
        string => "Now hear this: ";

      "my_slist"
        slist => { "String contents...", "...are great!" };

      "the_sum_of_all_parts"
        slist => { $(preface), @(my_slist) };

  reports:

      " Iterating over list 'the_sum_of_all_parts': $(the_sum_of_all_parts)"
        handle => "list_demo",
        comment => "Demonstrate how list variables are handled";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-020-Lists-0290-Lists\_of\_integers.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "my_list"

        handle => "int_list",
        comment => "Demonstrate a list of integers",
        ilist => { "1", "2", "3" };
  reports:



      "Iterating over the values in @(my_list):  $(my_list)"
        handle => "demo_int_list",
        comment => "Demonstrate implicit looping over an ilist";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{275-020-Lists-0300-Lists\_of\_real\_numbers.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "my_list"

        handle => "rlist_demo",
        comment => "Create an rlist",
        rlist => { "1.5", "3.0", "4.5" };


  reports:



      "Iterating over the values in @(my_list):  $(my_list)"
        handle => "display_rlist",
        comment => "Demonstrate looping over an rlist";
}
```
\end{codelisting}

<!---
Filename: 275-020-Lists-0310-exercise.exr.md
-->

Create a list variable containing names of five files to create.  For example:

      /tmp/file1
      /tmp/file2
      /tmp/file3
      /tmp/file4
      /tmp/file5

   Then use a single "files" promise to ensure all five files exist.
   
*For advanced students, add a report if any of the files are over 10 bytes in size.



<!---
Filename: 275-020-Lists-0320-exercise.exr.md
-->

Create a list containing names of processes that should not be running: for example "trn" and "eggdrop"

   Use a single "processes" promise to ensure these processes are not running.

If you finish before the rest of the class, please study your red CFEngine book.




<!---
Filename: 275-030-Data\_Structures\_Arrays-0000-Chapter-Title.md
-->

#### Arrays



<!---
Filename: 275-030-Data\_Structures\_Arrays-0340-Arrays\_arrays.md
-->

Arrays are associative (hashes). 

They may contain scalars or lists as their elements.

Array variables are written with '[' and ']' brackets:

```cfengine3
$(array_name[key_name])
```

or

```cfengine3
$(bundle_name.array_name[key_name])
```

Example: 

Food Prices
| Apple | 59c |
| Banana | 30c |
| Oranges | 35c |

Variable assignment:

```cfengine3
vars:   "food_prices[Apple]"    string =>  "59c";
```
  
Now we can use this variable:
```cfengine3
$(food_prices[Apple])
```


\begin{codelisting}
\codecaption{275-030-Data\_Structures\_Arrays-0349-array\_simple\_example.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "food_prices[Apple]"
        string =>  "59c";

      "food_prices[Banana]"
        string =>  "30c";

      "food_prices[numlist]"
        ilist => { "1", "2", "3" };


  reports:
      "Apple costs $(food_prices[Apple])";
      "Banana costs $(food_prices[Banana])";
      "Numlist: $(food_prices[numlist])";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{275-030-Data\_Structures\_Arrays-0350-Arrays\_Array\_of\_strings.cf}
```cfengine3, options: "linenos": true
bundle agent main {
  vars:
      "cfengine_components[cf-monitord]"
        string => "The monitor";

      "cfengine_components[cf-serverd]"
        string => "The server";

      "cfengine_components[cf-execd]"
        string => "The executor";

      "component_names"
        comment => "Extract keys from cfengine_components array",
        slist => getindices("cfengine_components");

  reports:
    "Key = '$(component_names)'";
    "Value = $(cfengine_components[$(component_names)])";
    "cf-monitord is $(cfengine_components[cf-monitord])";
    "$(component_names) = $(cfengine_components[$(component_names)])";



}

```
\end{codelisting}

<!---
Filename: 275-030-Data\_Structures\_Arrays-0355-array.exr.md
-->

#### Print array contents using getindices()

Print contents of the array from your last exercise
by using the getindices() function to get a list of
keys, and then iterate over the keys to extract the
values.


\begin{codelisting}
\codecaption{275-030-Data\_Structures\_Arrays-0360-Arrays\_Keys\_are\_case\_senSiTiVE.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "cfengine_components[cf-execd]"
        handle => "describe_executor",
        comment => "Document the cf-execd component",
        string => "The executor";

  reports:

      "$(cfengine_components[CF-exEcD])"
        handle => "case_demo",
        comment => "Case maTTerS!";

}

```
\end{codelisting}

<!---
Filename: 275-030-Data\_Structures\_Arrays-0370-Arrays\_Example.md
-->

See 220-1850_Security.__Configure_sshd,_stub.cf



<!---
Filename: 275-030-Data\_Structures\_Arrays-0380-Arrays.exr.md
-->

Make an array, student_grades.

Populate it with the following data:


|   Key |    Value |
| Joe | A |
| Mary | A |
| Bob | B |
| Sue | B |

Display the contents of the array.


\begin{codelisting}
\codecaption{275-030-Data\_Structures\_Arrays-0390-Arrays\_Array\_of\_slists.cf}
```cfengine3, options: "linenos": true
bundle agent main {
      # implicit looping over slist in array

  vars:
      "config[users]"
        handle => "users_list_in_config_array",
        comment => "Demonstrate how an array value can hold a list",
        slist => { "jim", "jane", "george" };

      "config[packages]"
        handle => "packages_list_in_config_array",
        comment => "Demonstrate how an array value can hold a list",
        slist => { "httpd", "php" };

      #######################################################################

      "keys"
        handle => "config_array_keys",
        comment => "generate a list containing keys to 'config' array",
        slist => getindices("config");


  reports:


      "The value for key $(keys) is: $(config[$(keys)])";

}
```
\end{codelisting}

<!---
Filename: 275-050-Data\_Structures\_Containers-0000-Chapter-Title.md
-->

#### Data Containers


\begin{codelisting}
\codecaption{275-050-Data\_Structures\_Containers-0010-readjson.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "mydata"
        data => parsejson('{"Pizza" : "Pepperoni"} ');

      "keys"
        slist => getindices("mydata");

  reports:

      "$(keys)  $(mydata[$(keys)])";
}

----
Exercise

1. Turn your array from the previous exercises into
   a JSON data file, example.json

{
  "iPhone" : "500$",
  "Samsung" : "450$",
}

2. Read it in a "data" type variable using readjson()
   function

  vars:

      "mydata"
        data => readjson("/path/to/example.json", 100k);

3. Report its contents   
   - get the keys using getindices()
   - iterate over the keys to report the values
  vars:
      "keys"
        slist => getindices("mydata");
  reports:
      "$(keys)  $(mydata[$(keys)])";
```
\end{codelisting}

<!---
Filename: 280-000-Part-Title-0000-Methods.md
-->

### Methods

These are promises to take on a whole other bundle of promises.


\begin{codelisting}
\codecaption{280-010-Methods-0010-simple\_example.cf}
```cfengine3, options: "linenos": true
Exercise
-----------

1. create two bundles that each reports its name
2. have bundle #1 call bundle #2


bundle agent main {

  vars:

      "userlist" slist => { "alex", "ben", "charlie", "diana", "rob" };

  methods:

      "Remove Users"

        usebundle => remove_user("$(userlist)");

}

###########################################

bundle agent remove_user(user) {

  commands:

      "/usr/sbin/userdel $(user)";
      "/bin/rm /var/spool/cron/$(user)";
      "/bin/rm /var/mail/$(user)";
}
```
\end{codelisting}

<!---
Filename: 300-000-Part-Title-0000-Classes.md
-->

## Classifying (Grouping) Hosts



<!---
Filename: 300-010-Basic\_Examples\_Classes-0000-Classes-Chapter-Title.md
-->

### Classes



<!---
Filename: 300-010-Basic\_Examples\_Classes-0003-definition.md
-->

Class
: A group of things, animals, or people with similar features or qualities. ---Macmillan Dictionary

> Classes are the if ( test ) then of CFEngine language. Tests are built-in
> or user defined. Hosts that pass the test are members of the class.
> ---Neil Watson, CFEngine Consultant


\begin{codelisting}
\codecaption{300-010-Basic\_Examples\_Classes-0005-Classes\_Reports.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:
    linux::
      "I love Linux";

  reports:
    WinXP::
      "I love Windows";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-010-Basic\_Examples\_Classes-0010-Using\_classes\_to\_determine\_role.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:
    ipv4_205_186_156::
      "I am on our public net. I'll be a Web server.";

  reports:
    ipv4_10::
      "I am on our private net. I'll be a database server.";


}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-010-Basic\_Examples\_Classes-0050-Report\_OS\_Type.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

      WinXP:: "Hello world! I am running on a Windows system.";

      linux:: "Hello world! I am running on a Linux system.";

      redhat:: "Hello world! I am running on a redhat Linux system.";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-010-Basic\_Examples\_Classes-0060-Note\_on\_what\_happens\_to\_dashes\_in\_hostnames.cf}
```cfengine3, options: "linenos": true
# CFEngine automatically canonifies hard classes (converts any
# character that is not alphanum/underscore to underscore)
#
# To setup for this example, run "hostname my-hostname-has-dashes"

bundle agent main {

  reports:

      #my-hostname-has-dashes::
    my_hostname_has_dashes::

      "Hello world";

    banana::

      "My hostname is banana";

}

```
\end{codelisting}

<!---
Filename: 300-010-Basic\_Examples\_Classes-0070-examine\_hard\_classes.exr.md
-->

#### Examine Hard Classes

Run CFEngine in verbose mode:

```bash
cf-agent -v -f ./hello_world.cf | less
```

Examine what CFEngine discovered about your system and what hard classes it set.



<!---
Filename: 300-010-Basic\_Examples\_Classes-0080-using\_hard\_classes.exr.md
-->

#### Using hard classes

Print a report if you running in a CentOS 6 system.



<!---
Filename: 300-015-Basic\_Examples\_Classes\_2-0000-Chapter-Title.md
-->

### Class Expressions



<!---
Filename: 300-015-Basic\_Examples\_Classes\_2-0080-Class\_expression\_operators.md
-->

Class operators are used in logical expressions


operator
: In programming, a symbol used to perform an arithmetic or logical operation. 
--- http://encyclopedia2.thefreedictionary.com/operator



#### Operators

Logical operators (in order of precedence of operation)

| ( ) |  Groupers |
| ! | NOT |
| & or . | AND |
| \| \|\| | OR |

#### Truth Tables
If necessary, review [truth tables](https://en.wikipedia.org/wiki/Truth_table#Logical_conjunction_.28AND.29) for logical operations AND, OR, and NOT


\begin{codelisting}
\codecaption{300-015-Basic\_Examples\_Classes\_2-0090-Class\_expression\_operators.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

      linux:: "I am running on a linux system.";

      WinXP:: "I am running on a Windows system.";

      !WinXP:: "Thank goodness.";

      WinXP|linux::  "Am I laughing or crying?";

      WinXP&linux::  "We should never see this report.";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-015-Basic\_Examples\_Classes\_2-0100-Report\_day\_of\_the\_week.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

    Monday::
      "Hello world! I love Mondays!";

      Tuesday::   "Hello world! I love Tuesdays!";

      Wednesday:: "Hello world! I love Wednesdays!";

      Thursday::  "Hello world! I love Thursdays!";

      Friday::    "Hello world! I love Fridays!";

      Saturday::  "Hello world! I love weekends!";

      Sunday::    "Hello world! I love weekends!";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-015-Basic\_Examples\_Classes\_2-0110-Condensed\_report\_day\_of\_week.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

    Monday|Tuesday|Wednesday|Thursday|Friday::
      "Yay!!! I get to work today!";

    Saturday|Sunday::
      "Yay!!! I get to rest today.";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-015-Basic\_Examples\_Classes\_2-0120-OS\_and\_time\_expression.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

      linux.Hr08:: "Linux system AND we are in the 8th hour.";
      linux.Hr11:: "Linux system AND we are in the 11th hour.";
      linux.Hr12:: "Linux system AND we are in the 12th hour.";

      linux.Hr13:: "Linux system AND we are in the 13th hour.";
      linux.Hr16:: "Linux system AND we are in the 16th hour.";


      linux&Hr22:: "Linux system AND we are in the 22nd hour.";

      linux&Hr20:: "Linux system AND we are in the 20th hour.";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{300-015-Basic\_Examples\_Classes\_2-0130-Class\_expression\_OS\_and\_time.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

    (redhat&Monday)|(windows&Wednesday)::

      "This report will show on Redhat servers on Mondays;
       or on Windows servers on Wednesdays";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-030-Basic\_Examples\_Classes\_2-0140-Detect\_VMs.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  classes:
      "i_am_virtual"
        handle => "reality_check",
        comment => "Check if we are running inside a VM",
        expression => regline("(?i).*vmware.*|(?i).*vbox.*|(?i).*qemu.*",
                              "/proc/scsi/scsi");
      # (?i) is the "case-insensitive" switch
      # The shell equivalent would be:
      # /bin/egrep -i 'vmware|vbox|qemu' /proc/scsi/scsi

  reports:
    i_am_virtual::
      "Running inside a VM";
}
```
\end{codelisting}

<!---
Filename: 300-030-Basic\_Examples\_Classes\_2-0150-detect\_vm.exr.md
-->

Report if you are running in a Linux VM

Hint: Joyent Linux containers don't have /proc/scsi/scsi but do have a /proc/version



<!---
Filename: 300-030-Classes-0000-Chapter-Title.md
-->

### Promises about Classes



<!---
Filename: 300-040-Classes\_4-0000-Chapter-Title.md
-->

### Other ways to create Classes

Some promise attributes can create Classes depending on the outcome of the promise.


\begin{codelisting}
\codecaption{300-040-Classes\_4-0020-Ensuring\_CUPSd\_is\_running.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  processes:

      "cupsd"

        restart_class => "cups_needs_to_be_started",
        comment => "We want print services";


  commands:

    cups_needs_to_be_started::

      "/etc/init.d/cups"

        args => "start";


}
```
\end{codelisting}
\begin{codelisting}
\codecaption{300-040-Classes\_4-0030-Ensuring\_httpd\_is\_running.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  processes:
      "httpd"
        restart_class => "start_httpd";

  commands:
    start_httpd::
      "/etc/init.d/httpd start";

}
```
\end{codelisting}

<!---
Filename: 310-000-Part-Title-0000-Language\_Notes.md
-->

## Notes on Syntax and Internals



<!---
Filename: 310-010-Notes\_on\_Syntax-0000-Chapter-Title.md
-->

### Basic Structure

A bundle is a group of one or more promises.  


\begin{codelisting}
\codecaption{310-010-Notes\_on\_Syntax-0350-Two\_promises\_in\_one\_bundle.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/hello"

        create  => "true";

  files:

      "/tmp/world"

        create  => "true";
}
```
\end{codelisting}

<!---
Filename: 310-010-Notes\_on\_syntax-0353-reusing\_promise\_type.md
-->

CFEngine allows you to write shorter code without loss of meaning:
don't specify the promise type, and CFEngine will re-use the promise
type of the preceding promise.


\begin{codelisting}
\codecaption{310-010-Notes\_on\_syntax-0355-Two\_promises\_in\_one\_bundle\_Condensed.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/hello"
        create  => "true";

      "/tmp/world"
        create  => "true";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-010-Notes\_on\_syntax-0358-comments.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/hello"
        create  => "true",
        comment => "inline-comments show up in verbose mode";
      # hash-comments are thrown away by parser.
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-010-Notes\_on\_Syntax-0360-Two\_bundles\_in\_one\_file.cf}
```cfengine3, options: "linenos": true
bundle agent your_bundle_name {

      files: "/tmp/file1" create  => "true";

}

bundle agent example {

      files: "/tmp/file2" create  => "true";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-010-Notes\_on\_Syntax-0370-Whitespace\_and\_indentation\_do\_not\_matter.cf}
```cfengine3, options: "linenos": true
# Whitespace/indentation does not matter, these bundles will both work

bundle agent with_whitespace {

  files:

      "/etc/nologin"

        create => "true";
}


bundle agent no_whitespace { files: "/etc/nologin" create => "true"; }
```
\end{codelisting}

<!---
Filename: 310-030-Notes\_on\_running-0000-Chapter-Title.md
-->

### Multiple passes and Convergence



<!---
Filename: 310-030-Notes\_on\_Running-0010-three\_passes.md
-->

CFEngine will make up to three passes through each bundle to speed convergence to desired state.

Sometimes a promise cannot be repaired because there is a broken dependency.

CFEngine will make multiple passes in auditing/repairing a system. After dependencies are repaired, repairs of dependent promises can now succeed.

Run cf-agent with the -v switch (verbose) and look for "pass 1", "pass 2", and "pass 3" to observe the three passes.


\begin{codelisting}
\codecaption{310-030-Notes\_on\_Running-0020-three\_passes.cf}
```cfengine3, options: "linenos": true
# demonstrate three passes through a bundle by using verbose mode

bundle agent main {

  files:

      "/etc/nologin"

        handle => "touch_etc_nologin",
        comment => "Quiesce the system for maintenance",
        create  => "true";

}
```
\end{codelisting}

<!---
Filename: 310-030-Notes\_on\_Running-0030-three\_passes.exr.md
-->

#### Observe three passes

Run one of your previous exercise files in verbose mode and observe what happens in which pass, and how the passes are labeled.



<!---
Filename: 310-040-Ordering-0000-Chapter-Title.md
-->

### Ordering



<!---
Filename: 310-040-Ordering-0004-intro.md
-->

To facilitate convergence, CFEngine evaluates and repairs promises according to CFEngine "normal ordering" (see https://docs.cfengine.com/docs/master/guide-language-concepts-normal-ordering.html)

Promises of the same type are evaluated in the order they appear in the file.

Promises of different types are evaluated according to "normal ordering".


\begin{codelisting}
\codecaption{310-040-Ordering-0005-ordering\_within\_a\_single\_promise\_type\_is\_linear.cf}
```cfengine3, options: "linenos": true
### demonstrate ordering within a single promise type

bundle agent main {

  reports:
      "Two";
      "Three";

  reports:
      "One";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-040-Ordering-0010-simple\_ordering\_example.cf}
```cfengine3, options: "linenos": true
bundle agent main
{
  reports:

      "Hello world!";

  commands:

      "/bin/echo Hello world!";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-040-Ordering-0015-fileexists.cf}
```cfengine3, options: "linenos": true
# This example introduces the fileexists() function
#
# We will use fileexists() in a later, more complicated
# demonstration of normal ordering

bundle agent main
{

  classes:
      "motd_present"
        expression => fileexists("/etc/motd");

      "motd_absent"
        not => fileexists("/etc/motd");

  reports:
      motd_present::  "OK - found motd: /etc/motd";
      motd_absent::   "FAIL - motd not found: /etc/motd";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-040-Ordering-0020-normal\_ordering.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  classes:
      "myclass"
        comment => "Create soft class for reports promise.",
        expression => fileexists("/tmp/newfile");

  files:
      "/tmp/newfile"

        handle => "create_a_file",
        comment => "Give CFEngine something to do
                          to change system state.",
        create => "true";

  reports:
    myclass::
      "file /tmp/newfile exists";

    !myclass::
      "file /tmp/newfile does not exist";
}
```
\end{codelisting}

<!---
Filename: 310-040-Ordering-0050-Classes\_and\_Reports\_Exercise.exr.md
-->

Create two files.

- Create a file
- Create a second file if the 1st file exists
  - Check if the first file exists, and create a soft class if it does

Run this in verbose mode so you can see what gets created when.



<!---
Filename: 310-050-Knowledge\_Management-0000-Chapter-Title.md
-->

### Knowledge Management



<!---
Filename: 310-050-Knowledge\_Management-0240-is\_one\_of\_the\_key\_challenges\_of\_scale.md
-->

TIP: Knowledge Management is one of the key challenges of scale.


\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0250-handle.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        handle => "create_testfile", # a name for this promise.

      # can be used with depends_on
      # attribute in another promise
      # to document dependency

        create  => "true";

  reports:
    # demonstrate handle conflict
     "hello world"
       handle => "create_testfile";
       
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0260-depends\_on.cf}
```cfengine3, options: "linenos": true
# depends_on controls policy flow.

bundle agent main
{

  reports:

      "System Check"
        handle => "systems_check";

      "Launch!!"
        depends_on => { "fuel_check", "systems_check" },
        handle => "ignition",
        comment => "Demonstrate flow control with depends_on";

      "Fueling..." 
        handle => "fuel_check";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0265-promisee.cf}
```cfengine3, options: "linenos": true
# Demonstrate how depends_on controls policy flow.

bundle agent main
{

  reports:

      "Fueling" -> { ignition }
        handle => "fuel_check";




# long complex policy here











      "Launch!!"
        depends_on => { "fuel_check" },
        handle => "ignition",
        comment => "Demonstrate flow control with depends_on";


      # students should be encouraged to think
      # declaratively
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0270-comment.cf}
```cfengine3, options: "linenos": true
# run this in verbose mode and notice the comment

bundle agent main {

  files:

      "/tmp/testfile"


        handle => "mk_file",
        comment => "Create a vital file, needed for XYZ.",
        create  => "true";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0280-comment\_with\_file\_name\_and\_line\_number.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "name"
        string => "George";

  files:

      "/tmp/testfile"


        handle => "demo_special_variables_in_comment",
        comment => "XYZ needs /tmp/testfile so make it.
Line $(this.promise_linenumber) in $(this.promise_filename)
",
      # this comment will show up in verbose or debug modes

        create  => "true";

  reports:
    DEBUG|DEBUG_example::
      "DEBUG bundle = $(this.bundle)";
      "name = '$(name)'";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{310-050-Knowledge\_Management-0290-promisee.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/httpd/conf/httpd.conf" -> "Web Services team"
      # document stakeholders

        create  => "true";
}
```
\end{codelisting}

<!---
Filename: 310-050-Knowledge-Management-0300-Dunbar\_numbers.md
-->

#### Dunbar numbers

Robin Dunbar pointed out that there are limits to human cognition:

#### Limits to Human Congnition:
* We can only have a close relationship to about 5 things.
* We can have a working relationship with about 30 things or people.
* We can only be acquainted with about 150.

The `Dunbar numbers' are cognitive limits that we have to work around.

http://markburgess.org/blog_km.html



<!---
Filename: 320-000-Part-Title-0000-Editing\_Files.md
-->

## Editing and Copying Files



<!---
Filename: 320-050-Editing\_Files-0000-Chapter-Title.md
-->

### Editing Files: Line-based


\begin{codelisting}
\codecaption{320-050-Editing\_Files-0330-insert\_lines.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        handle  => "files_motd",
        comment  => "Create a nice motd",
        create  => "true",
        edit_line => greet_users;
}

bundle edit_line  greet_users {

  insert_lines:

      "Good morning!"
        handle => "greet_user",
        comment => "Happy users = less complaints. Greet the user
politely.";
}
```
\end{codelisting}

<!---
Filename: 320-050-Editing\_Files-0340-Exercise.exr.md
-->

#### Editing /etc/motd

Write a policy that will ensure /etc/motd always contains:

       Unauthorized use forbidden.



<!---
Filename: 320-050-Editing\_Files-0355-syntax\_pattern\_intro.BOOKONLY.md
-->

![Syntax Pattern 1](320-050-Editing_Files-0355-syntax_pattern_intro.png)


\begin{codelisting}
\codecaption{320-050-Editing\_Files-0360-delete\_lines.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        handle => "motd",
        comment => "Create and populate motd",
        create => "true",
        edit_line => proper_greetings;
}


bundle edit_line  proper_greetings {


  delete_lines:

      ".*"
        handle => "empty_entire_file_please",
        comment => "Let's start with a clean slate.";

  insert_lines:

      "Good morning!"
        handle => "greet_user",
        comment => "Greet the user politely.";

}

```
\end{codelisting}

<!---
Filename: 320-050-Editing\_Files-0370-delete\_lines.exr.md
-->

Do a delete_lines exercise here



<!---
Filename: 320-050-Editing\_Files-0380-replace\_patterns\_and\_edit\_field.md
-->

There are two other promise types you can make in edit\_line bundles:

replace\_patterns
: search and replace

edit\_field
: columnar editing

We will look at them later.



<!---
Filename: 320-051-Editing\_Files\_XML-0000-Chapter-Title.md
-->

### Editing Files: XML


\begin{codelisting}
\codecaption{320-051-Editing\_Files\_XML-0010-edit\_xml.cf}
```cfengine3, options: "linenos": true
bundle agent main
{
  files:
      "/tmp/test.xml"
        comment => "Create XML file",
        create => "true",
        edit_xml => "edit_create_xml";
}

bundle edit_xml edit_create_xml
{
  insert_tree:
      '<Host name="cfe_host"><Alias>cfe_alias</Alias></Host>';
}
```
\end{codelisting}

<!---
Filename: 320-051-Editing\_Files\_XML-0020-output.md
-->

It should generate a file with the following XML:

<?xml version#"1.0"?>
<Host name#"cfe_host"><Alias>cfe_alias</Alias></Host>




<!---
Filename: 320-051-Editing\_Files\_XML-0030-edit\_xml.exr.md
-->

Do an edit_xml exercise here



<!---
Filename: 330-000-Part-Title-0000-Templates.md
-->





<!---
Filename: 330-052-CFEngine\_Templates-0000-Chapter-Title.md
-->

### CFEngine Templates



<!---
Filename: 330-052-CFEngine\_Templates-0370-Introduce\_concept\_of\_templates.md
-->

#### Introducing templates

What are templates?  Why would we use templates?

(In class, a brief introductory talk is given for sysadmins that haven't worked with templates.)

In the following templates, we use an uncommon text string (double underscore) to set out our tokens from the rest of the text. This will make it easy to find and replace the tokens with their values (to fill in the template with values) without accidentally replacing actual text.

#### Example email template:
```text
Hello __NAME__,

  Please buy our product.

Love,
Company
```


#### Example config file template:
```bash
MASTER_MAP_NAME#"auto.master"
TIMEOUT#300
BROWSE_MODE#"yes"
LOGGING#"verbose"
MAP_OBJECT_CLASS#"automountMap"
ENTRY_OBJECT_CLASS#"automount"
MAP_ATTRIBUTE#"ou"
ENTRY_ATTRIBUTE#"cn"
VALUE_ATTRIBUTE#"automountInformation"
USE_MISC_DEVICE#"yes"
SEARCH_BASE#"ou=__SITE__,ou=Sites,dc=VerticalSysadmin,dc=com"
```



<!---
Filename: 330-052-CFEngine\_Templates-0372-insert\_type.md
-->

#### insert_type


> Description: Type of object the promiser string refers to
> 
> Menu:
>    * literal or string (treats multiple lines as separate objects)
>    * preserve_block (treats the multiple lines as a single objects)
>    * file (the string should be interpreted as a filename from which to import lines)
>    ...
> --- CFEngine Reference Manual




\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0373-insert\_type.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/output.txt"

        comment => "Demonstrate insert_type",
        edit_line => example,
        create => "true";
}


bundle edit_line example {

  insert_lines:

      "this is line one
this is line two
this is line three"

        insert_type => "string";

```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0374-insert\_type.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/output.txt"

        comment => "Demonstrate insert_type",
        edit_line => example,
        create => "true";
}


bundle edit_line example {

  insert_lines:

      "this is line one
this is line two
this is line three"

        insert_type => "preserve_block";

```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0375-insert\_type.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/output.txt"

        comment => "Demonstrate insert_type",
        edit_line => example,
        create => "true";
}


bundle edit_line example {

  insert_lines:

      "/etc/passwd"

        insert_type => "file";

```
\end{codelisting}

<!---
Filename: 330-052-CFEngine\_Templates-0377-expand\_scalars.md
-->

#### expand\_scalars

> expand\_scalars
>
> Description: Expand any unexpanded variables
>
> This is a way of incorporating templates with variable expansion into file operations. Variables should be named and scoped appropriately for the bundle in which this promise is made. In other words, you should qualify the variables with the bundle in which they are defined. For example:
>
>     $(bundle.variable)
>
>     $(sys.host)
>
>     $(mon.www_in)
>
> Type: boolean
>
 Default value: false
>
> ---CFEngine Reference Manual



<!---
Filename: 330-052-CFEngine\_Templates-0377-insert\_type.exr.md
-->

#### Insert content with insert_type

Write a policy to insert the contents of /etc/group
into /tmp/dest.txt

Hint: Use a files type promise with an edit_line bundle that
contains an insert_lines promise with insert_type set to "file".


\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0379-Create\_from\_template.cf}
```cfengine3, options: "linenos": true
# CFEngine template using insert_type and expand_scalars

bundle agent main {

  vars:

      "first_name"
        string => "Ed";

  files:

      "/tmp/letter.txt"

        handle    => "write_letter",
        create    => "true",
        edit_line => create_from_template;
}

bundle edit_line create_from_template {

  insert_lines:

      "/var/cfengine/inputs/templates/letter.txt"

        handle => "insert_expanded_template",
        insert_type => "file",
        expand_scalars => "true";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0380-Expand\_from\_template.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        edit_line => InsertFile("/var/cfengine/inputs/templates/motd.txt");
}

bundle edit_line InsertFile(source) {

  insert_lines:

      "$(source)"

        insert_type => "file";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0390-Expand\_from\_template\_and\_expand\_scalars.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        handle => "expand_motd_from_template",
        comment => "Demonstrate expansion of variables
                          in templates",
        edit_line => ExpandMeFrom("$(this.promise_dirname)/motd.txt");
}

bundle edit_line ExpandMeFrom(source) {

  delete_lines:
      ".*"
        handle => "empty_entire_file";

  insert_lines:
      "$(source)"
        handle     => "insert_file_from_template_with_var_expansion",
        insert_type => "file",
        expand_scalars => "true";
}
```
\end{codelisting}

<!---
Filename: 330-052-CFEngine\_Templates-0420-Exercise.exr.md
-->

#### Practice editing file content using a template containing scalar variables.

1. Manually create a template containing the content below.

2. Populate contents of '/tmp/letter.txt' using your new template and the variable "first_name" defined in a bundle "example".

```cfengine3
Hello $(example.first_name),

  Please buy our product.

Love,
Company
```

Gotchas:

- Make sure your bundle name matches the bundle name in the variable in the template.

- Make sure your bundle defines the variable embedded in the template.


\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0430-Expand\_from\_template\_with\_expand\_scalars\_with\_delete\_lines.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        handle => "my_motd",
        comment => "Create my motd from template -- clear file first",
        create => "true",
        edit_line => ExpandFromTemplate("$(this.promise_dirname)/motd.txt");
}

bundle edit_line ExpandFromTemplate(source) {

  delete_lines:

      ".*";

  insert_lines:

      "$(source)"

        insert_type => "file",
        expand_scalars => "true";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0440-add\_a\_group.cf}
```cfengine3, options: "linenos": true
# Make sure /etc/group contains an entry for
# a "cfengine" group, GID 502

bundle agent main {

  files:

      "/etc/group"

        handle => "group_presence",
        comment => "Ensure CFEngine group is present",
        edit_line => cfengine_group_is_present;
}

bundle edit_line cfengine_group_is_present {

  insert_lines:

      "cfengine:x:502:"

        handle => "cfengine_group_entry",
        comment => "Arbitrary group entry in /etc/group";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0450-Removing\_the\_games\_group\_from\_etc\_group\_file.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/group"

        handle => "delete_a_group",
        comment => "delete a specified /etc/group entry",
        edit_line => delete_group("games:x:[0-9]+:");
      # note the parameter
      # you can parameterize bundles
}


bundle edit_line delete_group(group) {

  delete_lines:
      "$(group).*";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0460-Configure\_autofs\_to\_use\_LDAP.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "site"
        string => readfile( "/etc/site" , "3" );
      # site is a 3 char site code.
      # E.g., mil for Milan, war for Warsaw, etc.

  files:
      "/etc/sysconfig/autofs"
        edit_line => configure("$(site)"),
        create => "true";
}

bundle edit_line configure(site) {

  delete_lines:
      ".*";

  insert_lines:
      "MASTER_MAP_NAME=\"auto.master\"
TIMEOUT=300
BROWSE_MODE=\"yes\"
LOGGING=\"verbose\"
MAP_OBJECT_CLASS=\"automountMap\"
ENTRY_OBJECT_CLASS=\"automount\"
MAP_ATTRIBUTE=\"ou\"
ENTRY_ATTRIBUTE=\"cn\"
VALUE_ATTRIBUTE=\"automountInformation\"
USE_MISC_DEVICE=\"yes\"
SEARCH_BASE=\"ou=$(site),ou=Sites,dc=VerticalSysadmin,dc=com\"";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0470-Configure\_autofs\_Using\_a\_template.cf}
```cfengine3, options: "linenos": true
# This file controls the contents of /etc/sysconfig/autofs
# using the template /templates/autofs.tmpl
#
# contents of /templates/autofs.tmpl:
# MASTER_MAP_NAME="auto.master"
# TIMEOUT=300
# BROWSE_MODE="yes"
# LOGGING="verbose"
# MAP_OBJECT_CLASS="automountMap"
# ENTRY_OBJECT_CLASS="automount"
# MAP_ATTRIBUTE="ou"
# ENTRY_ATTRIBUTE="cn"
# VALUE_ATTRIBUTE="automountInformation"
# USE_MISC_DEVICE="yes"
# SEARCH_BASE="ou=$(site),ou=Sites,dc=VerticalSysadmin,dc=com"
#
# and /etc/site which contains, for example, lax

bundle agent main {

  vars:

      "site"
        string => readfile( "/etc/site" , "3" );

  files:
      "/etc/sysconfig/autofs"
        edit_line => expand_from_autofs_template("$(site)"),
        create => "true";
}


#####################################################

bundle edit_line expand_from_autofs_template(site) {

  delete_lines:
      ".*";

      # /templates/autofs.tmpl

  insert_lines:

      "/var/cfengine/inputs/templates/autofs.txt"
        insert_type => "file",                # insert copy of template
        expand_scalars => "true";             # expand scalars

}

#####################################################
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-052-CFEngine\_Templates-0480-insert\_type\_file.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/motd"

        handle => "motd",
        comment => "Generate /etc/motd from static template
                          (no expansion of variables)",
        edit_line => insert_stock_motd;
}


bundle edit_line insert_stock_motd {

  delete_lines:

      ".*";

  insert_lines:

      "/var/cfengine/inputs/templates/motd.txt"

        handle => "motd_contents",
        comment => "insert stock MOTD from static template",
        insert_type => "file";
}
```
\end{codelisting}

<!---
Filename: 330-055-Mustache\_Templates-0000-Chapter-Title.md
-->

### Mustache Templates



<!---
Filename: 330-055-Mustache\_Templates-0000-intro.md
-->

See [Mustache website](http://mustache.github.io/) for documentation of the popular Mustache templating system created by the CTO of GitHub and now available as a library for many languages.


\begin{codelisting}
\codecaption{330-060-0020.mustache}
```text, options: "linenos": true
Uauthorized use forbidded

Property of {{organization}}
{{organizational_unit}}
```
\end{codelisting}

<!---
Filename: 330-060-Mustache\_Templates\_with\_Inline\_Data-0000-Chapter-Title.md
-->

#### Mustache Templates: Expanding with an Inline Data Structure


\begin{codelisting}
\codecaption{330-060-Mustache\_Templates\_with\_Inline\_Data-0010-inline\_json.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:
      "/etc/motd"
        create => "true",
        template_method => "mustache",
        edit_template => "$(this.promise_dirname)/330-060-0020.mustache",
        template_data => parsejson('
           {
              "organization" : "ACME, Inc.",
              "organizational_unit" : "Morale Division",
           }
        ');
}
```
\end{codelisting}

<!---
Filename: 330-065-Mustache\_Templates\_with\_Data\_Container-0000-Chapter-Title.md
-->

#### Mustache Templates: Expanding with an External Data Container


\begin{codelisting}
\codecaption{330-065-Mustache\_Templates\_with\_Data\_Container-0010-container.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "mydata"
        data => parsejson('
           {
              "organization" : "ACME, Inc.",
              "organizational_unit" : "Morale Division",
           }
        ');

  files:
      "/etc/motd"
        create => "true",
        template_method => "mustache",
        edit_template   => "$(this.promise_dirname)/330-065-0015.mustache",
        template_data => @(mydata);

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-065-Mustache\_Templates\_with\_Data\_Container-0015-motd\_1.mustache}
```text, options: "linenos": true
Uauthorized use forbidded

Property of {{organization}}
{{organizational_unit}}
```
\end{codelisting}
\begin{codelisting}
\codecaption{330-070-0015.mustache}
```text, options: "linenos": true
Uauthorized use forbidded

Property of {{vars.g.organization}}

{{#classes.myclass}}
Yes we love UNIX
{{/classes.myclass}}

Have a nice day.
```
\end{codelisting}

<!---
Filename: 330-070-Mustache\_Templates\_with\_Datastate-0000-Chapter-Title.md
-->

#### Mustache Templates with Dataspace


\begin{codelisting}
\codecaption{330-070-Mustache\_Templates\_with\_Datastate-0010.cf}
```cfengine3, options: "linenos": true
bundle common g {
      # global settings

  vars:
      "organization"
        string => "Acme Inc.";
}


bundle agent main {

  files:
      "/etc/motd"
        create => "true",
        template_method => "mustache",
        edit_template   => "$(this.promise_dirname)/330-070-0015.mustache";

}
```
\end{codelisting}

<!---
Filename: 330-080-Copying\_Files-0000-Chapter-Title.md
-->

### Copying Files

It is sometimes simpler to copy files wholesale from a master location.

We will show examples of how to do that after we cover the Standard Library (which facilitates file copying).



<!---
Filename: 400-000-Part-Title-0000-CFEngine\_Syntax.md
-->

## Promise Body Parts



<!---
Filename: 400-010-Body\_Parts-0000-Chapter-Title.md
-->

### Body Parts


\begin{codelisting}
\codecaption{400-010-Body\_Parts-0010-Introduction.cf}
```cfengine3, options: "linenos": true
body type name {

        attribute1 => value1;
        attribute2 => value2;
      ...
        attributeN => valueN;
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0500-Parts\_No\_world\_write\_bit.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        comment => "/tmp/testfile must not be world-writable",
        perms   => not_world_writable;

}


#######################################################

body perms not_world_writable
{
        mode   => "o-w";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0510-Parts\_Remove\_a\_directory.cf}
```cfengine3, options: "linenos": true
COME UP WIT A SIMPLER EXAMPLE


bundle agent main {

  files:

      "/var/logexample/.*"
        handle => "delete_old_logs",
        comment => "Delete files older than specified threshold",
        file_select => days_old("2"),
        delete => tidy;
}

#################################################

body file_select days_old(days)
{
        mtime       => irange(ago(0,0,"$(days)",0,0,0) , now);
        file_result => "!mtime";
}

body delete tidy {

        dirlinks => "delete";  # what to do with Symlinks To Directories
        rmdirs   => "true";    # what to do with Empty Directories

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0520-Parts\_Install\_a\_package.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  packages:

      "php-mysql"

        handle         => "install_php_mysql",
        comment        => "Install a package",
        package_policy => "add", # Ensure that a package is present
        package_method => yum;
}

############################################################

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0530-Parts\_Remove\_a\_package.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  packages:

      "php-mysql"

        handle         => "remove_package",
        comment        => "Demonstrate removing a package",
        package_policy => "delete", # Ensure a package is absent
        package_architectures => { "x86_64" },
        package_method => yum;
}

############################################################



body package_method yum
{
        package_changes => "bulk";
        package_list_command => "/usr/bin/yum --quiet list installed";
        package_patch_list_command => "/usr/bin/yum --quiet check-update";

      # Remember to escape special characters like |

        package_list_name_regex    => "([^.]+).*";
        package_list_version_regex => "[^\s]\s+([^\s]+).*";
        package_list_arch_regex    => "[^.]+\.([^\s]+).*";

        package_installed_regex => ".*(installed|\s+@).*";
        package_name_convention => "$(name).$(arch)";

      # set it to "0" to avoid caching of list during upgrade
        package_list_update_command => "/usr/bin/yum --quiet check-update";
        package_list_update_ifelapsed => "240";

        package_patch_installed_regex => "^\s.*";
        package_patch_name_regex    => "([^.]+).*";
        package_patch_version_regex => "[^\s]\s+([^\s]+).*";
        package_patch_arch_regex    => "[^.]+\.([^\s]+).*";

        package_add_command => "/usr/bin/yum -y install";
        package_update_command => "/usr/bin/yum -y update";
        package_patch_command => "/usr/bin/yum -y update";
        package_delete_command => "/bin/rpm -e --nodeps";
        package_verify_command => "/bin/rpm -V";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0540-Parts\_Setting\_group\_ownership\_based\_on\_OS.cf}
```cfengine3, options: "linenos": true
# Two bundles sharing a body-part that automagically sets
# the correct group ownership based on OS

bundle agent example_1 {

  files:

      "/tmp/testfile"
        handle  => "set_file_attributes_automagically",
        comment  => "Set appropriate file attributes everywhere",
        create  => "true",
        perms   => set_mode_700_admin_group_and_specified_user("sam");
}


#################################################

bundle agent example_2 {

  files:

      "/tmp/testfile2"
        handle  => "set_file_attributes_on_file2",
        comment  => "Set appropriate file attributes everywhere",
        create  => "true",
        perms   => set_mode_700_admin_group_and_specified_user("rob");
}


#################################################


body perms set_mode_700_admin_group_and_specified_user(xyz) {

        mode   => "0700";

        owners => { "$(xyz)" };

      linux::  groups => { "wheel" };
      darwin:: groups => { "admin" };
      sunos::  groups => { "sys" };

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0550-Parts\_Replacing\_Patterns.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/data.txt"
        handle    => "turn_dogs_into_cats",
        comment   => "Demonstrate search-and-replace in a file",
        edit_line => transform_dogs_to_cats;

}

bundle edit_line transform_dogs_to_cats {

  replace_patterns:

      "[Dd]og"

        handle       => "replace_dog_with_cat",
        comment      => "Demonstrate replace_patterns promise",
        replace_with => value("cat");

}

body replace_with value(x)
{
        replace_value => "$(x)";
        occurrences => "all";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0580-perms.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        perms => not_world_writable_and_right_group;

}

body perms not_world_writable_and_right_group {

        groups => {"root", "games", "mail" };
        mode   => "o-w";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-010-Body\_Parts-0590-perms.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/bobsfile"

        create  => "true",
        comment => "Set mode, ownership and group on /tmp/bobsfile",
        perms   => set_file_attributes("777", "bob", "mail");

      "/tmp/susansfile"

        create  => "true",
        comment => "Set mode, ownership and group on /tmp/susansfile",
        perms   => set_file_attributes("000", "susan", "games");
}

#######################################################

body perms set_file_attributes(mode,owner,group)
{
        mode    => "$(mode)";
        owners  =>  {"$(owner)"};
        groups  =>  {"$(group)"};
}
```
\end{codelisting}

<!---
Filename: 400-010-Body\_Parts-0600-body\_parts.exr.md
-->

Create executable shell script

Write a CFEngine policy to ensure '/usr/local/bin/helloworld' exists, has permissions 0755, owner root, group root, and contents:  

```bash
#!/bin/sh

/bin/echo hello world
```



<!---
Filename: 400-020-CFEngine\_Grammar-0000-Chapter-Title.md
-->

### Left Hand Side, Right Hand Side


\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0100-Fix\_Your\_Webserver.cf}
```cfengine3, options: "linenos": true
# Example of
#     cfengine_word => builtin_function()

bundle agent main {

  vars:

      "2xCRLF"
        string => "$(const.r)$(const.n)$(const.r)$(const.n)",
        comment => "HTTP requests are terminated by the double
                    CR/LF sequence";

      "http_reply"

        handle => "http_client",
        comment => "Demonstrate a function that returns a string. 
                    Run 'GET / HTTP/1.0' and save the output into
                    the 'http_reply' variable.",
        string => readtcp("localhost",
                          "80",
                          "GET / HTTP/1.0$(2xCRLF)",
                          "500");

  classes:
      "http_ok"
        handle => "check_http_ok",
        comment => "Check that the Web server is returning HTTP 200 OK",
        expression => regcmp(".*200 OK.*\n.*","$(http_reply)");

      reports: http_ok:: "HTTP OK";
      reports: !http_ok:: "!!! ATTENTION!!!  Fix your web server!!";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0110-Z.cf}
```cfengine3, options: "linenos": true
# Example of
#
#     cfengine_word => builtin_function()
#


bundle agent main {

  classes:

      "cf_agent_is_present"

        expression => fileexists("/var/cfengine/bin/cf-agent");


  reports:

    cf_agent_is_present::

      "Found: /var/cfengine/bin/cf-agent";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0120-List\_Example\_B\_Var\_Slist\_Only.cf}
```cfengine3, options: "linenos": true
# Example of
#
#      cfengine_word => { list }    #  (directly and via variable)

bundle agent main {

  vars:

      "my_slist_0"

        handle => "declare_slist_var",
        comment => "Demonstrate a list on the RHS",
        slist  => {
                    "String contents...",
                    "... are beauutifuuul this time of year aasldfkj
askdfj
askfdsakdjfaskdfj ;asldkjf as;ldkf jas;dfj a;sdklfj as;df

asdlfkjas;fj as;dfj as;ldf jasfd j"
        };


      "my_slist_1"

        handle => "declare_another_slist_var",
        comment => "Demonstrate a list variable on the RHS",
        slist  => { @(my_slist_0), "apple", "orange", @(blah) };

}
```
\end{codelisting}

<!---
Filename: 400-020-CFEngine\_Grammar-0130-LHS\_vs\_RHS\_title\_card.md
-->

### LHS/RHS (Continued)



<!---
Filename: 400-020-CFEngine\_Grammar-0140-LHS\_vs\_RHS\_Promise\_attributes.md
-->

#### Promise attributes

CFEngine uses many "constraint expressions" as part of the body of a promise.  These are attributes of a promise, they detail and constrain the promise.

These take the form:

left-hand-side (cfengine word) #> right-hand-side (user defined data).

This can take several forms:

     cfengine_word #> user_defined_body or user_defined_body(parameters)

                      builtin_function()

                      "scalar_value" or "$(scalar_variable_name)"

                      { "list_element", "list_element2" }

                      { @(list_variable_name) }

In each of these cases, the right hand side is a user choice. 


\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0150-LHS\_vs\_RHS\_Example\_of\_user\_defined\_body\_on\_rhs.cf}
```cfengine3, options: "linenos": true
SKIP

(this material is dated)

# example of:     cfengine_word => user_defined_body

bundle agent main
{
  storage:

      "/"

        volume  => my_check_volume;

}


body volume my_check_volume
{
        freespace      => "30%";
        # minimum disk space that should be available

        sensible_size  => "100K";
        # Minimum size in bytes that should be used

        sensible_count => "10";
        # Minimum number of files/directories at top level
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0160-LHS\_vs\_RHS\_Example\_of\_user\_defined\_body\_on\_rhs\_WITH\_PARAMS.cf}
```cfengine3, options: "linenos": true
# example of:     cfengine_word => user_defined_body(param)

bundle agent main
{
      storage: "/" volume  => my_check_volume("30%", "100K");
      storage: "/var" volume  => my_check_volume("20%", "500K");
}



body volume my_check_volume(min_free_space,size)
{
        freespace      => "$(min_free_space)";
      # Min disk space that should be available

        sensible_size  => "$(size)";
      # Minimum size in bytes that should be used

        sensible_count => "10";
      # Minimum number of files/directories at top level
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0170-LHS\_vs\_RHS\_Example\_of\_builtin\_function\_on\_rhs.cf}
```cfengine3, options: "linenos": true
# Example of
#     cfengine_word => builtin_function()

bundle agent main {

  vars:

      "2xCRLF"
        string => "$(const.r)$(const.n)$(const.r)$(const.n)",
        comment => "HTTP requests are terminated by the double
                    CR/LF sequence";

      "http_reply"
        handle => "http_client",
        comment => "Demonstrate a function that returns a string.  Run
'GET / HTTP/1.0' and save the output into var http_reply.",
        string => readtcp("localhost",
                          "80",
                          "GET / HTTP/1.0$(2xCRLF)",
                          "500");


  reports:

      "The HTTP reply was:$(const.t)$(http_reply)"

        handle => "display_http_reply";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0180-LHS\_vs\_RHS\_Example\_of\_scalar\_on\_rhs.cf}
```cfengine3, options: "linenos": true
# Example of
#      cfengine_word => "quoted scalar"

bundle agent main {

  vars:

      "variable_0"
        handle => "declare_variable_0",
        comment => "RHS is a literal string",
        string  => "String contents...";  # a scalar value

      "variable_1"
        handle => "declare_variable_1",
        comment => "RHS uses a variable",
        string  => "$(variable_0)";       # a scalar variable
  reports:

      "
variable_0: $(variable_0)
variable_1: $(variable_1)
"
        handle => "display_var_values",
        comment => "Display values of both variables";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{400-020-CFEngine\_Grammar-0190-LHS\_vs\_RHS\_Example\_of\_list\_on\_rhs.cf}
```cfengine3, options: "linenos": true
# Example of
#
#      cfengine_word => { list }    #  (directly and via variable)

body common control {

        bundlesequence => { "example_1", "example_2" };

}

bundle agent example_2 {

  reports:



      "Second things second"
        handle => "identify_2nd_bundle",
        comment => "Identify 2nd bundle to demonstrate bundlesequence";
}

bundle agent example_1 {

  reports:



      "First things first"
        handle => "identify_1st_bundle",
        comment => "Identify 1st bundle to demonstrate bundlesequence";
}
```
\end{codelisting}

<!---
Filename: 420-000-Part-Title-0000-CFEngine\_Standard\_Library.md
-->

## CFEngine Standard Library



<!---
Filename: 420-060-COPBL-0000-Chapter-Title.md
-->

### CFEngine Standard Library



<!---
Filename: 420-060-COPBL-0460-Introduction.md
-->

CFEngine ships with a standard library of promise bodies and bundles dealing with common aspects of system administration.  

The CFEngine Standard Library is growing to include all common aspects of system administration. 


[header]
|##################========================================
| CFEngine version | Promise bodies | Promise  bundles
| *3.1.5*            | 88             | ?
| *3.2.1*            | 99             | 19  
| *3.3.5*            | 114            | 29
| *3.3.8*            | 113            | 26
| *3.4.4*            | 124            | 32
|##################========================================


\begin{codelisting}
\codecaption{420-060-COPBL-0470-Package\_add\_using\_COPBL.cf}
```cfengine3, options: "linenos": true
NEEDS TO BE UPDATED TO 3.7 SYNTAX

bundle agent main {

  packages:

      "php-mysql"

        handle => "install_package_php_mysql",
        comment => "Demonstrate installing a package",
        package_policy => "add",
        package_method => yum;
}

#############################################

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0480-File\_Exists\_And\_Is\_Mode\_612\_Without\_COPBL.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        handle  => "set_file_attributes",
        comment => "Demonstrate setting file attributes",
        create  => "true",
        perms   => mog("612","aleksey","cfengine");

}

############################################################

body perms mog(mode,owner,group)
{
        owners => { "$(owner)", "john", "brian" };
        mode   => "$(mode)";
        groups => { "$(group)" };
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0490-File\_exists\_and\_is\_mode\_6\_1\_2\_mog.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        handle => "set_file_attributes",
        comment => "/tmp/testfile must be mode 612 for application X
                          to work; it must be owned by user 'aleksey' and
                          group 'cfengine'",
        create  => "true",
        perms   => mog("612","aleksey","cfengine");

}

###########################################################

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0500-Context\_sensitive\_file\_editing\_Set\_robs\_password.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/shadow"
        handle => "context_sensitive_file_editing_demo",
        comment => "demonstrate context-sensitive file editing capability",
        edit_line => set_user_field("rob",
                                    "2",
                                    "$1$stIAaUZw$ptP75nVkz/EapeuvdWLNC0");
}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0510-Removing\_a\_file.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile.*"

        handle => "demo_removing_files",
        comment => "Demonstrate removing files using body delete tidy",
        delete => tidy;

      # shell equivalent:  rm -r /tmp/testfile*

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}

<!---
Filename: 420-060-COPBL-0520-Comment\_Out\_A\_File.exr.md
-->

Run the following command:

```bash
date  > /tmp/date.txt
```

Now write a CFEngine policy that will comment out (using #) the contents of that file.



\begin{codelisting}
\codecaption{420-060-COPBL-0530-Commenting\_out\_file\_contents.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/httpd/conf.d/maintenance.conf"

        handle    => "take_website_out_of_maintenance",
        comment   => "Disable maintenance-mode config block",
        edit_line => comment_out_everything;

}

bundle edit_line comment_out_everything {

  replace_patterns:

      "^([^#].*)"
        replace_with => comment("# ");
}

body replace_with comment(c)
{
        replace_value => "$(c) $(match.1)";
        occurrences => "all";
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0540-Z.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/httpd/conf.d/maintenance.conf"

        handle    => "put_website_into_maintenance",
        comment   => "Enable maintenance-mode config block",
        edit_line => uncomment_everything;

}

bundle edit_line uncomment_everything {

  replace_patterns:

      "^#(.*)"
        handle => "uncomment_everything_replace_pattern",
        comment => "If it starts with a hash mark, grab everything
                          after the hash mark, and uncomment it.",
        replace_with => uncomment;
}


body replace_with uncomment
{
        replace_value => "$(match.1)";
        occurrences => "all";
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0550-Removing\_a\_file\_Remove\_centos\_httpd\_welcome\_page.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/httpd/conf.d/welcome.conf"

        handle => "nuke_welcome_conf",
        comment => "Let's keep a low profile and not advertise
                          what software we are running - remove the
                          Welcome page that says we are running Apache
                          on CentOS",
        delete => tidy;
}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0560-Remove\_httpd\_welcome\_page\_by\_commenting\_out\_welcome\_conf.cf}
```cfengine3, options: "linenos": true
# welcome.conf is part of the Apache RPM
# to preserve package integrity, comment out this file's contents
# instead of deleting the file

bundle agent main {

  files:

      "/etc/httpd/conf.d/welcome.conf"

        handle => "comment_out_welcome_dot_conf",
        comment => "Let's not ask for trouble by advertising
                          what software we are running",
        edit_line => comment_out_everything,
        classes => if_repaired("reload_httpd");

  commands:
    reload_httpd::
      "/etc/init.d/httpd"
        handle => "cmd_reload_httpd",
        comment => "Reload httpd configuration",
        args => "reload";

}

bundle edit_line comment_out_everything {

  replace_patterns:

      "^([^#].*)"

        handle => "comment_out_everything_replace_patterns_promise",
        comment => "If it doesn't start with #, comment it out",
        replace_with => comment("#disabled-by-cfengine# ");

}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0590-classes\_if\_else.cf}
```cfengine3, options: "linenos": true
bundle agent main {


  files:

      "/tmp/etc/motd"
        handle => "touch_file",
        comment => "Demonstrate body classes if_else",
        create => "true",
        classes => if_else("file_exists","file_missing");

  reports:
    file_exists::
      "All OK"
        handle => "report_OK";

  reports:
    file_missing::
      "WARNING! Unable to create vital file!"
        handle => "report_WARN";

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0600-classes\_persistent.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:
      "/tmp/file.txt"
        handle => "persistent_class_demo",
        comment => "Set a persistent class",
        create => "true",
        classes  => state_repaired("file_fixed");

  reports:
    file_fixed::
      "Persistent class set.  Run in verbose mode to see TTL"
        handle => "report_success",
        comment => "Report if our persistent class persistent_class
                          has been set as expected.";
}

body classes state_repaired(x)
{
        promise_repaired => { "$(x)" };
        persist_time => "10";
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0610-comment\_lines\_matching.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:
      "/tmp/scratch"
        handle => "selective_commenting",
        comment => "Remove specific lines",
        edit_line => comment_lines_matching("hello world", "#");

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0620-contain\_silent.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  commands:

      "/bin/date"
        handle => "run_date_cmd",
        comment => "Demonstrate 'body contain silent'",
        contain => silent;


}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0630-edit\_line\_insert\_lines.cf}
```cfengine3, options: "linenos": true
!! SKIP !!

bundle agent main {

  files:
      "/etc/profile"
        handle => "edit_etc_profile",
        create => "true",
        edit_line => insert_lines("export ORGANIZATION=ACME");

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0640-edit\_resolv\_dot\_conf\_using\_COPBL.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "search_suffix"  string =>  "example.com example2.com";

      "nameservers"    slist  =>  { "8.8.4.4", "8.8.8.8" };

  files:

      "/tmp/resolv.conf"

        handle =>  "edit_resolv_conf",
        comment => "Setup up DNS resolver",
        edit_line =>  resolvconf("$(search_suffix)",
                                 "@(example.nameservers)" );
}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0660-insert\_lines.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/scratch"

        handle => "files_multi_line_insert",
        comment => "Insert multi-line content",
        create => "true",
        edit_line => insert_lines("
hello world
this is line 2
line 3 is great
line 4 is awesome
");
}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0680-set\_variable\_values.cf}
```cfengine3, options: "linenos": true
bundle common global {

  vars:

      "stuff[location]"     string => "Bloomington";
      "stuff[time]"         string => "May-2013";
      "stuff[students]"     string => "11";
      "stuff[lab]"          string => "true";
}

bundle agent main {

  files:

      "/etc/example.conf"
        handle => "populate_config_file_from_array",
        comment => "Demonstrate 'bundle edit_line set_variable_values'",
        create => "true",
        edit_line => set_variable_values("global.stuff");
}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0690-standard\_services.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  methods:

    any::

      "Manage www service"

        usebundle => standard_services ("www", "stop");

}

bundle agent standard_services(service,state)
{

      # DATA

  vars:

    any::

      "stakeholders[www]" slist => { "www_in", "wwws_in", "www_alt_in" };


    SuSE|suse|debian::

      "startcommand[www]" string => "/etc/init.d/apache2 start";
      "stopcommand[www]"  string => "/etc/init.d/apache2 stop";
      "pattern[www]"      string => ".*apache2.*";


    redhat::

      "startcommand[www]" string => "/etc/init.d/httpd start";
      "stopcommand[www]"  string => "/etc/init.d/httpd stop";
      "pattern[www]"      string => ".*httpd.*";


      # Implementation details (to implement the DATA above)

  classes:

      "start" expression => strcmp("start","$(state)"),
        comment => "Check if to start a service";
      "stop"  expression => strcmp("stop","$(state)"),
        comment => "Check if to stop a service";


  processes:

    start::

      "$(pattern[$(service)])" ->  { "@(stakeholders[$(service)])" } ,

        comment => "Verify service appears in process table",
        restart_class => "restart_$(service)";

    stop::

      "$(pattern[$(service)])" -> { "@(stakeholders[$(service)])" },

        comment => "Verify service does not appear in process table",
        process_stop => "$(stopcommand[$(service)])",
        signals => { "term", "kill"};

  commands:

      "$(startcommand[$(service)])" -> { "@(stakeholders[$(service)])" },

        comment => "Execute command to restart service '$(service)'",
        ifvarclass => "restart_$(service)";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{420-060-COPBL-0700-modified\_set\_variable\_values.cf}
```cfengine3, options: "linenos": true
# this file contains a modified set_variable_values bundle.
# the main difference is you won't get lines like
# "name =value2" if you start with "name = value1".
# Instead you get lines like "name=value2".

bundle common global {

  vars:

      "stuff[Location]" string => "Chicago";
      "stuff[Time]"     string => "Monday, April 2nd";
}



bundle agent main {

  files:

      "/tmp/example"
        create => "true",
        edit_line => set_variable_values("global.stuff");
}


bundle edit_line set_variable_values(v)

{
  vars:

      "index" slist => getindices("$(v)");

  field_edits:

      # match a line starting like the key *BLANK SPACE* = something

      "\s*$(index)\s+=.*"

        edit_field => col("=","1","$(index)","set"),
        comment => "Edit name=value definition, if there is
                          whitespace after the name to eliminate
                          said whitespace otherwise our insert_lines
                          promise would create a duplicate name=value
                          entry WITHOUT whitespace.";

      # match a line starting like the key = something

      "\s*$(index)=.*"

        edit_field => col("=","2","$($(v)[$(index)])","set"),
        comment => "Edit name=value definition to set the value.
                          Incidentally, this gets rid of any whitespace
                          after the equals sign.";

  insert_lines:

      "$(index)=$($(v)[$(index)])",

        comment => "Insert name=value definition";
}

body edit_field col(split,col,newval,method)
{
        field_separator    => "$(split)";
        select_field       => "$(col)";
        value_separator    => ",";
        field_value        => "$(newval)";
        field_operation    => "$(method)";
        extend_fields      => "true";
        allow_blank_fields => "true";
}

body replace_with value(x)
{
        replace_value => "$(x)";
        occurrences => "all";
}

```
\end{codelisting}

<!---
Filename: 430-000-Part-Title-0000\_Copying\_Files.md
-->

## Copying Files



<!---
Filename: 430-100-File\_Copying-1060-Chapter-Title.md
-->

### File Copying


\begin{codelisting}
\codecaption{430-100-File\_Copying-1070-Local\_copy\_a\_single\_file.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


########################################


bundle agent main {


  files:

      "/etc/motd"

        copy_from    => local_cp("/var/cfengine/inputs/templates/motd.txt");

}
```
\end{codelisting}

<!---
Filename: 430-100-File\_Copying-1080-exercise.exr.md
-->

* Copy /var/cfengine/share/CoreBase/*cf to /var/cfengine/inputs

* Create /root/passwd.bak as a backup (copy) of /etc/passwd



\begin{codelisting}
\codecaption{430-100-File\_Copying-1090-Local\_copy\_a\_directory.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


########################################


bundle agent main
{

  vars:

      # A standard location for the source point
      "master_location" string => "/var/cfengine/masterfiles";

  files:

      "/var/cfengine/inputs/."

        comment      => "Update the policy files from the master",
        copy_from    => local_cp("$(master_location)"),
        depth_search => recurse("inf");

      #   /var/cfengine/masterfiles -----

}
```
\end{codelisting}

<!---
Filename: 430-100-File\_Copying-1100-Exercise.exr.md
-->

#### Use CFEngine to make '/tmp/mirror' contain a copy of '/usr/local/sbin'

1.  Use CFEngine to make '/tmp/mirror' contain a copy of '/usr/local/sbin'
(Hint: use a files promise with a copy\_from attribute.)

2. Now create a new file in '/usr/local/sbin' and confirm CFEngine will copy it over.

3. Work out how to mirror file removals.  (When a file is removed in '/usr/local/sbin', it should disappear in '/tmp/mirror'.)


\begin{codelisting}
\codecaption{430-100-File\_Copying-1110-Remote\_copy.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "remote_path" string => "/var/cfengine/masterfiles";
      "remote_server" string => "205.186.156.208";

  files:

      "/var/cfengine/inputs"

        handle => "update_inputs_dir",
        comment => "Pull down latest policy set",
        perms => u_p("600"),
        copy_from => u_remote_cp("$(remote_path)","$(remote_server)"),
        depth_search => u_recurse("inf"),
        action => u_immediate;
}

body perms u_p(p)
{
        mode  => "$(p)";
}

body copy_from u_remote_cp(from,server)
{
        servers     => { "$(server)" };
        source      => "$(from)";
        compare     => "mtime";
        trustkey    => "true";  # trust the server's public key
}

body depth_search u_recurse(d)
{
        depth => "$(d)";
        xdev  => "true";
}

body action u_immediate
{
        ifelapsed => "0";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{430-100-File\_Copying-1120-Remote\_copy\_with\_round\_robin.cf}
```cfengine3, options: "linenos": true
# use two remote servers, and round-robin between them

bundle agent main
{

  classes:
      "heads"
        handle => "flip_a_coin_class",
        comment => "Generate a class with a 50% probability",
        expression => isgreaterthan(randomint(1,100), 50);


  files:
      "/tmp/test1copy"
        copy_from => round_robin_cp("/var/cfengine/masterfiles/testfile1",
                                    "10.1.1.10",
                                    "10.1.1.12");
}


body copy_from round_robin_cp(from,server1, server2)
{
        source => "$(from)";

    heads::
        servers => { "$(server1)", "$(server2)" };

    !heads::
        servers => { "$(server2)", "$(server1)" };

}
```
\end{codelisting}

<!---
Filename: 430-100-File\_Copying-1130-Notes\_for\_setting\_up\_client\_server.md
-->

!! SKIP !! 



<!---
Filename: 440-000-Part-Title-0000-Patterns.md
-->

## Patterns

Patterns are a way of compressing information.

The CFEngine 3 language is made of promises and patterns; it’s about using patterns to create concise but powerful promises.




<!---
Filename: 440-070-Patterns-0000-Chapter-Title.md
-->

### Patterns + Promises = Configuration



<!---
Filename: 440-070-Patterns-0700-Lists.md
-->

### Lists

An example of a pattern in CFEngine is a list.  You can have a list of things you want, or do not want: for example, a list of packages that should be installed, or processes that should NOT be running.

Implicit looping creates multiple promises that follow the promise pattern.


\begin{codelisting}
\codecaption{440-070-Patterns-0710-Lists\_Implicit\_looping\_over\_a\_list\_of\_packages.cf}
```cfengine3, options: "linenos": true
bundle agent main {

      ######################################################
      # This is the data section, which describes the desired pattern
      #
      # All you do is add to or edit the list...
      #
      # This is *data-driven* configuration.
      ######################################################
  vars:

      "desired_package"

        handle => "good_packages",
        comment => "list the packages we want",
        slist => {
                   "httpd",
                   "php",
                   "php-mysql",
                   "mysql-server",
        };


      "unwanted_package"

        handle => "bad_packages",
        comment => "list the packages we do not want",
        slist => {
                   "java",
                   "ruby",
        };

      ######################################################
      # Below here is stock convergent code, forget this...
      ######################################################

  packages:
      "$(desired_package)"
        handle => "add_package",
        comment => "Ensure package is present",
        package_policy => "add",
        package_architectures => { "x86_64" },
        package_method => yum;


  packages:
      "$(unwanted_package)"
        handle => "remove_package",
        comment => "Ensure package is absent",
        package_policy => "delete",
        package_architectures => { "x86_64" },
        package_method => yum;

}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0720-Lists\_Implicit\_looping\_over\_a\_list\_of\_files.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  vars:

      "list_of_files"
        handle => "file_list",
        comment => "Just a file list",
        slist => {
                   "/etc/passwd",
                   "/etc/group",
        };

  files:

      "$(list_of_files)"

        handle => "set_mode_and_ownership",
        comment => "Ensure a list of files is owned by root
and mode 644",
        perms => mo("644","root");
}
```
\end{codelisting}

<!---
Filename: 440-070-Patterns-0730-Regular\_expressions.md
-->

### Regular Expressions

Regular Expressions is another way of writing patterns.

CFEngine supports POSIX and PCRE regular expressions.  (PCRE by default.)



\begin{codelisting}
\codecaption{440-070-Patterns-0740-Regular\_expressions\_Files.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/pass.*"

        handle => "set_file_perms_on_regex_list_of_files",
        comment => "Files matching /etc/pass.* need to be owned
                          by root and mode 644",
        perms => mo("644","root");

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}

<!---
Filename: 440-070-Patterns-0750-Body\_templates.md
-->

### External Body Parts

> A pattern is just a repeated structure. The benefit of seeing patterns is economy: if you can see a pattern, you can take out the commonality, abstract it, and talk about the pattern instead of all the individual cases. This is a Knowledge Management step.
>
> --- cfengine.org

External body parts are intended to aid in such abstraction.



<!---
Filename: 440-070-Patterns-0760-Classes.md
-->

### Classes
This chapter discusses Classes.


\begin{codelisting}
\codecaption{440-070-Patterns-0770-Classes\_using\_classes\_to\_link\_promises\_BONUS\_logme.cf}
```cfengine3, options: "linenos": true
# Demonstrate using classes to link promises
# also demonstrates action logme

bundle agent main {

  files:
      "/etc/ssh/sshd_config"
        handle => "sshd_must_use_protocol_2_only",
        comment => "Make sure SSHD does not use protocol v1;
                          make sure it only uses protocol v2,
                          to increase security",
        edit_line => permit_protocol_2_only,
        classes => if_repaired("sshd_config_file_was_repaired"),
        action => logme("promise $(this.handle)");

  commands:
    sshd_config_file_was_repaired::
      "/etc/init.d/sshd reload"
        handle => "reload_sshd",
        comment => "run sshd init script to reload sshd
                          to pick up new config",
        action => logme("promise $(this.handle)");

}


body action logme(x)
{
        log_string => "$(sys.date) $(x)";

        log_kept => "/var/log/cfengine_keptlog.log";
        log_repaired => "/var/log/cfengine_replog.log";
        log_failed => "/var/log/cfengine_faillog.log";

}



bundle edit_line permit_protocol_2_only {
      delete_lines: ".*Protocol.*1.*";
      insert_lines: "Protocol 2";
}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0780-Classes\_ORing\_of\_classes\_and\_fileexists.cf}
```cfengine3, options: "linenos": true
bundle agent main
{

  classes:

      # List form of class expression useful for including functions

      "my_new_class"

        handle => "or_list",
        comment => "Demonstrate list form of class expression
                          useful for including functions",
        or   => { "linux",
                  "solaris",
                  fileexists("/etc/fstab")
        };


  reports:

    my_new_class::

      # This will only report Boo! on linux, solaris, or any system
      # on which the file /etc/fstab exists

      "Boo!";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0790-Classes\_Set\_a\_private\_class\_based\_on\_hard\_classes\_expression.cf}
```cfengine3, options: "linenos": true
bundle agent main {


  classes:

      "good_technology"
        handle => "good_technology_class",
        comment => "Set a custom class based on built-in classes",
        expression => "linux|solaris";

  reports:
    good_technology::
      "I love good technology"
        handle => "show_respect",
        comment => "Show respect for good technology";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0800-Classes\_Set\_a\_custom\_class\_based\_on\_function\_result.cf}
```cfengine3, options: "linenos": true
# - demonstrate setting a custom class using a function

bundle agent main {

  classes:
      "islink"
        handle => "class_islink",
        comment => "Test if /tmp/a is a symbolic link",
        expression => islink("/tmp/a");


  reports:
    islink::
      "/tmp/a is a link";

    !islink::
      "/tmp/a is not a link";
}
```
\end{codelisting}

<!---
Filename: 440-070-Patterns-0810-Classes\_Default\_classes\_cf\_monitord.md
-->

#### Example of classes provided by cf-monitord

If you are running cf-monitord, you may also see entropy and anomaly detection classes:

#### entropy

```text
entropy_cfengine_in_low
entropy_cfengine_out_low
entropy_dns_in_low
entropy_dns_out_low
entropy_ftp_in_low
entropy_ftp_out_low
entropy_icmp_in_low
entropy_icmp_out_low
entropy_irc_in_low
entropy_irc_out_low
entropy_misc_in_low
entropy_misc_out_low
entropy_netbiosdgm_in_low
entropy_netbiosdgm_out_low
entropy_netbiosns_in_low
entropy_netbiosns_out_low
entropy_netbiosssn_in_low
entropy_netbiosssn_out_low
entropy_nfsd_in_low
entropy_nfsd_out_low
entropy_smtp_in_low
entropy_smtp_out_low
entropy_tcpack_in_low
entropy_tcpack_out_low
entropy_tcpfin_in_low
entropy_tcpfin_out_low
entropy_tcpsyn_in_low
entropy_tcpsyn_out_low
entropy_udp_in_low
entropy_udp_out_low
entropy_www_in_low
entropy_www_out_low
entropy_wwws_in_low
entropy_wwws_out_low
```

A low entropy value means that most of the events came from only a few (or one) IP addresses. A high entropy value implies that the events were spread over many IP sources.


#### Anomaly Detection Example Classes:

`loadavg_high_ldt` - load average higher than usual (based on Leap-Detection Test)

`messages_high_dev1` - the current value of the metric is more than 1 standard deviation above the average.

etc.

Reference: http://www.iu.hio.no/cfengine/docs/cfengine-Anomalies.pdf


\begin{codelisting}
\codecaption{440-070-Patterns-0820-Classes\_Report\_type\_of\_weekday\_Uses\_a\_custom\_class.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  classes:
      "weekday"
        expression => "Monday|Tuesday|Wednesday|Thursday|Friday";


      "weekend"
        expression => "Saturday|Sunday";

  reports:
    weekday::
      "Today is a weekday.";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0830-Classes\_Report\_type\_of\_weekday\_Uses\_ifvarclass.cf}
```cfengine3, options: "linenos": true
# report "Hello world!  I love weekends!" on Saturday or Sunday,
# report "Hello world!  I love Mondays|Tuesdays|...|Fridays on a weekday

bundle agent main {

  vars:
      "days"
        handle => "days",
        comment => "Build a list of days to report day of the week",
        slist => { "Monday",
                   "Tuesday",
                   "Wednesday",
                   "Thursday",
                   "Friday",
                   "Saturday",
                   "Sunday",
        };


  reports:
      "Hello world!  I love $(days)s!"
        comment => "Report day of the week",
        ifvarclass => "$(days)";


}
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0840-Classes\_GOTCHA.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  commands:


    linux&Hr08::

      "/bin/echo Linux system AND we are in the 8th hour.";

      "/bin/echo hello world";   # this promise is NOT in the class "any" !!!

}
```
\end{codelisting}

<!---
Filename: 440-070-Patterns-0850-Classes.exr.md
-->

* Set a custom class if the file '/tmp/testme' exists.

* Report the presence or absense of the file using "reports" type promises and the class defined in #1 above.

* Have a "files" type promise create the file '/tmp/testme'.

* Now, remove '/tmp/testme' and run your policy and observe and explain what happens.



<!---
Filename: 440-070-Patterns-0860-Classes\_Scope.md
-->

#### Note: Classes have Scope


\begin{codelisting}
\codecaption{440-070-Patterns-0870-Classes\_Scope.cf}
```cfengine3, options: "linenos": true
bundle agent example_1 {

  classes:
      "its_monday"
        expression => "Monday";

  classes:
      "its_wed"
        expression => "Wednesday";
  classes:
      "its_thur"
        expression => "Thursday";
}


bundle agent example_2 {

  reports:
    its_monday::
      "Yay!  I love Mondays!";

  reports:
    its_wed::
      "Yay!  I love Wednesdays!";

  reports:
    its_thur::
      "Yay!  I love Thursdays!";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0880-Classes\_Classes\_defined\_in\_common\_bundles\_have\_global\_scope.cf}
```cfengine3, options: "linenos": true
bundle common global_definitions {

  classes:
      "myclass"
        expression => "any";

}


bundle agent main {

  reports:
    myclass::
      "Yay!  myclass is set";

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0890-Classes\_if\_repaired\_creates\_global\_classes.cf}
```cfengine3, options: "linenos": true
bundle agent example_1 {

  files:
      "/tmp/motd"
        create => "true",
        classes => if_repaired("its_wed");

}


bundle agent example_2 {

  reports:
    its_wed::
      "Yay!  I love Wednesdays!";

}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0900-Classes\_Global\_vs\_local\_classes.cf}
```cfengine3, options: "linenos": true
# Classes defined in common bundles are global.
#
# They appear in the Defined Classes section at the start of
# verbose output.
#
# Classes defined in all other bundles are local

bundle common global_classes {

  classes:

      "webserver"

        expression  =>  classmatch("web[0-9]+");

}



bundle agent main {
  methods:
      "any" usebundle => example_1;
      "any" usebundle => example_2;
}

bundle agent example_1
{

  classes:
      "local_class"
        expression  =>  classmatch("web[0-9]+");

  reports:
    webserver::
      "bundle 'example_1': I am a Web server (global class)";

  reports:
    local_class::
      "bundle 'example_1': I am a Web server (local class)";

}


bundle agent example_2
{

  reports:
    webserver::
      "bundle 'example_2': I am a Web server (global class)";

  reports:
    local_class::
      "bundle 'example_2': I am a Web server (local class)";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-070-Patterns-0910-Classes\_Global\_vs\_local\_classes\_local\_demo.cf}
```cfengine3, options: "linenos": true
body common control {

        bundlesequence => { "example_1", "example2" };

}



bundle agent global_classes {

      # Classes defined in common bundles are global.
      #
      # They appear in the Defined Classes section at the start of
      # verbose output.
      #
      # Classes defined in all other bundles are local


  classes:

      "webserver"

        expression  =>  classmatch("web[0-9]+");

}




bundle agent example_1
{

  classes:

      "webserver"

        expression  =>  classmatch("web[0-9]+");


  reports:

    webserver::

      "I am a Web server - 1";

}


bundle agent example_2
{

  reports:

    webserver::

      "I am a Web server - 2";

}

```
\end{codelisting}

<!---
Filename: 440-080-Methods-0000-Chapter-Title.md
-->

### Methods



<!---
Filename: 440-080-Methods-0010-A\_special\_promise\_type.md
-->

There is a special promise type in CFEngine 3 called "methods" that promises to call another promise bundle.  

```cfengine3
 methods:

        "any"

           usebundle => bundle_name;
```


The promiser can be any word, right now it does not matter; the promiser is reserved for future development.

Parameters are optional:

```cfengine3
 methods:

        "any"

           usebundle => bundle_name("arg1", "arg2");
```


\begin{codelisting}
\codecaption{440-080-Methods-0020-Simple\_example.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "userlist" slist => { "alex", "ben", "charlie", "diana", "rob" };


  methods:

      "any" usebundle => remove_user("$(userlist)");

}

###########################################

bundle agent remove_user(user) {

  commands:

      "/usr/sbin/userdel $(user)"
        contain => silent;

}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{440-080-Methods-0030-Lock\_an\_account.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  vars:

      "badusers" slist => {
                            "alex",
                            "ben",
                            "charlie",
                            "diana",
                            "joe"
      };

      #####################################################

  methods:

      "any" usebundle => lock_user(@(badusers));

}

###########################################

bundle agent lock_user(user) {

  files:
      "/etc/shadow"

        edit_line => set_user_field("$(user)",2,"!LOCKED");

  files:

      "/etc/passwd"

        edit_line => set_user_field("$(user)",7,"/bin/false");

  files:

      "/etc/sudoers"

        edit_line => delete_lines_matching("^$(user)");

}
```
\end{codelisting}

<!---
Filename: 440-080-Methods-0040-Encapsulation.md
-->

#### Methods provide encapsulation of multiple issues

Methods offer powerful ways to encapsulate multiple issues pertaining to a set of parameters. 

For example:

#### Removing a user:
* userdel
* sudoers
* mail spool


\begin{codelisting}
\codecaption{440-080-Methods-1010-Abstraction\_using\_methods.cf}
```cfengine3, options: "linenos": true
# Make sure /etc/group contains a "cfengine" group

bundle agent main {

  methods:

      "any"

        handle => "group_exists",
        comment => "make sure the specified group is always present",
        usebundle => groupadd("cfengine");

}


#####################################################################


bundle agent groupadd(groupname) {


  commands:
      linux:: "/usr/sbin/groupadd" args => "$(groupname)";
      aix::   "/sbin/addgroup"     args => "$(groupname)";
      hpux::  "/usr/sbin/addgroup" args => "$(groupname)";

}
```
\end{codelisting}

<!---
Filename: 440-080-Methods-1020-Methods.exr.md
-->

Practice using "methods" type promises

* Write a policy that has two bundles.

  * The first bundle does something visible (such as a reports type promise that says "bundle1") AND calls the second bundle.

  * The second bundle reports "bundle2".

What output will you see and in what order?  Why?  Now run your policy and check.



<!---
Filename: 440-080-Methods-1920-Methods.exr.md
-->

Now parameterize the 2nd bundle -- have the first bundle feed it an argument, and have the 2nd bundle display that argument.



<!---
Filename: 440-080-Methods-1930-Methods.exr.md
-->

Sysadmin Problem:

'/etc/profile' should set the ORGANIZATION environment variable when users log in:

```bash
export ORGANIZATION=MyOrg
```

Policy Writing Exercise:

Write a bundle "etc_profile_contains" that would take an argument and ensure '/etc/profile' contains the text string specified in the argument.

Demonstrate its use by calling it from another bundle:

```cfengine3
    bundle agent example {
       methods:
         "any"
             usebundle => etc_profile_contains("export ORGANIZATION=MyOrg");
    }
```



<!---
Filename: 440-080-Methods-1940-Methods.exr.md
-->

Make a bundle called file_contains that takes two arguments: a filename, and a text string.  The bundle should ensure that the file specified in the first argument contains the text string specified in the second argument.

Example:

```cfengine3
    methods:
     "any" usebundle => file_contains("/etc/profile", "export ORGANIZATION=MyOrg");
     "any" usebundle => file_contains("/etc/motd", "Unauth. use forbidden");
```



<!---
Filename: 440-080-Methods-1950-Methods.exr.md
-->

Configuring a web server.

Write a bundle "webserver" that will ensure an Apache httpd package is installed and process is running if its argument is "on":

```cfengine3
     methods:

        "any"

             usebundle => webserver("on");
```

Then, make sure httpd is not running if its argument is "off".

TIP: The CFEngine function strcmp() can compare two strings.

NOTE: Reference: 039-0085_Basic_Examples:_Classes_and_Reports.__soft-class.cf



<!---
Filename: 500-000-Part-Title-0000-Functions\_and\_Special\_Variables.md
-->

## Functions and Special Variables



<!---
Filename: 500-010-Functions-0000-Chapter-Title.md
-->

### CFEngine Functions


\begin{codelisting}
\codecaption{500-010-Functions-0910-putting\_command\_output\_into\_variable.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "my_result"
        string => execresult("/bin/ls /tmp", "noshell");

  reports:

      "Variable is $(my_result)";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{500-010-Functions-0920-function\_countlinesmatching.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "no" int => countlinesmatching("^cfengine:.*","/etc/group");

  commands:
      "/bin/echo"
        args => "Found $(no) lines matching";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{500-010-Functions-0930-functions\_canonify.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "canonified_text"

        string  => canonify("hello!@#$%world");

  reports:



      "$(canonified_text)";

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{500-010-Functions-0940-get\_info\_from\_env\_variable.cf}
```cfengine3, options: "linenos": true
bundle agent main
{
  vars:

      "myvar" string => getenv("USER","20");


  classes:

      "isdefined" not => strcmp("$(myvar)","");

  reports:
    isdefined::
      "I am running as user $(myvar)";

}
```
\end{codelisting}

<!---
Filename: 510-050-Special\_Variables-0000-Chapter-Title.md
-->

### CFEngine Special Variables



<!---
Filename: 510-050-Special\_Variables-0290-Introduction.md
-->

#### Introduction

CFEngine has some special variables.

You can see the whole list in section "Special Variables" in the reference manual, but here is a taste of them.



<!---
Filename: 510-050-Special\_Variables-0300-title\_card.md
-->

#### Constants


\begin{codelisting}
\codecaption{510-050-Special\_Variables-0310-Const.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  reports:

      "A carriage return character is $(const.r)The carriage has returned.";

      "A report with a$(const.t)tab in it";

      "Value of variable named $(const.dollar)(const.dollar)
       is $(const.dollar)";

      "The value of variable named \$(const.dollar) is $(const.dollar)";
      # backslash does not work to stop interpolation of the variable

      "A newline with either $(const.n) or with $(const.endl) is ok";
      "But a string with \n in it does not have a newline!";
}
```
\end{codelisting}

<!---
Filename: 510-050-Special\_Variables-0320-Edit.md
-->

#### Edit

Special variables with scope "edit" allow you to access information about editing promises during their execution.



#### edit.filename
edit.filename
: Points to the filename of the file currently making an edit promise.



\begin{codelisting}
\codecaption{510-050-Special\_Variables-0330-Edit.cf}
```cfengine3, options: "linenos": true
# INPUT
# Put a few text files in /tmp (ending in .txt), and put
# the line "hello world" in one of them.
#
# CFEngine will report which file contains the line "hello world".
#

########################################################

bundle agent main

{
  files:

      "/tmp/.*.txt"
        handle => "cfengine_grep_dash_l",
        comment => "Return files matching given string",
        edit_line => grep_dash_l("hello world");
}

########################################################



bundle edit_line grep_dash_l(regex)
{
  classes:

      "ok" expression => regline("$(regex)","$(edit.filename)");

  reports:

    ok::

      "File $(edit.filename) has a line with \"$(regex)\" in it";

}
```
\end{codelisting}

<!---
Filename: 510-050-Special\_Variables-0340-Match.md
-->

#### Match


\begin{codelisting}
\codecaption{510-050-Special\_Variables-0350-Match\_While\_searching\_for\_files.cf}
```cfengine3, options: "linenos": true
# Create the following files before running this example:
# /tmp/cf2_test1
# /tmp/cf3_test2

bundle agent main
{

  files:

      "/tmp/(cf[23])_(.*)"
        edit_line => show_match("$(match.0) $(match.1) $(match.2)");

}

bundle edit_line show_match(data) {

  reports:


      "$(data)";

      # OUTPUT
      # You should see:
      # R: /tmp/cf2_test1 cf2 test1
      # R: /tmp/cf3_test2 cf3 test2

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0360-Match\_While\_editing\_a\_file.cf}
```cfengine3, options: "linenos": true
#   INPUT
#
#   File /tmp/cf3_test containing a Unix shell style comment:
#
#   one
#   two
#   three
#   # four
#   five
#   six


########################################################

bundle agent main

{

  files:

      "/tmp/cf3_test"

        create    => "true",
        edit_line => replace_shell_comments_with_C_comments;
}

########################################################

bundle edit_line replace_shell_comments_with_C_comments
{

  replace_patterns:

      "#(.*)"

        replace_with => C_comment;

}


########################################################

body replace_with C_comment

{
        replace_value => "/* $(match.1) */"; # backreference 0
        occurrences => "all";  # first, last all
}

########################################################
#
#   OUTPUT
#
#   File /tmp/cf3_test should now have a C style comment:
#
#   one
#   two
#   three
#   /*  four */
#   five
#   six
```
\end{codelisting}

<!---
Filename: 510-050-Special\_Variables-0370-Monitoring.md
-->

#### Monitoring


\begin{codelisting}
\codecaption{510-050-Special\_Variables-0380-Mon\_Report\_environmental\_conditions.cf}
```cfengine3, options: "linenos": true
# report environmental conditions
# Current value: value_<name>       e.g. value_diskfree
# Average: av_<name>                e.g. av_diskfree
# Standard Deviation: dev_<name>    e.g. dev_diskfree

bundle agent main {

  reports:

      "
Metric     Current Value
cfengine_in    ${mon.value_cfengine_in}
cfengine_out   ${mon.value_cfengine_out}
cpu            ${mon.value_cpu}
cpu0           ${mon.value_cpu0}
cpu1           ${mon.value_cpu1}
cpu2           ${mon.value_cpu2}
cpu3           ${mon.value_cpu3}
diskfree       ${mon.value_diskfree}
dns_in         ${mon.value_dns_in}
dns_out        ${mon.value_dns_out}
ftp_in         ${mon.value_ftp_in}
ftp_out        ${mon.value_ftp_out}
icmp_in        ${mon.value_icmp_in}
icmp_out       ${mon.value_icmp_out}
irc_in         ${mon.value_irc_in}
irc_out        ${mon.value_irc_out}
loadavg        ${mon.value_loadavg}
messages       ${mon.value_messages}
netbiosdgm_in  ${mon.value_netbiosdgm_in}
netbiosdgm_out ${mon.value_netbiosdgm_out}
netbiosns_in   ${mon.value_netbiosns_in}
netbiosns_out  ${mon.value_netbiosns_out}
netbiosssn_in  ${mon.value_netbiosssn_in}
netbiosssn_out ${mon.value_netbiosssn_out}
nfsd_in        ${mon.value_nfsd_in}
nfsd_out       ${mon.value_nfsd_out}
otherprocs     ${mon.value_otherprocs}
rootprocs      ${mon.value_rootprocs}
smtp_in        ${mon.value_smtp_in}
smtp_out       ${mon.value_smtp_out}
ssh_in         $(mon.value_ssh_in)
ssh_out        ${mon.value_ssh_out}
syslog         ${mon.value_syslog}
tcpack_in      ${mon.value_tcpack_in}
tcpack_out     ${mon.value_tcpack_out}
tcpfin_in      ${mon.value_tcpfin_in}
tcpfin_out     ${mon.value_tcpfin_out}
tcpmisc_in     ${mon.value_tcpmisc_in}
tcpmisc_out    ${mon.value_tcpmisc_out}
tcpsyn_in      ${mon.value_tcpsyn_in}
tcpsyn_out     ${mon.value_tcpsyn_out}
temp0          ${mon.value_temp0}
temp1          ${mon.value_temp1}
temp2          ${mon.value_temp2}
temp3          ${mon.value_temp3}
udp_in         ${mon.value_udp_in}
udp_out        ${mon.value_udp_out}
users          ${mon.value_users}
webaccess      ${mon.value_webaccess}
weberrors      ${mon.value_weberrors}
www_in         ${mon.value_www_in}
www_out        ${mon.value_www_out}
wwws_in        ${mon.value_wwws_in}
wwws_out       ${mon.value_wwws_out}
";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0390-Mon\_React\_to\_environmental\_conditions.cf}
```cfengine3, options: "linenos": true
# report environmental conditions

bundle agent main {

  reports:

      "Percent CPU utilization         ${mon.value_cpu}";
      "Percent CPU0 utilization         ${mon.value_cpu0}";
      "Percent CPU1 utilization         ${mon.value_cpu1}";

  classes:
      "CPUoverload"
        expression =>  isgreaterthan("$(mon.value_cpu)","80");

  reports:
    CPUoverload::
      "CPU utilization is over threshold!!!";

}
```
\end{codelisting}

<!---
Filename: 510-050-Special\_Variables-0400-Sys\_Report\_sys\_variables.md
-->

OUTPUT on my system, myhost.example.com

```text
R: sys.arch: x86_64
sys.cdate: Sun_May_15_11_25_03_2011
sys.cf_agent: "/var/cfengine/bin/cf-agent"
sys.cf_execd: "/var/cfengine/bin/cf-execd"
sys.cf_hub: "/var/cfengine/bin/cf-hub"
sys.cf_key: "/var/cfengine/bin/cf-key"
sys.cf_know: "/var/cfengine/bin/cf-know"
sys.cf_monitord: "/var/cfengine/bin/cf-monitord"
sys.cf_promises: "/var/cfengine/bin/cf-promises"
sys.cf_report: "/var/cfengine/bin/cf-report"
sys.cf_runagent: "/var/cfengine/bin/cf-runagent"
sys.cf_serverd: "/var/cfengine/bin/cf-serverd"
sys.cf_twin: "/var/cfengine/bin/cf-agent"
sys.cf_version: 3.1.5
sys.class: linux
sys.date: Sun May 15 11:25:03 2011
sys.domain: example.com
sys.expires:
sys.exports: /etc/exports
sys.fqhost: myhost.example.com
sys.fstab: /etc/fstab
sys.host: myhost.example.com
sys.interface: venet0
sys.ipv4: 127.0.0.1
sys.ipv4[interface_name]: $(sys.ipv4[interface_name])
sys.ipv4_1[interface_name]: $(sys.ipv4_1[interface_name])
sys.ipv4_2[interface_name]: $(sys.ipv4_2[interface_name])
sys.ipv4_3[interface_name]: $(sys.ipv4_3[interface_name])
sys.key_digest: MD5=c4348f13c55363743ba5544a7808dff5
sys.license_owner: $(sys.license_owner)
sys.licenses_granted: $(sys.licenses_granted)
sys.licenses_installtime: $(sys.licenses_installtime)
sys.long_arch:
  linux_x86_64_2_6_18_028stab070_4__1_SMP_Tue_Aug_17_18_32_47_MSD_2010
sys.maildir: /var/spool/mail
sys.nova_version: $(sys.nova_version)
sys.os: linux
sys.ostype: linux_x86_64
sys.policy_hub: $(sys.policy_hub)
sys.release: 2.6.18-028stab070.4
sys.resolv: /etc/resolv.conf
sys.uqhost: myhost
sys.version: #1 SMP Tue Aug 17 18:32:47 MSD 2010
sys.windir: /dev/null
sys.winprogdir: /dev/null
sys.winprogdir86: /dev/null
sys.winsysdir: /dev/null
sys.workdir: /var/cfengine
```



<!---
Filename: 510-050-Special\_Variables-0401-system\_variables\_output.md
-->

Output on my system `myhost.example.com`:

```text
   R: sys.arch: x86_64
   sys.cdate: Sun_May_15_11_25_03_2011
   sys.cf_agent: "/var/cfengine/bin/cf-agent"
   sys.cf_execd: "/var/cfengine/bin/cf-execd"
   sys.cf_hub: "/var/cfengine/bin/cf-hub"
   sys.cf_key: "/var/cfengine/bin/cf-key"
   sys.cf_know: "/var/cfengine/bin/cf-know"
   sys.cf_monitord: "/var/cfengine/bin/cf-monitord"
   sys.cf_promises: "/var/cfengine/bin/cf-promises"
   sys.cf_report: "/var/cfengine/bin/cf-report"
   sys.cf_runagent: "/var/cfengine/bin/cf-runagent"
   sys.cf_serverd: "/var/cfengine/bin/cf-serverd"
   sys.cf_twin: "/var/cfengine/bin/cf-agent"
   sys.cf_version: 3.1.5
   sys.class: linux
   sys.date: Sun May 15 11:25:03 2011
   sys.domain: example.com
   sys.expires: 
   sys.exports: /etc/exports
   sys.fqhost: myhost.example.com
   sys.fstab: /etc/fstab
   sys.host: myhost.example.com
   sys.interface: venet0
   sys.ipv4: 127.0.0.1
   sys.ipv4[interface_name]: $(sys.ipv4[interface_name])
   sys.ipv4_1[interface_name]: $(sys.ipv4_1[interface_name])
   sys.ipv4_2[interface_name]: $(sys.ipv4_2[interface_name])
   sys.ipv4_3[interface_name]: $(sys.ipv4_3[interface_name])
   sys.key_digest: MD5#c4348f13c55363743ba5544a7808dff5
   sys.license_owner: $(sys.license_owner)
   sys.licenses_granted: $(sys.licenses_granted)
   sys.licenses_installtime: $(sys.licenses_installtime)
   sys.long_arch: linux_x86_64_2_6_18_028stab070_4__1_SMP_Tue_Aug_17_18_32_47_MSD_2010
   sys.maildir: /var/spool/mail
   sys.nova_version: $(sys.nova_version)
   sys.os: linux
   sys.ostype: linux_x86_64
   sys.policy_hub: $(sys.policy_hub)
   sys.release: 2.6.18-028stab070.4
   sys.resolv: /etc/resolv.conf
   sys.uqhost: myhost
   sys.version: #1 SMP Tue Aug 17 18:32:47 MSD 2010
   sys.windir: /dev/null
   sys.winprogdir: /dev/null
   sys.winprogdir86: /dev/null
   sys.winsysdir: /dev/null
   sys.workdir: /var/cfengine
```



<!---
Filename: 510-050-Special\_Variables-0410-This.md
-->

#### This


\begin{codelisting}
\codecaption{510-050-Special\_Variables-0420-This\_promise\_filename.cf}
```cfengine3, options: "linenos": true

bundle agent main
{
  reports:


      "$(this.promise_filename)";
}

# Let's say this file is called
# 00181_Special_Variables__this_promise_filename.cf
#
# Here is what cf-agent would output if we ran it with
# cf-agent -b example -f \
# ./00181_Special_Variables__this_promise_filename.cf -KI
#
# OUTPUT:
# R: hello world
# R: ./00181_Special_Variables__this_promise_filename.cf
# myhost#
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0430-This\_promise\_linenumber.cf}
```cfengine3, options: "linenos": true
# let's say this file is called
# 00182_Special_Variables__this_promise_linenumber.cf

bundle agent main
{
  reports:


      "$(this.promise_linenumber)";
      "$(this.promise_linenumber)";
}

# Here is what you'd see running cf-agent:
#
# myhost# cf-agent -b example \
# -f ./00182_Special_Variables__this_promise_linenumber.cf -KI
# >> Using command line specified bundlesequence
# R: 7
# R: 8
# myhost#
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0440-This\_promiser\_transformer\_simple.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/var/log/.*.conf"

        handle => "compress_old_files",
        comment => "Compress files more than 2 days old",
        depth_search => recurse("inf"),
        transformer => "/bin/gzip $(this.promiser)";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0450-This\_promiser\_Find\_world\_writable.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/.*"

        file_select => world_writeable,
        transformer => "/bin/echo WORLD WRITABLE FILE: $(this.promiser)";
}


body file_select world_writeable
{
        search_mode => { "o+w" };
        file_result => "mode";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0460-This\_promiser\_Compress\_pdf\_files.cf}
```cfengine3, options: "linenos": true
#######################################################
#
# Find and compress PDF files
#
#######################################################

bundle agent main

{
  files:

      "/tmp/pdfs"

        file_select => pdf_files,
        transformer => "/usr/bin/gzip $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body file_select pdf_files

{
        leaf_name => { ".*.pdf" , ".*.fdf" };
      # leaf_name = regex to match on
      # the file NAME (ignoring the
      # full directory path)

        file_result => "leaf_name";
}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}

# Given the following files:
#
# /tmp/pdfs/a.pdf
# /tmp/pdfs/b.txt
# /tmp/pdfs/c.pdf
# /tmp/pdfs/d.doc,
#
# Generates the following output (with -I switch):
#
# Transforming: /usr/bin/gzip /tmp/pdfs/a.pdf
# -> Transformer /tmp/pdfs/a.pdf => /usr/bin/gzip /tmp/pdfs/a.pdf
#    seemed to work ok
# Transforming: /usr/bin/gzip /tmp/pdfs/c.pdf
# -> Transformer /tmp/pdfs/c.pdf => /usr/bin/gzip /tmp/pdfs/c.pdf
#    seemed to work ok
#
# and leaves the following files:
#
# /tmp/pdfs/c.pdf.gz
# /tmp/pdfs/b.txt
# /tmp/pdfs/d.doc
# /tmp/pdfs/a.pdf.gz
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0470-This\_promiser\_Find\_world\_writable\_files\_but\_not\_symlinks.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc/.*"

        file_select => world_writeable_but_not_a_symlink,
        transformer => "/bin/echo FOUND: $(this.promiser)";
}


body file_select world_writeable_but_not_a_symlink
{
        search_mode => { "o+w" };
        file_types => { "symlink" };
        file_result => "mode.!file_types";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{510-050-Special\_Variables-0480-This\_promiser\_In\_commands\_promises.cf}
```cfengine3, options: "linenos": true
# Note: this does not work in 3.1.5; fixed in version 3.2.0.
# Broken again in 3.2.1


bundle agent main {

  commands:

      "/bin/echo $(this.promiser)";

}
```
\end{codelisting}

<!---
Filename: 520-000-Part-Title-0000-Selecting\_Files\_and\_Processes.md
-->

## Selecting Files and Processes



<!---
Filename: 520-060-File\_Selection-0490-title\_card.md
-->

### Selecting Files


\begin{codelisting}
\codecaption{520-060-File\_Selection-0500-Select\_by\_mode.cf}
```cfengine3, options: "linenos": true

############################################

bundle agent main

{

  files:

      "/tmp/test_from/."

        file_select => mode_777,
        transformer => "/bin/gzip $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body file_select mode_777

{
        search_mode => { "777" };
        file_result => "mode";
}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{520-060-File\_Selection-0510-Select\_files\_more\_than\_N\_days\_old.cf}
```cfengine3, options: "linenos": true
# The following policy selects files modified over a year ago
#
# It works by selecting files whose mtime is between 1 year old
# and 100 years old.  Next we will show you a more elegant way
# to do it.


bundle agent main

{
  files:

      "/tmp/test_from"

        file_select => modified_over_a_year_ago,
        transformer => "/bin/echo FOUND $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body file_select modified_over_a_year_ago

{
        mtime => irange(ago(100,0,0,0,0,0),ago(1,0,0,0,0,0));
      # modified between 1-100 years ago
      # Reminder: ago(Years, Months, Days, Hours, Minutes, Seconds)

        file_result => "mtime";
}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{520-060-File\_Selection-0520-Select\_by\_several\_things.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/var/logexample/."

        handle => "remove_world_writable_files",
        file_select => compound_filter,
        depth_search => recurse("inf"),
        delete  => tidy;
}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }



body file_select compound_filter

{

        search_mode => { "777" };
        leaf_name => { ".*\.pdf" , ".*\.fdf" };  # leaf_name = regex to match


        file_result => "leaf_name&mode";   # this is a class expression
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{520-060-File\_Selection-0530-Select\_files\_more\_than\_N\_days\_old\_More\_elegant.cf}
```cfengine3, options: "linenos": true
# The following policy selects files modified over a year ago
#
# More elegant version, courtesy of Dan Klein.


bundle agent main

{
  files:

      "/tmp/test_from"

        file_select => modified_over_a_year_ago,
        transformer => "/bin/echo FOUND: $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body file_select modified_over_a_year_ago

{
        mtime => irange(ago(1,0,0,0,0,0),now);
      # will select files modified between a year ago
      # and now

        file_result => "!mtime";
      # will select files modified over a year ago
      # (inverts the above selection)
}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{520-060-File\_Selection-0540-Compress\_old\_files.cf}
```cfengine3, options: "linenos": true
#######################################################
#
# Searching for permissions
#
#######################################################


############################################

bundle agent main

{
  files:

      "/tmp/test_from"

        file_select => days_old("1"),
        transformer => "/bin/gzip $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}

##########################################

body file_select days_old(days)
{
        mtime       => irange(0,ago(0,0,"$(days)",0,0,0));
        file_result => "mtime";
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{520-060-File\_Selection-0550-Compress\_old\_pdf\_files.cf}
```cfengine3, options: "linenos": true
#######################################################
#
# Searching for permissions
#
#######################################################


############################################

bundle agent main

{
  files:

      "/tmp/test_from"

        file_select => compound_filter,
        transformer => "/bin/gzip $(this.promiser)",
        depth_search => recurse("inf");

}

############################################

body file_select compound_filter

{

        leaf_name => { ".*\.pdf" , ".*\.fdf" };
      # leaf_name = regex to match

        mtime => irange(ago(1,0,0,0,0,0),now);
      # modified within 1 year

      # the above automatically define classes
      # only if the right hand side matches
      # file being examined

        file_result => "leaf_name.(!mtime)";
      # this is a class expression using classes
      # defined by the above filters
}

############################################

body depth_search recurse(d)

{
        depth => "$(d)";
}
```
\end{codelisting}

<!---
Filename: 520-070-Process\_Selection-0560-title\_card.md
-->

### Selecting Processes


\begin{codelisting}
\codecaption{520-070-Process\_Selection-0570-Kill\_based\_on\_process\_owner\_username.cf}
```cfengine3, options: "linenos": true
# Kill all processes belonging to user "victim".
# For the demonstration, in another window, run:
#    useradd victim && su - victim
# You will see cf-agent kill victim's session.
#
# You can dry-run this with cf-agent --dry-run.


bundle agent main {

  processes:

      ".*"

        process_select   => by_process_owner("victim"),
        signals => { "term", "kill" };

}

########################################################

body process_select by_process_owner(username) {

        process_owner => { "$(username)" };
        process_result => "process_owner";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{520-070-Process\_Selection-0580-Select\_by\_vsize.cf}
```cfengine3, options: "linenos": true
# kill all processes over a certain vsize (total Virtual Memory size in kb)

bundle agent main {

  processes:

      ".*"

        process_select  => vsize_exceeds("30000"),
        signals => { "term", "kill" };

}

########################################################

body process_select vsize_exceeds(vsize_limit) {

        vsize => irange("$(vsize_limit)","inf"); # vsize is over
      # $(vsize_limit)
        process_result => "vsize";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{520-070-Process\_Selection-0590-Select\_by\_process\_owner\_command\_and\_vsize.cf}
```cfengine3, options: "linenos": true
# Scenario: you have a memory leak in your Web app
# that causes "bloat" in httpd processes.
#
# kill all apache httpd processes over a certain vsize
# (vsize = total Virtual Memory size in kb)

bundle agent main {

  processes:

      ".*"

        process_select  => vsize_exceeds("apache",
                                         "/usr/sbin/httpd.*",
                                         "30000"),
        signals => { "term", "kill" };

}

########################################################

body process_select vsize_exceeds(process_owner,
      process_command,
      vsize_limit)
{
        process_owner => { "apache" };
      # username of process owner

        command => "$(process_command)";  # username of process owner

        vsize => irange("$(vsize_limit)","inf"); # vsize is over
      # $(vsize_limit)

        process_result => "process_owner&command&vsize";  # class expression
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{520-070-Process\_Selection-0600-Graceful\_restart\_of\_bloated\_apache\_httpd.cf}
```cfengine3, options: "linenos": true
# Scenario: you have a memory leak in your Web app
# that causes "bloat" in httpd processes.
#
# Issue a graceful restart command to the httpd
# if any apache httpd processes exceed vsize limit
# (vsize = total Virtual Memory size in kb).

bundle agent main {

  processes:

      ".*"

        process_select  => vsize_exceeds("apache", "httpd", "30000"),
        process_count => set_class("big_apache_httpd_procs");

  commands:
    big_apache_httpd_procs::
      "/usr/sbin/httpd -k graceful";


}

########################################################

body process_select vsize_exceeds(process_owner, command, vsize_limit) {

        process_owner => { "apache" };  # username of process owner

        command => "/usr/sbin/httpd.*";  # username of process owner

        vsize => irange("$(vsize_limit)","inf"); # vsize is over
      # $(vsize_limit)
        process_result => "process_owner&command&vsize";
}

########################################################

body process_count set_class(classname)

{
        match_range => "1,inf";
      # Integer range for acceptable number of matches for this process
      # (In this case, one or more processes

        in_range_define => { "$(classname)" };
      # List of classes to define if the matches are in range.
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{520-070-Process\_Selection-0610-Select\_by\_several\_things.cf}
```cfengine3, options: "linenos": true
########################################################
#
# Simple test processes
#
########################################################


bundle agent main

{
  processes:

      ".*"

        process_count   => anyprocs,
        process_select  => proc_finder;


  reports:

    any_procs::

      "Found processes in range";

    in_range::
      "Found no processes in range";

}

########################################################

body process_select proc_finder

{

        command => "vim .*";
        # (Anchored) regular expression matching the CMD field

        stime_range => irange(ago(1,0,0,0,0,0),ago(0,0,0,0,0,10));
        # Processes started between 1 year and 10 seconds ago

        process_owner => { "root" };
        # List of regexes matching the user of a process

        process_result => "stime&command&process_owner";

}

########################################################

body process_count anyprocs

{
        match_range => "0,0";
      # Integer range for acceptable number of matches for this process
      # (In this case, one or more processes

        out_of_range_define => { "any_procs" };
      # List of classes to define if the matches are out of range

        in_range_define => { "in_range" };
      # List of classes to define if the matches are in range.
      # We should never have a process that has a count of 0.

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{520-070-Process\_Selection-0620-Select\_by\_stime.cf}
```cfengine3, options: "linenos": true
bundle agent main

{
  processes:

      ".*sleep.*"

        process_select  => newborns,
        signals => { "term" };



}

########################################################

body process_select newborns

{


        stime_range => irange(ago(0,0,0,1,0,0), now);
      # Processes started between 1 hour and 1 second ago

        process_result => "stime";
}

```
\end{codelisting}

<!---
Filename: 950-000-Part-Title-0000-Conclusion.md
-->

## Conclusion



<!---
Filename: 950-010-Survey-0000-Chapter-Title.md
-->

### Survey

Your opinion is important to me. Please help us improve the quality of the training materials (and promote them) by [letting me know](mailto:aleksey@verticalsysadmin.com):

- What did you get out of this CFEngine tutorial?

- What did you like best about it?

- What should be improved?



<!---
Filename: 950-030-References-0000-Chapter-Title.md
-->

### Online References and Tutorials

- [CFEngine Documentation](http://docs.cfengine.com)

- Aleksey Tsalolikhin's [Reference Supplements](http://verticalsysadmin.com/cfengine) - "CFEngine 3 Vocabulary Primer", "Agent Attributes Summary" and "Functions Summary".

- Brian Bennett's [cf-primer](http://www.digitalelf.net/cf-primer)



<!---
Filename: 950-040-Further\_Study-0000-Chapter-Title.md
-->

### Further Study

#### Books

- ["Modern Infrastructure Engineering with CFEngine 3"](https://www.usenix.org/lisa/books/modern-infrastructure-engineering-cfengine-3)

- ["Learning CFEngine 3"](http://shop.oreilly.com/product/0636920022022.do)



<!---
Filename: 955-000-Part-Title-0000-Vocab\_Primer.md
-->

## Appendix A - CFEngine Vocabulary Primer	

Based on the works of Mark Burgess and CFEngine AS. 

### Preface
CFEngine is designed to be comprehensive and to let you model
nearly any aspect of system configuration using promises
(statements of intention).

There are over 500 promise attributes in CFEngine 3.
They enable you to detail the desired system state.

This document presents a "starting set" of commonly
used ones. We suggest you learn them first.

For more detail on the below, use the "Search CFEngine docs"
[search box](http://cf-learn.info/) (on the bottom right),
or see the [CFEngine docs](https://cfengine.com/docs/)

For professional CFEngine training, visit [Vertical Sysadmin](http://www.verticalsysadmin.com)

### Promise Types

Arranged in the order CFEngine checks them (see "Normal Ordering" in the Reference Manual): 

| vars    | A promise to be a variable, representing a value.
| classes | A promise to be a boolean variable representing true/on/1.
| files   | A promise about a file, including its existence, attributes and contents.
| delete\_lines   | A promise about file contents (that specified content is absent).
| field\_edits   | A promise about file contents (concerning values in text fields)
| insert\_lines   | A promise about file contents (that specified content is present).
| replace\_patterns   | A promise about file contents (that specified content is absent, replaced by another).
| packages | A promise concerning a package, including its presence (or absence) and version.
| processes | A promise concerning items in the system process table.
| services | A promise concerning the state (on/off) of a service (a group of one or more processes that runs in the background).
| commands | A promise to execute a command.
| reports | A promise to report a message.


### Promise Attributes 


What follows is a listing of promise attributes by promise type.

#### Any


These promise attributes can be used in *any* promise.

| comment | A comment about this promise's intention that follows through the program
| depends\_on | A list of promise handles that this promise depends on somehow.
| handle | A unique id-tag string for referring to this as a promisee elsewhere


#### classes


| expression | Evaluate string expression of classes
| and        | Combine class sources with AND - useful for including functions
| or         | Combine class sources with inclusive OR - useful for including functions


#### reports


| report\_to\_file | The path and filename to which output should be appended

#### vars

| string | A string
| int | An integer
| real | A real number (an integer with a fractional component)
| slist | A list of strings
| ilist | A list of integers
| rlist | A list of real numbers


#### commands

| args | String of arguments for the command



#### files

| copy\_from | (external body) Used to copy files - see Standard Library section.
| create | true/false whether to create non-existing file
| edit\_line | Specifies name of edit\_line bundle
| edit\_template | The name of a special CFEngine template file to expand
| perms | (external body) Used to set file attributes like permissions, ownership, etc.  See Standard Library section.
| touch | true/false whether to touch time stamps on file
| transformer | Command (with full path) used to transform current file (no shell wrapper used)



#### packages

| package\_architectures | Select architecture for package selection
| package\_policy | Criteria for package installation/upgrade on the current system (e.g. "add", "delete")

#### processes

| process\_stop | A command used to stop a running process gracefully
| restart\_class | A class to be defined globally if the process is not running, so that a commands: rule can be referred to restart the process
| signals | Signals to be sent to a process

#### services


| service\_policy | Policy for service (start/stop)


#### Attributes in CFEngine Standard Library

| Type | Attribute | Value | Description
| * | action | immediate | Do it, do it nowww!
| * | action | log\_repaired | Log a repair
| * | classes | if\_repaired | Set class(es) if a promise was repaired
| files | replace\_with | value | Search and replace
| files | copy\_from | local\_cp | Copy files locally
| files | copy\_from | remote\_cp | Copy files from remote server
| files | changes | detect\_all\_change | File integrity check
| files | delete | tidy | Delete files, including symlinks to directories and empty directories.
| files | perms | mog | Set mode, owner, group attributes on a file
| files | edit\_line | insert\_lines | Make sure file contains lines
| files | edit\_line | expand\_template | Make sure file contains content expanded from a template
| files | edit\_line | set\_config\_values | Set config values in a file
| files | depth\_search | depth | Maximum depth level for search (use with depth("inf") to turn on unbounded recursion)
| files | file\_select | days\_old(days) | Select files by age 
| files | file\_select | name\_age(name,days) | Select files by name and age 
| files | location | before | Insert text before specified location
| files | location | after | Insert text after specified location
| packages | package\_method | yum | Interface with YUM package manager
| packages | package\_method | apt | Interface with APT package manager
| commands | contain | useshell | Run the command in a shell to use I/O redirection or pipelining


### Functions

| fileexists() | Returns "true" if the named file can be accessed 
| classmatch()  | Returns "true" if the regular expression matches any currently defined class


### Special Variables

| $(sys.date) | Current time and date
| $(sys.host) | Hostname
| $(sys.policy\_hub) | Address of our policy server.



<!---
Filename: 958-000-Part-Title-0000-Additional\_Exercises.md
-->

## Appendix B - Additional Exercises



<!---
Filename: 958-010-Exercises-0020-Exercise.exr.md
-->

### Report the current time 

Report the current time using:

1. Output from /bin/date (captured using execresult() function)

2. Built-in special variable $(sys.date)



<!---
Filename: 958-010-Exercises-0030-Exercise.exr.md
-->

### Create (manually) a data file:

   '/tmp/data.txt'

        line 1
        line 2
        line 3

Use cf-agent to replace "line 2" with "line two".



<!---
Filename: 958-010-Exercises-0040-Exercise.exr.md
-->

### CFEngine template

1. Manually create a template '/var/cfengine/masterfiles/templates/motd.dat':

```cfengine3
This system is property of __ORGANIZATION__.
Unauthorized use forbidden.
CFEngine maintains this system.
CFEngine last ran on $(sys.date).
```

2. Write a CFEngine policy to generate '/etc/motd' from '/var/cfengine/inputs/templates/motd.dat' as follows:

* Replace __ORGANIZATION__ with the name of your organization.

* Expand the special variable $(sys.date).

Use all of the following promise types:

* delete_lines
* insert_lines
* replace_patterns




<!---
Filename: 958-010-Exercises-0050-Exercise.exr.md
-->

### Distribute policy

Integrate your motd policy into the default cfengine policy in masterfiles so that it propagates to all servers.



<!---
Filename: 958-010-Exercises-0060-Exercise.exr.md
-->

### Log repairs

With CFEngine Enterprise, we see all repairs through the Mission Portal.

With the Community Edition, it is helpful to log when a promise is repaired, so we can see what changes CFEngine is making where.

Write a promise that logs when it is repaired to '/var/log/cfengine/repairs.log'

Reference: [CFEngine Special Topics Guide on Reporting](https://auth.cfengine.com/archive/manuals/st-reporting).



<!---
Filename: 958-010-Exercises-0070-Exercise.exr.md
-->

### File editing: preserving a block while inserting it

Insert the following three lines (and you can keep them in order, as a single block, using insert_lines attribute insert_type => "preserve_block";) into /etc/profile BEFORE the HOSTNAME=... line.  (Hint: look at the "location" attribute of insert_lines)

```bash
if [ -x /bin/custom ]
  then /bin/custom
fi
```




<!---
Filename: 958-010-Exercises-0080-Exercise.exr.md
-->

### Shutdown your VM at the end of the day

*Problem:*  All practice machines should be shutdown at end of class at 17:00

*Desired state:*  The command '/sbin/shutdown -h now' is running when we are in the 17th hour of the day, so the system shuts down cleanly and on time.



<!---
Filename: 958-010-Exercises-0090-Exercise.exr.md
-->

#### File editing: replacing text

Given a file '/tmp/file.txt':

```text
apples
oranges
```

Use the CFEngine Standard Library to comment out "oranges" and append "bananas", resulting in:

```text
apples
# oranges
bananas
```

Hint: use the following:
* bundle edit_line insert_lines
* bundle edit_line comment_lines_matching



<!---
Filename: 958-010-Exercises-0100-Exercise.exr.md
-->

### Containing commands

Run the command '/usr/bin/id' as user "nobody".

Hint: use "body contain setuid".



<!---
Filename: 958-010-Exercises-0110-Exercise.exr.md
-->

### Configure sshd

How does the system look like in the correct configuration:

1. Make sure '/etc/ssh/sshd\_config' contains the line "PermitRootLogin no"

2. Make sure sshd is running using this configuration

How to code it in CFEngine:

1. a files promise to edit sshd\_config

2. a commands promise to restart sshd to reload the new config

Exercise:  use "body classes if\_repaired" to link 1 and 2 above to make sure 2 happens.




<!---
Filename: 958-010-Exercises-0120-Exercise.exr.md
-->

### Reload sshd if config file was updated

Restart sshd if process start time of sshd predates the modification timestamp of '/etc/ssh/sshd\_config' (Process selection is demonstrated in *Process_Selection* in verticalsysadmin\_training\_examples)

Send the solution to the author for a special prize.



<!---
Filename: 958-010-Exercises-0130-Exercise.exr.md
-->

### Install a wiki

Write a CFEngine policy to install and configure a Wiki web service.



<!---
Filename: 958-010-Exercises-0150-Exercise.exr.md
-->

### Put your name into a text file

Write a policy to create /tmp/myname.txt and put your name in it.  



<!---
Filename: 958-010-Exercises-0160-Exercise.exr.md
-->

### Use a CFEngine template

Create a template by running the following shell command:

```bash
echo 'Hello, $(mybundle.myname).  The time is $(sys.date).' > /tmp/file.dat
```


Note: a fully qualified variable consists of the bundle name wherein the variable is defined plus the variable name.

Example:

```cfengine3
bundle agent mybundle { vars: "myvar" string => "myvalue"; }
```

The fully qualified variable name is `$(mybundle.myvar)`.

Now write a policy to populate contents of /tmp/file.txt using this template file, /tmp/file.dat.

Make sure your bundle defines the variable embedded in the template, and that your bundle name matches the bundle name embedded in the template.

Your policy should use an edit_lines bundle containing an insert_lines promise with the following attributes:

```cfengine3
insert_type => "file",
expand_scalars => "true";
```



<!---
Filename: 958-010-Exercises-0170-Exercise.exr.md
-->

### Set a custom class based on the existence of a file. 

Example:

```cfengine3
    classes:

       "file_exists"

           expression  =>  fileexists("/etc/site_id") ;
```

Then write another promise that is conditional on the above class.

Run it when the file exists, and when it does not, and observe how CFEngine dynamically configures your server.



<!---
Filename: 958-010-Exercises-0180-Exercise.exr.md
-->

### Edit /etc/motd (file editing and classes)

Part 1

* Write a policy to create '/etc/motd' as follows:

It should *always* say "Unauthorized use forbidden."

Part 2

* '/etc/motd' should *always* say "Unauthorized use forbidden". However, on weekends, it should also say "Go home, it's the weekend".

Test by defining "Saturday" class on the command line:

```bash
cf-agent -D Saturday  --file ... --bundle ...
```



<!---
Filename: 960-000-Part-Title-0000-Additional\_Examples.md
-->

## Appendix C - Additional Examples



<!---
Filename: 960-010-Security-0000-Chapter-Title.md
-->

### Security Examples


\begin{codelisting}
\codecaption{960-010-Security-0010-Processes\_not\_running\_a\_blacklist.cf}
```cfengine3, options: "linenos": true
!! SKIP !!

body common control

{
        bundlesequence  => { "processes_not_running"  };
}


########################################


bundle agent processes_not_running {


  vars:

      "bad_process"     slist   =>      {
                                          "cupsd",
                                          "ircd",
                                          "ping",
                                          "portmap",
      };




  processes:
      "$(bad_process)"  signals => { "term", "kill" };

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0020-SELinux\_Allow\_httpd\_to\_connect\_to\_and\_to\_write\_to\_stream\_sockets.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  methods:
      "any" usebundle => allow_httpd_to_talk_to_pgbouncer;

}


bundle agent allow_httpd_to_talk_to_pgbouncer {

  classes:

      "module_missing"

        not => returnszero("/usr/sbin/semodule -l | \
/bin/grep allowHttpdSocketConnectWrite \
>/dev/null", "useshell");
# should be rewritten to use execresult and regcmp() so we can
# change "useshell" to "noshell" to make it more lightweight

  methods:
    module_missing::
      "any" usebundle => compile_and_package_and_load_selinux_module;

}


bundle agent compile_and_package_and_load_selinux_module {

  files:

      "/root/SELINUX/."
        create => "true",
        comment => "/root/SELINUX is my scratch space for SELinux
                    policy files as we compile, package and load
                    SELinux policy modules.";

  files:

      "/root/SELINUX/allowHttpdSocketConnectWrite.te"
        create => "true",
        perms  => m("0600"),
        edit_line => Allow_Httpd_Socket_Connect_and_Write,
        comment => "httpd connects to Postgres database through
                    pgbouncer.  we want httpd to connect to pgbouncer
                    using a socket file instead of over TCP/IP,
                    because we've had instances where PHP pages
                    that connect to the database a lot in quick
                    succession use up all available network ports
                    and subsequent connection attempts fail.";


  commands:

      "/usr/bin/checkmodule  -M -m \
-o /root/SELINUX/allowHttpdSocketConnectWrite.mod \
/root/SELINUX/allowHttpdSocketConnectWrite.te && \
/usr/bin/semodule_package \
-o /root/SELINUX/allowHttpdSocketConnectWrite.pp \
-m /root/SELINUX/allowHttpdSocketConnectWrite.mod && \
/usr/sbin/semodule \
-i /root/SELINUX/allowHttpdSocketConnectWrite.pp",
        comment => "Compile module; create package; load module.",
        contain => in_shell;

}


bundle edit_line Allow_Httpd_Socket_Connect_and_Write {

      delete_lines: ".*";

  insert_lines:
      "
# This file was generated by CFEngine

module allowHttpdSocketConnectWrite 1.0;

require {
type httpd_t;
type tmp_t;
type initrc_t;
class sock_file write;
class unix_stream_socket connectto;
}

#============= httpd_t ==============
allow httpd_t initrc_t:unix_stream_socket connectto;
allow httpd_t tmp_t:sock_file write;

"
        insert_type => "preserve_block";
}
```
\end{codelisting}

<!---
Filename: 960-010-Security-0030-Change\_detection.md
-->

### Security

#### Change Detection
In the "computer immunology" research and development phase, Mark added file change detection capability to CFEngine.


\begin{codelisting}
\codecaption{960-010-Security-0040-Detect\_changes\_in\_etc.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/etc"

        handle       => "etc_tripwire",
        comment      => "Report changes on files in /etc",
        changes      => detect_all_change,
        depth_search => recurse("inf");
}


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0050-Detect\_changes\_in\_etc\_Uses\_classes.cf}
```cfengine3, options: "linenos": true
bundle agent main {
  files:

      "/etc"

        handle       => "safeguard_files_in_etc",
        comment      => "Keep screaming about changes in /etc",
        changes      => detect_all_change_noupdate,
        depth_search => recurse("inf"),
        classes      => kept_repaired_failed("promise_kept",
                                             "promise_repaired",
                                             "promise_not_kept)");

  reports:

    promise_kept::

      "Kept";

    promise_repaired::
      "Repaired";

    promise_not_kept::

      "not kept";

}




body classes kept_repaired_failed(kept, repaired, failed) {
        promise_kept     => { "$(kept)" };
        promise_repaired => { "$(repaired)" };
        repair_failed    => { "$(failed)" };
        repair_denied    => { "$(failed)" };
        repair_timeout   => { "$(failed)" };
}


body changes detect_all_change_noupdate {
      # This is fierce, and will cost disk cycles
        hash           => "best";
        report_changes => "all";
        update_hashes  => "no";
}

##

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0060-Match\_suspicious\_process\_names.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:

      "suspicious_process_names"
        handle => "process_blacklist",
        comment => "Setup a list of known bad process names",
        slist =>
      {
        "sniff",
        "eggdrop",
        "r00t",
        "^\./",
        "john",
        "crack"
      };
  processes:
      "$(suspicious_process_names)"
        handle => "kill_bad_procs",
        comment => "Kill bad processes on sight",
        signals => { "term", "kill" };
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0070-Check\_open\_ports.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "listening_ports_and_processes_ideal_scene"
        handle => "expected_tcp_profile",
        comment => "expected network profile (listenting ports)",
        string => "22 sshd 80 httpd 443 httpd 5308 cf-server";

      # end of our expected configuration

  vars:
    centos_5::
      "listening_ports_and_processes"
        handle => "actual_tcp_profile",
        comment => "Our actual network profile",
        string =>
      execresult("/usr/sbin/lsof -i -n -P | \
/bin/grep LISTEN | \
/bin/sed -e 's#*:##' | \
/bin/grep -v 127.0.0.1 | \
/bin/grep -v ::1 | \
/bin/awk '{print $8,$1}' | \
/bin/sort | \
/usr/bin/uniq | \
/bin/sort -n | \
/usr/bin/xargs echo", "useshell");  # this is our
      # actual configuration.
      # we tell CFEngine to use a shell with "useshell"
      # to do a pipeline.

    centos_6::
      "listening_ports_and_processes"
        handle => "actual_tcp_profile",
        comment => "Our actual network profile",
        string =>
      execresult("/usr/sbin/lsof -i -n -P | \
/bin/grep LISTEN | \
/bin/sed -e 's#*:##' | \
/bin/grep -v 127.0.0.1 | \
/bin/grep -v ::1 | \
/bin/awk '{print $9,$1}' | \
/bin/sort | \
/usr/bin/uniq | \
/bin/sort -n | \
/usr/bin/xargs echo", "useshell");

  classes:
      "reality_does_not_match_ideal_scene"
      # check whether expected configuration matches actual.
        handle => "check_profile",
        comment => "Compare desired and actual configuration",
        not => strcmp (
                        "$(listening_ports_and_processes)",
                        "$(listening_ports_and_processes_ideal_scene)"
        );

  reports:
    reality_does_not_match_ideal_scene::
      "
DANGER!!!
DANGER!!!  Expected open ports and processes:
DANGER!!!  $(listening_ports_and_processes_ideal_scene)
DANGER!!!
DANGER!!!  Actual open ports and processes:
DANGER!!!  $(listening_ports_and_processes)
DANGER!!!
";  # and yell loudly if it does not match.
      # Note:  A "commands" promise could be used in
      # addition to "reports" to send a text message
      # to a sysadmin cell phone, or to feed
      # CRITICAL status to a monitoring system.
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0080-Configure\_sshd\_stub.cf}
```cfengine3, options: "linenos": true
bundle agent main {
  vars:

      "sshd[Protocol]"        string => "2";
      "sshd[X11Forwarding]"   string => "yes";
      "sshd[UseDNS]"          string => "no";

  methods:
      "any"    usebundle => edit_sshd("$(this.bundle).sshd");
}


bundle agent edit_sshd(params) {

  vars:
      "index" slist => getindices("$(params)");

  reports:
# pretend we're editing sshd.conf to set the above
      "$(index) :  $($(params)[$(index)])";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-010-Security-0090-Use\_edit\_sshd.cf}
```cfengine3, options: "linenos": true
!! SKIP !!


# an example of a methods bundle accessing an
# array from the parent bundle.
#
# Arrays are not a data type in CFEngine; they
# are a data structure.
#
# Arrays cannot be "passed" as variables to a
# bundle or body. They are only referred to in
# some functions that search for their members
# and extract things like indices and values.
#
# So what you CAN pass is the name of the array,
# complete with context.

body file control
{
        inputs => {
                    "$(sys.libdir)/stdlib.cf",
                    "1870_More_Examples__Security__edit_sshd.cf"
        };

}

#########################################################


bundle agent main
{
  vars:
      "sshdconfig" string => "/etc/ssh/sshd_config";

      # SSHD configuration to set
      "sshd[Protocol]"                                string => "2";
      "sshd[X11Forwarding]"                           string => "yes";
      "sshd[UseDNS]"                                  string => "no";

  methods:
      "any"    usebundle => edit_sshd("$(sshdconfig)", "example.sshd");
}
```
\end{codelisting}

<!---
Filename: 960-020-More\_Examples-0000-Chapter-Title.md
-->

### More Examples


\begin{codelisting}
\codecaption{960-020-More\_Examples-0120-WordPress\_Diego.cf}
```cfengine3, options: "linenos": true
#Install WordPress:
#       1. Install Infrastructure:
#               1.1. Install httpd and mod_php and PHP MySQL client.
#               1.2. Install MySQL server.
#                       1.2.1. Create WordPress User in MySQL.
#                       1.2.2. Create WordPress Database in MySQL.
#               1.3. Make sure httpd and MySQL servers are running.
#       2. Install the PHP application (WordPress)
#               2.1. Download tarball with the latest version of WordPress
#                    PHP application.
#               2.2. Extract it into the httpd document root where it can
#                    be run by the Web server.
#               2.3. Create WordPress config file wp-config.php from
#                    wp-config-sample.php that's shipped with WordPress.
#               2.4. Tweak wp-config.php to put in the data needed
#                    to establish database connection (db name,
#                    db username and password).


bundle agent main {

  methods:

      "Install WordPress"
        usebundle => wordpress_install;

}

bundle agent wordpress_install
{
  vars:
      # Put all WordPress config settings in 'conf' array
      "conf[DB_NAME]"      string => "wordpress";
      "conf[DB_USER]"      string => "wordpress";
      "conf[DB_PASSWORD]"  string => "lopsa10linux";
      "conf[htmlroot]"     string => "/var/www/html";
      "conf[tarfile]"      string => "/root/wordpress-latest.tar.gz";
      "conf[wp_dir]"       string => "$(conf[htmlroot])/wordpress";
      "conf[conf]"    string => "$(conf[wp_dir])/wp-config.php";
      "conf[wp_cfgsample]" string => "$(conf[wp_dir])/wp-config-sample.php";

  methods:

      "Infrastructure"

        handle => "wp_infrastructure",
        comment => "httpd, PHP, MySQL and everything in-between",
        usebundle => wp_infrastructure;

      "Application"

        handle => "wp_application",
        comment => "Install and Configure WordPress PHP app",
        usebundle => wp_application;

}

bundle agent wp_application {

  methods:
      "any" usebundle => wp_tarball_is_present("wordpress_install.conf");
      "any" usebundle => wp_tarball_is_unrolled("wordpress_install.conf");
      "any" usebundle => conf_exists("wordpress_install.conf");
      "any" usebundle => wp_is_properly_configured("wordpress_install.conf");
}

bundle agent wp_infrastructure {

  methods:
      "any" usebundle => wp_packages_installed("wordpress_install.conf");
      "any" usebundle => wp_services_up("wordpress_install.conf");
      "any" usebundle => wp_mysql_configuration("wordpress_install.conf");
      #"any" usebundle => wp_allow_http_inbound("wordpress_install.conf");
}

#############################################

bundle agent wp_packages_installed(params)
{
  vars:
    debian::
      "desired_package" slist => {
                                   "apache2",
                                   "php5",
                                   "php5-mysql",
                                   "mysql-server",
      };
    redhat::
      "desired_package" slist => {
                                   "httpd",
                                   "php",
                                   "php-mysql",
                                   "mysql-server",
      };
  packages:
      "$(desired_package)"
        handle => "install_packages",
        comment => "Install needed packages",
        package_policy => "add",
        package_architectures => { "x86_64" },
        package_method => generic,
        classes => if_repaired("packages_added");

  commands:
    packages_added.debian::
      "/usr/sbin/service httpd graceful"
        comment => "Restarting httpd so it can pick up any new modules.";

  commands:
    packages_added.redhat::
      "/sbin/service httpd graceful"
        comment => "Restarting httpd so it can pick up any new modules.";
}

#############################################

bundle agent wp_services_up(params)
{
  processes:
      "mysqld" restart_class => "start_mysqld";
    redhat::
      "httpd"  restart_class => "start_httpd";
    debian::
      "apache2"  restart_class => "start_httpd";

  commands:
    start_mysqld&debian::
      "/usr/sbin/service mysqld start";

    start_mysqld&redhat::
      "/sbin/service mysqld start";

    start_httpd&redhat::
      "/sbin/service httpd start";

    start_httpd&debian::
      "/usr/sbin/service httpd start";
}

#############################################

bundle agent wp_tarball_is_present(params)
{

  classes:
      "wordpress_tarball_is_present"
        handle => "check_for_WP_tarball",
        comment => "check if we already have the WP tarball",
        expression => fileexists("$($(params)[tarfile])");

  commands:
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q --timeout=10 \
                     -O $($(params)[tarfile]) \
                     http://wordpress.org/latest.tar.gz"
        handle => "download_WP_tarball",
        classes => if_repaired("we_have_WP_tarball"),
        comment => "Downloading latest version of WordPress.",
        action => logme("promise download_WP_tarball");
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{

  classes:
      "wordpress_directory_is_present"
        expression => fileexists("$($(params)[htmlroot])/wordpress/");

  commands:
    we_have_WP_tarball&(!wordpress_directory_is_present)::
      "/bin/tar -C $($(params)[htmlroot]) -xzf $($(params)[tarfile])"
        handle => "extract_tarball",
        depends_on => { "download_WP_tarball" },
        comment => "Unroll wordpress tarball to HTML document root";
}

#############################################

bundle agent wp_mysql_configuration(params)
{

  commands:
      "/usr/bin/mysql -u root -e \"
      CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
      GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
      TO '$($(params)[DB_USER])'@localhost
      IDENTIFIED BY '$($(params)[DB_PASSWORD])';
      FLUSH PRIVILEGES;\"
"
        handle => "setup_db",
        comment => "Create DB, DB user, and access credentials";

}

#############################################

bundle agent conf_exists(params)
{

  classes:
      "wordpress_config_file_exists"
        handle => "check_WP_config_file_there",
        comment => "Check if WP config file is present",
        expression => fileexists("$($(params)[conf])");

  files:
    !wordpress_config_file_exists::
      "$($(params)[conf])"
        handle => "copy_WP_config_file",
        comment => "Copy WP config file from config sample file",
        copy_from => local_cp("$($(params)[wp_cfgsample])"),
        perms => m("a+r");
}

#############################################

bundle agent wp_is_properly_configured(params)
{
  vars:
      "wpparams" slist => getindices("$(params)");

  files:
      "$($(params)[conf])"
        handle => "configure_wordpress",
        comment => "Make sure wp-config.php is properly configured",
        edit_line => replace_or_add(
          "define\('$(wpparams)', *'(?!$($(params)[$(wpparams)])).*",
          "define('$(wpparams)', '$($(params)[$(wpparams)])');");
}

#############################################

bundle agent wp_allow_http_inbound(params)
{

  commands:
    iptables_edited::
      "/sbin/service iptables stop"
        comment => "Stopping iptables to allow inbound HTTP connections";
}

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


body action logme(x)
{
        log_string => "$(sys.date) $(x)";

        log_kept => "/var/log/cfengine_keptlog.log";
        log_repaired => "/var/log/cfengine_replog.log";
        log_failed => "/var/log/cfengine_faillog.log";

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-020-More\_Examples-0160-Setting\_the\_environment\_for\_a\_command.cf}
```cfengine3, options: "linenos": true
body agent control
{
        environment => { "A=123", "B=456", "PGK_PATH=/tmp"};
}

############################################

bundle agent main
{
  commands:

      "/usr/bin/env"
        handle => "env_cmd",
        comment => "Demonstrate setting up the environment for a command";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-020-More\_Examples-0170-Delete\_repo\_comments\_from\_CentOS\_repo\_and\_exclude\_postgresql.cf}
```cfengine3, options: "linenos": true
# edit CentOS repo file in /etc/yum.repos.d to exclude
 # Postgres packages from downloads/updates (because I want
# to get them from the Postgres.org repo).
#
# Note: I have to strip out the CentOS repo comments otherwise
# due to the nature of the section-aware editing, the comments
# end up in the middle of the previous section.

bundle agent main {

  methods:
      "any"
        usebundle => exclude_postgresql_from_CentOS_repo;

}


bundle agent exclude_postgresql_from_CentOS_repo {

  files:
      "/etc/yum.repos.d/CentOS-Base.repo"
        edit_line => DeleteRepoComments,
        handle => "CentOS_Base_repo__strip_repo_comments",
        comment => "Remove CentOS remarks about the repos,
                    they mess up section editing because
                    they are placed outside the section
                    they comment about.";

  files:
      "/etc/yum.repos.d/CentOS-Base.repo"
        edit_line => AppendIfNoLine(
"exclude=postgresql*$(const.n)# Get Postgres packages from PGDG$(const.n)"),
        comment => "Exclude postgresql packages in CentOS [base]
                    and [update] repos; we'll get them from
                    Postgres Global Development Group.";

}

########################################################

bundle edit_line DeleteRepoComments {
  delete_lines:
      "#released updates.*";
      "#packages used/produced in the build but not released";
      "#additional packages that may be useful";
      "#additional packages that extend functionality of existing packages";
      "#contrib - packages by Centos Users";
}

########################################################

bundle edit_line AppendIfNoLine(parameter) {

  insert_lines:
      "$(parameter)"
        select_region => MyINISection("base");


  insert_lines:
      "$(parameter)"
        select_region => MyINISection("updates");

}

########################################################



body select_region MyINISection(x)

{
        select_start => "\[$(x)\]";
        select_end => "\[.*\]";

      # This assumes a file format like:
      #
      # [section 1]
      #
      # lines....
      #
      # [section 2]
      #
      # lines... etc

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-020-More\_Examples-0180-Install\_php\_pecl\_module.cf}
```cfengine3, options: "linenos": true
# Install pecl_http PHP module to provide HttpRequest class
# to our PHP Web app:
#   - run "pecl install pecl_http" and set SELinux type
#     on http.so to textrel_shlib_t
#   - edit /etc/php.ini to tell php to dynamically load
#     http.so


body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

################################################################


bundle agent php_pecl_http_extension_is_installed_and_integrated {

  files:

      "/etc/php.ini"

        edit_line => tell_php_to_load_http_extension;



  classes:

      "no_http_so"
        not => fileexists("/usr/lib64/php/modules/http.so");


  commands:

    no_http_so::

      "/usr/bin/yes ' ' | \
       /usr/bin/pecl install pecl_http && \
       /usr/bin/chcon -t textrel_shlib_t /usr/lib64/php/modules/http.so" 
        comment => "Force the install to be non-interactive 
                    (let PECL install pecl_http with the default
                    settings instead of prompting us). 
                    Then set SELinux label.";

        contain => in_shell;
}


###############################################################


bundle edit_line tell_php_to_load_http_extension {
  vars:
      "dynamically_load_http_module"
        string => "extension=http.so ; XYZ requires pecl_http's HttpRequest";
        # this is the text we want in /etc/php.ini

  insert_lines:
      "$(dynamically_load_http_module)"
        location => in_Dynamic_Extensions_section;
}


###############################################################


body location in_Dynamic_Extensions_section

{
        before_after => "after";
        first_last => "first";
        select_line_matching => "; Dynamic Extensions ;";
}

# reloading the httpd if php.ini was edited
# is left as an exercise for the reader
# hint: if_repaired


# TODO: instead of using select_line_matching, use begin
# and end select region to insert the extension=http.so
# line into /etc/php.ini at the end of instead of in the
# middle of the Dynamic Extensions block so it looks cleaner.
```
\end{codelisting}

<!---
Filename: 960-030-EC2-0000-Chapter-Title.md
-->

### Amazon EC2 Examples



<!---
Filename: 960-030-EC2-0190-System\_provisioning\_and\_integration\_introduction.md
-->

### Amazon AWS EC2

Note: The following was a demo given at CasITConf 2011. Tighter integration with AWS may now exist in CFEngine.

Purpose: proof of concept of multi-node deployment, configuration and integration on Amazon EC2 cloud using CFEngine.

We start on a Ubuntu VM with Amazon EC2 CLI tools installed, courtesy of Florian Drescher of CloudTrainings.com. We configure it with our EC2 credentials.

Then we install CFEngine 3.1.4. Then we run casit_demo.cf to instantiate two servers, "web" and "db", and to install CFEngine 3.1.4 onto them. We then use that CFEngine to install Apache httpd and mod_php and WordPress PHP application on "web" and MySQL server on "db"; and we integrate the two servers. End result: a working instance of WordPress deployed across two servers.

Video: http://www.verticalsysadmin.com/cfengine/casit/


\begin{codelisting}
\codecaption{960-030-EC2-0200-system\_provisioning\_and\_integration\_demo.cf}
```cfengine3, options: "linenos": true
#############################################
bundle common global_vars {


      vars: "desired_servers" slist => {
                                         "web",
                                         "db",
      };
}

#############################################


body common control
{

        bundlesequence => {
"global_vars",
"no_hosts_known_to_ssh",
servers_provisioned(@{global_vars.desired_servers}),
hosts_file_distributed_and_loaded(@{global_vars.desired_servers}),
wordpress_installer_distributed_and_run(@{global_vars.desired_servers}),
        };


        inputs =>          { "$(sys.libdir)/stdlib.cf" };

}

#############################################


bundle agent no_hosts_known_to_ssh
{
  files:
      "/home/user/.ssh/known_hosts"
        delete => tidy;

      # I don't want to see SSH complaints about keys having changed

}

#############################################


bundle agent servers_provisioned(desired_servers)
{

  classes:
      "$(desired_servers)_up"
        expression => fileexists(
          "/home/user/cfengine_ec2/servers/$(desired_servers)"
                                );

      "$(desired_servers)_down"
        not => fileexists(
          "/home/user/cfengine_ec2/servers/$(desired_servers)"
                         );


  reports:

      "$(desired_servers) has been provisioned"
        ifvarclass => canonify("$(desired_servers)_up");

  commands:
      "/home/user/cfengine_ec2/start_micro_instance.sh $(desired_servers) \
        > /home/user/cfengine_ec2/servers/$(desired_servers)"
        ifvarclass => canonify("$(desired_servers)_down"),
        contain => in_shell;
}


#############################################

bundle agent hosts_file_distributed_and_loaded(desired_servers)
{
  commands:
      "/usr/bin/scp -o StrictHostKeyChecking=no \
                    -i /home/user/ec2/mysshkey_key.pem \
                    /etc/hosts ec2-user@$(desired_servers):hosts && \
       /usr/bin/ssh -t \
                    -o StrictHostKeyChecking=no
                    -i /home/user/ec2/mysshkey_key.pem
                    ec2-user@$(desired_servers)
                    sudo /bin/cp hosts /etc/hosts"
        contain => in_shell;
}

#############################################

bundle agent wordpress_installer_distributed_and_run(desired_servers)
{
  commands:
      "/usr/bin/scp -o StrictHostKeyChecking=no \
                    -i /home/user/ec2/mysshkey_key.pem \
             /home/user/cfengine_ec2/example102_wordpress_installation.cf \
                    ec2-user@$(desired_servers): && \
       /usr/bin/ssh -t \
                    -o StrictHostKeyChecking=no \
                    -i /home/user/ec2/mysshkey_key.pem \
                    ec2-user@$(desired_servers) \
                    sudo /usr/local/sbin/cf-agent -I \
                           -f ./example102_wordpress_installation.cf"
        contain => in_shell;
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-030-EC2-0210-system\_provisioning\_and\_integration\_wordpress\_installation.cf}
```cfengine3, options: "linenos": true
# Install WordPress:
# 1. Install Infrastructure:
#   1.1. Install httpd and mod_php and PHP MySQL client.
#   1.2. Install MySQL server.
#           1.2.1. Secure MySQL
#           1.2.2. Create WordPress User in MySQL.
#           1.2.3. Create WordPress Database in MySQL.
#   1.3. Make sure httpd and MySQL servers are running.
# 2. Install the PHP application (WordPress)
#   2.1. Download tarball with the latest version of WordPress PHP
#         application.
#   2.2. Extract it into the httpd document root where it can be
#        run by the Web server.
#   2.3. Create WordPress config file wp-config.php from
#        wp-config-sample.php that's shipped with WordPress.
#   2.4. Tweak wp-config.php to put in the data needed to establish
#        database connection (db name, db username and password).


body common control
{

        bundlesequence => {
                            "wordpress_install",
        };


        inputs =>          { "$(sys.libdir)/stdlib.cf" };

}



bundle agent wordpress_install
{
  vars:
      "conf[DB_HOST]"      string => "db";
      "conf[DB_NAME]"      string => "wordpress";
      "conf[DB_USER]"      string => "wordpress";
      "conf[DB_PASSWORD]"  string => "L0PSA_2011_Linux";
      "conf[DB_ROOT_PASSWORD]"  string => "Linux_2011_L0PSA";
      "conf[htmlroot]"     string => "/var/www/html";
      "conf[tarfile]"      string => "/root/wordpress-latest.tar.gz";
      "conf[wp_dir]"       string => "$(conf[htmlroot])/wordpress";
      "conf[conf]"         string => "$(conf[wp_dir])/wp-config.php";
      "conf[wp_cfgsample]" string => "$(conf[wp_dir])/wp-config-sample.php";

  methods:

    web::

      "any"
usebundle => wp_web_front_end_packages_installed("wordpress_install.conf");

      "any"
usebundle => wp_web_front_end_services_up("wordpress_install.conf");

      "any"
usebundle => wp_tarball_is_present("wordpress_install.conf");

      "any"
usebundle => wp_tarball_is_unrolled("wordpress_install.conf");

      "any"
usebundle => conf_exists("wordpress_install.conf");

      "any"
usebundle => wp_is_properly_configured("wordpress_install.conf");

    db::

      "any"
usebundle => wp_db_back_end_packages_installed("wordpress_install.conf");

      "any"
usebundle => wp_db_back_end_services_up("wordpress_install.conf");

      "any"
usebundle => wp_mysql_is_secured("wordpress_install.conf");

      "any"
usebundle => wp_mysql_configuration("wordpress_install.conf");

}


#############################################

bundle agent wp_web_front_end_packages_installed(params)
{
  vars:

    debian::
      "desired_package" slist => {
                                   "apache2",
                                   "php5",
                                   "php5-mysql",
      };

    redhat::
      "desired_package" slist => {
                                   "httpd",
                                   "php",
                                   "php-mysql",
      };
  packages:
      "$(desired_package)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

  commands:
    packages_added&&redhat::
      "/sbin/service httpd graceful"
        comment => "Restarting httpd so it can pick up new modules.";

    packages_added&&debian::
      "/usr/sbin/service apache2 graceful"
        comment => "Restarting httpd so it can pick up new modules.";
}

#############################################
bundle agent wp_db_back_end_packages_installed(params)
{
  vars:

      "desired_package" slist => {
                                   "mysql-server",
      };

  packages:
      "$(desired_package)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

}


#############################################

bundle agent wp_web_front_end_services_up(params)
{

  processes:
    redhat::
      "httpd"  restart_class => "start_httpd_redhat";

    ubuntu::
      "apache2"  restart_class => "start_httpd_ubuntu";


  commands:
    start_httpd_redhat::
      "/sbin/service httpd start";

    start_httpd_ubuntu::
      "/usr/sbin/service apache2 start";

}

#############################################

bundle agent wp_db_back_end_services_up(params)
{
  processes:
    redhat::
      "mysqld" restart_class => "start_mysqld_redhat";

    ubuntu::
      "mysqld" restart_class => "start_mysqld_ubuntu";


  commands:
    start_mysqld_redhat::
      "/sbin/service mysqld start";

    start_mysqld_ubuntu::
      "/usr/sbin/service mysqld start";


}

#############################################

bundle agent wp_tarball_is_present(params)
{

  classes:
      "wordpress_tarball_is_present"
        expression => fileexists("$($(params)[tarfile])");

  reports:
    wordpress_tarball_is_present::
      "WordPress tarball is on disk.";

  commands:
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q -O $($(params)[tarfile]) \
                     http://wordpress.org/latest.tar.gz"
        comment => "Downloading latest version of WordPress.";
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{

  classes:
      "wordpress_directory_is_present"
        expression => fileexists("$($(params)[htmlroot])/wordpress/");

  reports:
    wordpress_directory_is_present::
      "WordPress directory is present.";

  commands:
    !wordpress_directory_is_present::
      "/bin/tar -C $($(params)[htmlroot]) -xzf $($(params)[tarfile])"
        comment => "Unrolling wordpress tarball to $($(params)[htmlroot]).";
}


#############################################

bundle agent wp_mysql_is_secured(params)
{

      #  remove the test databases and anonymous user created
      # by default and set the MySQL root password
      #
      # at first I tried to use mysql_secure_installation, but
      # it would not take the root password when it was given
      # to it as STDIN in a pipeline, it threw the error
      # "stty: standard input: Invalid argument"
      #
      # instead let's just do what mysql_secure_installation
      # does, so we can do it non-interactively:
      # - remove anonymous users
      # - remove remote root
      # - remove test database
      # - remove privileges on test database
      # - reload privilege tables



  commands:
      "/usr/bin/mysql -u root -e \"
      DELETE FROM mysql.user
      WHERE User='';
      DELETE FROM mysql.user
      WHERE User='root' AND Host!='localhost';
      DROP DATABASE test;
      DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
      FLUSH PRIVILEGES;\"
";

}

#############################################

bundle agent wp_mysql_configuration(params)
{

  commands:
      "/usr/bin/mysql -u root -e \"
      CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
      GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
      TO '$($(params)[DB_USER])'@'web'
      IDENTIFIED BY '$($(params)[DB_PASSWORD])';
      FLUSH PRIVILEGES;\"
";

}

#############################################

bundle agent conf_exists(params)
{

  classes:
      "wordpress_config_file_exists"
        expression => fileexists("$($(params)[conf])");

  reports:
    wordpress_config_file_exists::
      "WordPress config file $($(params)[conf]) is present";

  commands:
    !wordpress_config_file_exists::
      "/bin/cp -p $($(params)[wp_cfgsample]) $($(params)[conf])";
}

#############################################

bundle agent wp_is_properly_configured(params)
{
  vars:
      "wpparams" slist => getindices("$(params)");

  files:
      "$($(params)[conf])"
        edit_line => replace_or_add(
          "define\('$(wpparams)', *'(?!$($(params)[$(wpparams)])).*",
          "define('$(wpparams)', '$($(params)[$(wpparams)])');"
                                   );
}

#############################################

bundle edit_line replace_or_add(pattern,line)
# Diego's.
# Replace a pattern in a file with a single line.
# If the pattern is not found, add the line to the file.
# The pattern must match the whole line (it is automatically
# anchored to the start and end of the line) to avoid
# ambiguity.

{
  replace_patterns:
      "^${pattern}$"
        replace_with => value("${line}"),
        classes => always("replace_done");

  insert_lines:
    replace_done::
      "${line}";
}


body classes always(x)
# Diego's.
# Define a class no matter what the outcome of the promise is

{
        promise_repaired => { "$(x)" };
        promise_kept => { "$(x)" };
        repair_failed => { "$(x)" };
        repair_denied => { "$(x)" };
        repair_timeout => { "$(x)" };
}




# Todo:
#
#
# MySQL:
# - submit a patch to the MySQL folks to add a non-interactive option to
#   /usr/bin/mysql_secure_installation
# - change the root password using /usr/bin/mysqladmin -u root password
#   'new-password'
# - I've hardcoded the web server name as 'web', in allowing connects. 
#   make this more flexible.  (how?)
#
# httpd:
# - instead of hardcoding "/var/www/html", derive httpd document root on
#   the fly from httpd config fileusing Function readstringlist. (If it's
#   Apache, look for DocumentRoot)
#
# iptables:
# - port 80 may be closed.  need to open it.
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-030-EC2-0220-system\_provisioning\_and\_integration\_Start\_micro\_instance.sh}
```bash, options: "linenos": true
#!/bin/sh

MY_HOST_ALIAS=$1

INSTANCE_ID=`ec2-run-instances -t t1.micro \
                               ami-7c827015 \
                               -k mysshkey 2>&1 | \
              awk '/^INSTANCE/ {print $2}'`   # CentOS image.
                                              # Use ami-6c06f305 for Ubuntu.

INSTANCE_HOSTNAME=pending

while [ "${INSTANCE_HOSTNAME}" = "pending" ]
do
	sleep 4
        INSTANCE_HOSTNAME=`ec2-describe-instances $INSTANCE_ID | \
                           awk '/^INSTANCE/ {print $4}'`


done

INSTANCE_ADDRESS=`ec2-describe-instances $INSTANCE_ID | \
                  awk '/^INSTANCE/ {print $14}'`
echo $INSTANCE_ADDRESS $MY_HOST_ALIAS $INSTANCE_ID | \
  tee -a hosts.ec2

sudo sh -c "echo $INSTANCE_ADDRESS   $MY_HOST_ALIAS  >> /etc/hosts"

sleep 70  # wait for EC2 to provision the instance

/usr/bin/ssh -t  \
             -o StrictHostKeyChecking=no \
             -i /home/user/ec2/mysshkey_key.pem \
             ec2-user@${INSTANCE_HOSTNAME} \
             sudo sh -c "\"hostname $MY_HOST_ALIAS\""



sh -c "sleep 70 \
&& \
/usr/bin/scp \
  -o StrictHostKeyChecking=no \
  -i /home/user/ec2/mysshkey_key.pem\
  /home/user/Downloads/cfengine-community-3.1.4-1.centos5.x86_64.rpm \
  /home/user/cfengine_ec2/example102_wordpress_installation.cf \
  ec2-user@${INSTANCE_HOSTNAME}: \
  && \
  /usr/bin/ssh \
    -t \
    -o StrictHostKeyChecking=no \
    -i /home/user/ec2/mysshkey_key.pem \
    ec2-user@${INSTANCE_HOSTNAME} \
    '/usr/bin/sudo rpm -i cfengine-community-3.1.4-1.centos5.x86_64.rpm \
    && rm cfengine-community-3.1.4-1.centos5.x86_64.rpm && \
    /usr/bin/sudo rsync -qa /usr/local/share/doc/cfengine/inputs/ \
                            /var/cfengine/inputs/ && \
    /usr/bin/sudo /usr/local/sbin/cf-agent;  '" 
```
\end{codelisting}

<!---
Filename: 960-040-Class\_Examples-0000-Chapter-Title.md
-->

### Advanced Usage of Classes


\begin{codelisting}
\codecaption{960-040-Class\_Examples-0240-Parsing\_readtcp\_output\_to\_set\_a\_class.cf}
```cfengine3, options: "linenos": true
# this policy runs on an haproxy load balancer
# we check a list of servers (webhosts_list)
# to tst that they are up, and if they are up,
# we make sure our haproxy configuration includes
# them.
#
# This allows us to dynamically integrate new
# Web servers into the round robin.
#
# Reference: https://cfengine.com/forum/read.php?5,19571

bundle agent load_balancer_configured_with_live_webhosts(webhosts_list)
{

  reports:
    load_balancer_hosts::
      "I am a load balancer!!";


  vars:

      "2xCRLF"
        string => "$(const.r)$(const.n)$(const.r)$(const.n)",
        comment => "HTTP requests are terminated by the double
                    CR/LF sequence";


      # variable containing HTTP response from each web server
      "my80"
        string => readtcp("$(webhosts_list)","80","GET /index.php
HTTP/1.1$(2xCRLF)Host: $(webhosts_list)$(2xCRLF)","20");


      # set server_ok class if response contains HTTP 200 OK
  classes:
      "server_ok"
        expression => regcmp(".*200 OK.*\n.*","$(my80)");


      # make sure each live (OK) web server is in the haproxy.conf

  files:

    server_ok&load_balancer_hosts::

      "/etc/haproxy.conf"
        edit_line => append_if_no_line(
          " server $(webhosts_list)
$(webhosts_list):80 maxconn 32");

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-040-Class\_Examples-0250-Set\_a\_custom\_class\_based\_on\_hostname\_pattern.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  classes:
      "italy"
        expression => classmatch("^mil.*$");  # Milan

  reports:
    italy::
      "Italy";


}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-040-Class\_Examples-0260-class-driven-configuration.cf}
```cfengine3, options: "linenos": true
# a simple, all in one file, example of configuring
# different policies per-country based on hostname naming pattern


bundle common define_global_classes {

      classes: "italy"   expression => classmatch("mil.*");

      classes: "germany" expression => classmatch("berl.*");

}




bundle agent main {

  vars:
      "country"
        slist => { "italy", "germany" };

  methods:
      "any"
        usebundle => "$(country)",
        ifvarclass => "$(country)";
}


bundle agent italy   { commands: "/bin/echo I love Milan";  }
bundle agent germany { commands: "/bin/echo I love Berlin"; }
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-040-Class\_Examples-0270-Persistent\_class.cf}
```cfengine3, options: "linenos": true
# FIXME - this example needs work

bundle agent main

{

  commands:

    ok_but_check_later::

      "/bin/echo YELLOW ALERT (condition \"ok_but_check_later\")";


  commands:

    cannot_repair_promise::

      "/bin/echo SHIELDS UP, RED ALERT";


  commands:

      "/bin/true"

        classes => set_persistent_class_based_on_promise_repair_outcome
                     (
                       "ok_but_check_later",
                       "cannot_repair_promise"
                     );


}


############################################

body classes set_persistent_class_based_on_promise_repair_outcome(if,else)

# if promise repair succeeded, set a persistent
# class for 10 minutes called "ok_but_check_later";
# else if promise repair failed, set persistent class
# "cannot_repair_promise_DANGER_DANGER".

{
        promise_repaired => { "$(if)" };
        repair_failed => { "$(else)" };
        persist_time => "10"; # in minutes
}
##########################################################################

# Here is an example of how you might use a persistent class
#
# 1. You detect a rootkit from some filesearch and you want
# to delete it immediately, but the danger is maybe not over.
#
# 2. You define persistent class for the next hour DEFCON1
# which activates repeated scans of the filesystem looking
# for trouble as you suspect you might be under attack.
```
\end{codelisting}

<!---
Filename: 960-045-Versioning\_Policy-0000-Chapter-Title.md
-->

### Versioning Policy

Here are examples of versioning your policies and integrating CFEngine with a Version Control System.


\begin{codelisting}
\codecaption{960-045-Versioning\_Policy-1040-Version\_number\_Plain.cf}
```cfengine3, options: "linenos": true
body common control
{
        version => "1.1";
        bundlesequence => { "example" };
}


########################################


bundle agent main
{

  commands:

      "/bin/nosuchcommand hello world, i love wednesdays and coffee";
}
```
\end{codelisting}

<!---
Filename: 960-080-Special\_Notes-0000-Chapter-Title.md
-->

### Special Notes And Gotchas


\begin{codelisting}
\codecaption{960-080-Special\_Notes-0640-Iteration\_over\_a\_global\_list\_Using\_parameterization.cf}
```cfengine3, options: "linenos": true
# Scalar references to *local* list variables imply iteration.
# To iterate over a global list variable, map the global list
# into the local context, or supply it to the bundle as a
# parameter.
#
# Example of mapping it into the local context

body common control {
        bundlesequence => { runme(@(g.myusers)) };  # note lack of
      # " symbols
}

bundle common g
{
      vars: "myusers"  slist => { "joe", "mary", "ann" };

}


bundle agent runme(x)

{

  reports:

      "$(x)";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-080-Special\_Notes-0650-Iteration\_over\_a\_global\_list\_Direct\_method.cf}
```cfengine3, options: "linenos": true
# Scalar references to *local* list variables imply iteration.
# To iterate over a global list variable, map the global list
# into the local context.  There are two ways to do it, this
# is the direct method.



bundle common g
{
      vars: "myusers"  slist => { "joe", "mary", "ann" };

}


bundle agent main

{
      vars: "mylist" slist => { @(g.myusers) };

  reports:

      "$(mylist)";
}
```
\end{codelisting}

<!---
Filename: 960-080-Special\_Notes-0660-Max\_scalar\_list\_and\_array\_sizes.md
-->

TIP: There is no limit to the length of lists or arrays, but there is a limit to the size of variable-expanded strings (scalars). The final result of any single variable expansion is limited to about 4k.



<!---
Filename: 960-080-Special\_Notes-0670-Unit\_tests.md
-->

'/usr/local/share/doc/cfengine/' contains over 220 examples (originally unit tests).

They don't all work, but most do.

Potentially useful in learning CFEngine.



<!---
Filename: 960-080-Special\_Notes-0680-Orion\_Cloud\_Pack.md
-->

#### Orion Cloud Pack - library for EC2


#### Essential Files  
```text
promises.cf            Main configuration file.
update.cf              Update configuration.
failsafe.cf            Failsafe configuration.
cfengine_stdlib.cf     CFEngine standard library.
```



#### Maintenance Examples
```text
change_mgt.cf          Implement security tripwire on files/directories.
ensure_ownership.cf    Home directory ownership and permission maintenance.
fix_broken_software.cf Package installation and permission correction.
garbage_collection.cf  Log rotation and removal.
harden_xinetd.cf       Disable xinetd services specified.
iptables.cf            Secure system with sysctl.conf and iptables.
name_resolution.cf     Edit /etc/resolv.conf to the specified DNS servers
```


#### System Setup Examples 
```text
c_cpp_env.cf           Set up C programming environment.
db_mysql.cf            Install and run MySQL
db_postgresql.cf       Install and run PostgreSQL
db_sqllite.cf          Install and run SQLlite
jboss_server.cf        Prepare JAVA environment and run JBOSS.
nagios.cf              Setup NAGIOS monitoring node.
nginx_perlcgi.cf       Setup NGINX webserver perlCGI.
nginx_phpcgi.cf        Setup NGINX webserver phpCGI.
ntp.cf                 Setup NTP server and clients.
perl_env.cf            PERL programming language install.
php_webserver.cf       Setup a PHP webserver.
python_env.cf          PYTHON programming install.
ruby_env.cf            Setup ruby on rails environment.
sshd_conf.cf           Ensure sshd config is correct.
tomcat_server.cf       Setup a tomcat server.
varnish.cf             Set up Varnish web accelerator
```



<!---
Filename: 960-080-Special\_Notes-0690-Always\_specify\_the\_class.md
-->

TIP: Always specify the class , or else you may inadvertently inherit the class specification from an earlier promise


\begin{codelisting}
\codecaption{960-080-Special\_Notes-0700-Be\_careful\_with\_class.cf}
```cfengine3, options: "linenos": true
bundle agent main {
  commands:
    customclass::
      "/bin/echo customclass is set";
      "/bin/echo this is always true";
}

# run cf-agent on this policy with and without -Dcustomclass
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-080-Special\_Notes-0710-No\_safeguard\_for\_syntactically\_correct\_but\_insane\_policy.cf}
```cfengine3, options: "linenos": true
# a mutually exclusive configuration

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

############################################################


bundle agent main {

  files:

      "/tmp/plug"
        delete => tidy;

  files:

      "/tmp/plug"
        create => "true";
}
```
\end{codelisting}

<!---
Filename: 960-090-Packages-0000-Chapter-Title.md
-->

### Packages



<!---
Filename: 960-090-Packages-0740-A\_note\_on\_versioning.md
-->

TIP: Package versions are of data type string, not number!  Thus numeric comparison, while it can be attempted, is fraught with peril and frustration.

Which version is newer?

* 1.2.3f
* 1.2.3-4
* 1.2.3-hotpotato 

NOTE: See http://semver.org/ for a proposal for a meaningful versioning standard.


\begin{codelisting}
\codecaption{960-090-Packages-0750-install\_packages\_from\_local\_filesystem\_based\_repository.cf}
```cfengine3, options: "linenos": true
# NOTE: This policy assumes pre-3.7 packages promises.
# Packages promises were completely rewritten in 3.7
# They still work but are deprecated.

body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  packages:
      "epel-release"
        package_policy => "add",
        package_version => "5-4",
        package_architectures => { "noarch" },
        package_method => rpm_filebased("/repo/RPMs");
}

body package_method rpm_filebased(path)
# Contributed by Aleksey Tsalolikhin. Written on 29-Feb-2012.
# Based on yum_rpm body in COPBL by Trond Hasle Amundsen.
# Intended to install packages from local package repository.
# You must specify the path to the local package repository as the argument.

{
        package_file_repositories => { "$(path)" };
# the above is an addition to Trond's yum_rpm body

        package_add_command    => "/bin/rpm -ihv ";
# The above is a change from Trond's yum_rpm body, this makes the commands
# rpm only.
#
# The reason I changed the install command from yum to rpm is yum will by
# default refuse to install the epel-release RPM as it does not have the
# EPEL GPG key, but rpm goes ahead and installs the epel-release RPM and
# the EPEL GPG key.

        package_name_convention => "$(name)-$(version).$(arch).rpm";
# The above is a change from Tron's yum_rpm body. When
# package_file_repositories is in play, package_name_convention has
# to match the file name, not the package name, per the CFEngine 3
# Reference Manual.
# 

# The rest is unchanged from Trond's yum_rpm body
        package_changes => "bulk";
        package_list_command => "/bin/rpm -qa --qf \
  '%{name} %{version}-%{release} %{arch}\n'";

        package_list_name_regex    => "^(\S+?)\s\S+?\s\S+$";
        package_list_version_regex => "^\S+?\s(\S+?)\s\S+$";
        package_list_arch_regex    => "^\S+?\s\S+?\s(\S+)$";

        package_installed_regex => ".*";


        package_delete_command => "/bin/rpm -e --allmatches";
        package_verify_command => "/bin/rpm -V";
}


# Example output from running this policy:
# linux# cf-agent -f \
# ./MISC_install_packages_from_local_filesystem_based_repository.cf \
#  -b example -KI
# >> Using command line specified bundlesequence
#
# Q:rpm -ihv  "/repo/RPM ...:Preparing...   \
#             ##################################################
# Q:rpm -ihv  "/repo/RPM ...:epel-release   \
#            ##################################################
#
# Q:rpm -ihv  "/repo/RPM ...:
# linux#

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-090-Packages-0760-install\_RPM\_from\_a\_local\_directory.cf}
```cfengine3, options: "linenos": true
body common control {
        bundlesequence => { "commands__install_PGDG_yum_repo_RPM" };
}


bundle agent commands__install_PGDG_yum_repo_RPM {

  packages:

      "pgdg-centos"

        package_policy => "add",
        package_method => yum_filebased;

}


body package_method yum_filebased
{
        package_file_repositories => { "/repo" };   
        # A list of machine-local directories to search for packages

        package_changes => "bulk";
        package_list_command => "/usr/bin/yum list installed";

      # Remember to escape special characters like |

        package_list_name_regex    => "([^.]+).*";
        package_list_version_regex => "[^\s]\s+([^\s]+).*";
        package_list_arch_regex    => "[^.]+\.([^\s]+).*";

        package_installed_regex => ".*installed.*";
        package_name_convention => "$(name).$(arch)";

        package_add_command => "/usr/bin/yum -y install";
        package_delete_command => "/bin/rpm -e";
        package_verify_command => "/bin/rpm -V";
}

```
\end{codelisting}

<!---
Filename: 960-100-Classes-0000-Chapter-Title.md
-->

### Advanced Usage Of Classes


\begin{codelisting}
\codecaption{960-100-Classes-0780-setting\_multiple\_classes\_as\_a\_result\_of\_a\_single\_promise.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  vars:
      "slist_of_classes" slist => { "class1", "class2" };

  files:
      "/etc/httpd/conf/httpd.conf"
        edit_line => insert_lines("#test comment"),
        classes  => if_repaired_set_these_classes("@(main.slist_of_classes)");

  reports:
      class1:: "class1";
      class2:: "class2";

}

body classes if_repaired_set_these_classes(list)
{
        promise_repaired => { "@(list)" };
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-100-Classes-0790-Return\_codes.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  commands:

      "/bin/false"

        classes => cmd_kept("1","ok");

  reports:
    ok::

      "Command completed successfully";

}




body classes cmd_kept(code,class)
{
        repaired_returncodes => { "$(code)" };
        promise_repaired => { "$(class)" };
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{960-100-Classes-0800-returncodes.cf}
```cfengine3, options: "linenos": true
# customize CFEngine's idea of promise kept, returned or failed
# based on command's return code.
#
# For this demo, add an account "joe" and then use
# userdel to remove it.
#
# Run "chattr +i /etc/passwd" after adding the "joe" account
# to induce a failure to remove Joe.
#

bundle agent main {

  commands:

      "/usr/sbin/userdel"
        args => "joe",
        comment => "We don't want joe on our systems ever again.",
        classes => customized_for_userdel;

  reports:

      joe_removed::   "Joe was removed";
      no_joe::        "Don't worry, there is no account for Joe.";
      (!joe_removed)&(!no_joe)::  "!!!!  Joe is still here.  !!!!";
}

body classes customized_for_userdel {

        kept_returncodes => { "6" };   # user was not present in the file
        repaired_returncodes => { "0" }; # user was successfully removed
        promise_repaired => { "joe_removed" };
        promise_kept => { "no_joe" };
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-100-Classes-0810-Canonifying\_variables\_to\_use\_them\_as\_class\_names.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  vars:
      "myarray[loc@t!on]" string  => "Bloomington";
      "myarray[t!me###]"     string  => "first week of April";


      "index" slist =>  getindices("myarray");


      "cindex[$(index)]" string => canonify("$(index)");


  reports:



      "Original keys: $(index)";
      "Canonified keys: $(cindex[$(index)])";
}
```
\end{codelisting}

<!---
Filename: 960-100-Classes-0820-Canonifying\_variables\_to\_use\_them\_as\_class\_names.md
-->

#### Data Structures:

#### Array myarray
```text
loc@t!on,Bloomington
t!me###,first week of April
```

#### List index
```text
loc@t!on
t!me###
```

#### Array cindex
```text
loc@t!on,loc_t_on
t!me###,t_me___
```


\begin{codelisting}
\codecaption{960-100-Classes-0830-ifvarclass.cf}
```cfengine3, options: "linenos": true
bundle agent main {


      vars:  "fruit"  string =>  "banana";

  reports:



      "I love bananas for breakfast"

        ifvarclass => "$(fruit)";

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-100-Classes-0840-non\_persistent\_class.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {


  files:
      "/tmp/file.txt"
        create => "true",
        edit_line => insert_lines("hello world 1234"),
        classes => if_repaired("promise_repaired");


  reports:
    promise_repaired::
      "soft class is set";

}


```
\end{codelisting}

<!---
Filename: 960-110-Regular\_Expressions-0000-Chapter-Title.md
-->

### Advanced Usage Of Regular Expressions


\begin{codelisting}
\codecaption{960-110-Regular\_Expressions-0860-Backreferences.pl}
```perl, options: "linenos": true
#!/usr/bin/env perl

$record =
"James Alexander Richard Smith";

if ( $record =~ /^(.*?) (.*) (.*)$/ ) {

  print "First name: $1\n";
  print "Middle name(s): $2\n";
  print "Last name: $3\n";
}

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-110-Regular\_Expressions-0870-commentinging\_out\_file\_content.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  files:

      "/tmp/testfile"

        edit_line => comment_out_everything;
}


bundle edit_line comment_out_everything {

  replace_patterns:

      "^([^#].*)"

        replace_with => comment("#");

}

```
\end{codelisting}
\begin{codelisting}
\codecaption{960-110-Regular\_Expressions-0880-replace\_patterns.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  files:

      "/tmp/data.txt"
        edit_line => change_dogs_to_cats;

}


bundle edit_line change_dogs_to_cats {

  replace_patterns:

      "dog"

        replace_with => value("cat");

}
```
\end{codelisting}

<!---
Filename: 960-110-Regular\_Expressions-0890-Inverse\_match.md
-->

Let's say you want to write a regex that will match any string that does NOT contain the string "hello world". Use:

^((?!hello world).)*$

This is explained in http://stackoverflow.com/questions/406230/regular-expression-to-match-string-not-containing-a-word



<!---
Filename: 960-130-Commands-0000-Chapter-Title.md
-->

### Advanced Usage Of Commands


\begin{codelisting}
\codecaption{960-130-Commands-0960-ifelapsed.cf}
```cfengine3, options: "linenos": true
# do not use -K switch when running this example!!
#
# Run it in verbose mode and grep the output for "elapsed"

bundle agent main {

  commands:

      "/bin/echo /bin/cycle_shield_frequencies.sh"

        action => every_2_minutes;
}

body action every_2_minutes
{
        ifelapsed => "2";  # in minutes
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-130-Commands-0970-Getting\_shell\_to\_interpolate\_a\_shell\_variable\_requires\_useshell.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  commands:

      "/bin/echo"
        args => " \"hello $(const.dollar){LOGNAME} $(const.t)adfs\"",
        contain => in_shell;

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-130-Commands-0980-contain\_preview.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  commands:

      "/bin/touch /tmp/test2"

        contain => preview;

}

body contain preview {

        preview => "true";

}
```
\end{codelisting}

<!---
Filename: 960-140-Linking\_Promises\_with\_Classes-0000-Chapter-Title.md
-->

### Advanced Usage Of Classes: Linking Promises


\begin{codelisting}
\codecaption{960-140-Linking\_Promises\_with\_Classes-1000-if\_repaired.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  files:
      "/tmp/httpd.conf"
        create => "true",
        edit_line => insert_lines("ServerName localhost"),
        classes => if_repaired("httpd_restart_needed");


  commands:
    httpd_restart_needed::
      "/etc/init.d/httpd reload";


}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-140-Linking\_Promises\_with\_Classes-1010-if\_repaired\_stop\_cups\_and\_complain.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  processes:

      "cupsd"

        process_stop => "/etc/init.d/cups stop",
        comment => "We don't want print services on our Web servers.",
        classes => if_repaired("complain_loudly_about_cups");

  commands:
    complain_loudly_about_cups::
      "/bin/echo send up a flare about CUPS";
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-140-Linking\_Promises\_with\_Classes-1020-Verbose\_logging\_of\_repairs.cf}
```cfengine3, options: "linenos": true
bundle agent main
{
  files:

      "/tmp/newfile3"

        handle => "newfile3_exists",
        create => "true",
        action => log("Created very important file $(this.promiser)");
}

body action log(msg)
{
        log_string => "$(sys.date) \
$(this.promise_filename):$(this.promise_linenumber) \
$(this.handle): $(msg)";
        log_repaired => "stdout";
}

# Logs a message like:
#    L: Mon Oct 19 18:05:44 2015 \
# /home/aleksey/cfengine_tutorial/chapters/\
# 790-140-Linking_Promises_with_Classes-1020\
# -Verbose_logging_of_repairs.cf:5 \
# newfile3_exists: Created very important file /tmp/newfile3
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-140-Linking\_Promises\_with\_Classes-1030-edit\_crontab\_and\_HUP\_crond.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  files:

      "/var/spool/cron/root"

        edit_line => cf_execd_entry_is_present,
        create => "true",
        classes => if_repaired("restart_crond");

  processes:
    restart_crond::
      "crond"
        signals => { "hup" };


}


bundle edit_line cf_execd_entry_is_present {

  insert_lines:
      "5,10,15,20,25,30,35,40,45,50,55 * * * * /var/cfengine/bin/cf-execd -F";
}

```
\end{codelisting}

<!---
Filename: 960-150-Dynamic\_Bundlesequence-0000-Chapter-Title.md
-->

### Dynamic Inputs And Bundlesequence


\begin{codelisting}
\codecaption{960-150-Dynamic\_Bundlesequence-1050-Activate\_a\_class\_if\_it\_is\_appropriate\_for\_my\_context.cf}
```cfengine3, options: "linenos": true
# I want to target a promise to a certain group of servers.
# However I want to abstract the elements of that group from
# the promises that target that group, so that when I add an
# element to that group, I only need to update *one* promise,
# the one enumerating that group.
#
# The following policy will report "I am a webserver" if its
# hostname is listed in "webservers" slist.

bundle common global_vars {

  vars:
      "webservers"
        slist => { "web01", "web02", "web03" };

}


bundle common global_classes {

  classes:

      "webfarm"
        expression => reglist(
                                "@(global_vars.webservers)",
                                 escape("$(sys.host)")
                             );

}

bundle agent main {

  reports:

    webfarm::

      "I am a web server";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-150-Dynamic\_Bundlesequence-1060-Jeff\_Blaine\_dynamic\_bundlesequence\_with\_parameterized\_mybundle.cf}
```cfengine3, options: "linenos": true
# by Jeff Blaine

# Changes the order of NTP servers in ntp.conf based on site (using class)
# if we're in site x, site X servers should be first; if we're in site y,
# site y servers should be first.

# Example run:
#    [cfengine00  practical_examples]# cf-agent -KI \
#      -f ./MISC_dynamic_bundlesequence_with_parameterized_mybundle.cf \
#       -Dsite_x
#     -> Edited file /etc/ntp.conf
#    [cfengine00  practical_examples]# cat /etc/ntp.conf
#    fudge   127.127.1.0 stratum 10
#    server  127.127.1.0
#    # will be destroyed by CFEngine, so don't do that.
#    # This file is configured by CFEngine.  Manual edits to this file
#    server ntp-sitex.our.org
#    server ntp-sitey.our.org
#    restrict -4 default kod notrap nomodify nopeer noquery
#    restrict -6 default kod notrap nomodify nopeer noquery
#    [cfengine00  practical_examples]# cf-agent -KI \
#      -f ./MISC_dynamic_bundlesequence_with_parameterized_mybundle.cf \
#      -Dsite_y
#     -> Edited file /etc/ntp.conf
#    [cfengine00  practical_examples]# cat /etc/ntp.conf
#    fudge   127.127.1.0 stratum 10
#    server  127.127.1.0
#    # will be destroyed by CFEngine, so don't do that.
#    # This file is configured by CFEngine.  Manual edits to this file
#    server ntp-sitey.our.org
#    server ntp-sitex.our.org
#    restrict -4 default kod notrap nomodify nopeer noquery
#    restrict -6 default kod notrap nomodify nopeer noquery
#    [cfengine00  practical_examples]#
#



bundle common g
{
      # Define NTP servers in a specific order per site.

      # You could define everything here in "main" and change the references
      # there in "methods:" if you wanted to.

  vars:

    site_x::
      "ntpservers" slist => {
                              "ntp-sitex.our.org",
                              "ntp-sitey.our.org",
      };

    site_y::
      "ntpservers" slist => {
                              "ntp-sitey.our.org",
                              "ntp-sitex.our.org",
      };
}

bundle agent main
{
  methods:

    site_x::
      "site_x" usebundle =>
      system_ntpclient_configure(@(g.ntpservers));

    site_y::
      "site_y" usebundle =>
      system_ntpclient_configure(@(g.ntpservers));
}

body common control
{
        bundlesequence => {
                            "main"
        };

      # Building a per-site inputs list is beyond the scope of this
      # example.
        inputs => {
                    "$(sys.libdir)/stdlib.cf",
                    "ntp.cf"
        };
}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-150-Dynamic\_Bundlesequence-1070-Jeff\_Blaine\_ntp.cf}
```cfengine3, options: "linenos": true
#Author: Jeff Blaine

#
# Given a list of servers, establish a basic NTP configuration file
# containing that list of servers as well as a set of "restrict"
# lines based on OS (some OSes don't support all modern options
# to the restrict directive).
#
# EXERCISE: augment the following (with new bundle(s) as needed)
#           to ensure that the appropriate NTP package(s) are
#           installed on the host, per OS.  Make this bundle
#           below depend on the package being installed first.
#
# EXERCISE: augment the following to ensure that the NTP client
#           is running.  This new logic should depend on the client
#           package(s) being installed per the exercise above.
#
bundle agent system_ntpclient_configure(servers)
{
  vars:

    solaris::

      "configfile" string => "/etc/inet/ntp.conf";

      # SunOS5.10 (at least) does not support 'kod' or '-6' like Linux
      "restrictlines"
        slist => { "restrict default notrap nomodify nopeer noquery" };

    redhat|centos::

      "configfile" string => "/etc/ntp.conf";

      "restrictlines"
        slist => {
                   "restrict -4 default kod notrap nomodify nopeer noquery",
                   "restrict -6 default kod notrap nomodify nopeer noquery",
                 };

  files:

    redhat|centos|solaris::

      "$(configfile)"
        edit_line =>
      ntpclient_config_edit(@(system_ntpclient_configure.servers),
                            @(system_ntpclient_configure.restrictlines));
}

bundle edit_line ntpclient_config_edit(servers, restrictlines)
{
  delete_lines:
      ".*";

  insert_lines:
      # Add our static content first (4 lines).
      "# This file is configured by CFEngine.  Manual edits to this file
# will be destroyed by CFEngine, so don't do that.
server  127.127.1.0
fudge   127.127.1.0 stratum 10"
        insert_type => "preserve_block",
        location => start;

      # ^^^^ There is a bug in 3.2.0 (at least) that will cause the
      # above promise definition to not keep the proper order of lines.
      # Just be aware.  In this case, it just makes a silly looking file
      # that still functions properly as far as NTP is concerned.

      # Add our NTP servers, one per line
      "server $(servers)";

      # Add our restrict rules, one per line
      "$(restrictlines)";
}
```
\end{codelisting}

<!---
Filename: 960-160-Databases-0000-Chapter-Title.md
-->

### Promises Concerning Databases

Demonstrate CFEngine integration with PostgreSQL.


\begin{codelisting}
\codecaption{960-160-Databases-1090-clean\_slate\_for\_database\_demo.sh}
```bash, options: "linenos": true
#!/bin/sh

yum -y remove postgresql postgresql-server
rm -rf /var/lib/pgsql
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-160-Databases-1100-db\_demo.cf}
```cfengine3, options: "linenos": true
# Demonstration of CFEngine's databases promises.
# First, install and configure a PostgreSQL database
# cluster and create an database.
# Then use "databases" type promises to set up and
# maintain the schema of 3 tables.
#
# Note: package_list_update_ifelapsed should be set to 0
# for demoes.
#
# Demoes: - self-heal from database cluster shutdown
#         - self-heal from dropping a table
#         - self-heal from dropping a table column
#         - self-heal from changes to pg_hba.conf





body common control {

        version => "1.1 21-Oct-2011";

        host_licenses_paid => "10";

        inputs => { "$(sys.libdir)/stdlib.cf" };

        bundlesequence => {
                             "db_cluster_is_installed",

                             "pg_hba_conf_trusts_local_users",

                             "db_cluster_is_running",

                             "database_exists",

                             "schema_exists_and_is_correct",

                           };

}

################################################

bundle agent db_cluster_is_installed {

  packages:


      "postgresql-server"

        package_policy => "add",
        package_method => yum,
        classes => if_repaired("start_postgres");

      "postgresql"
        package_policy => "add",
        package_method => yum;


  commands:

    start_postgres::

      "/sbin/service postgresql start";


}

################################################

bundle agent pg_hba_conf_trusts_local_users {


  files:
      "/var/lib/pgsql/data/pg_hba.conf"

      # this is a regular comment

        edit_line => trust_local_users,
        comment => "Allow root to access the DB cluster
                    so CFEngine can set up the database
                    and table schema",
      # the above was a Knowledge Management comment
        classes => if_repaired("reload_postgres");

  commands:

    reload_postgres::

      "/sbin/service postgresql reload";


}


################################################


bundle agent db_cluster_is_running {


  processes:

      "postgres"

        restart_class => "start_postgres";


  commands:

    start_postgres::

      "/sbin/service postgresql start";

}




################################################

bundle agent database_exists {

  commands:

      "/usr/bin/createdb -U postgres conference \
         >/dev/null 2>/dev/null"
        contain => in_shell;

}


################################################


bundle agent schema_exists_and_is_correct {

  vars:
      "create_and_verify"
        slist => { "create", "verify" };


  databases:


      "conference/speakers"

        database_operation => "$(create_and_verify)",
        database_type => "sql",
        database_columns => {
                              "speaker_name,varchar,50",
                              "speaker_bio,varchar,600",
                              "speaker_affiliation,varchar,50",
        },
        database_server => demo_postgres_server;


      "conference/rooms"

        database_operation => "$(create_and_verify)",
        database_type => "sql",
        database_columns => {
                              "room_name,varchar,256",
                              "room_number_of_seats,integer",
        },
        database_server => demo_postgres_server;


      "conference/talks"

        database_operation => "$(create_and_verify)",
        database_type => "sql",
        database_columns => {
                              "speaker_name,varchar,256",
                              "room_name,varchar,256",
                              "start_time,date",
        },
        database_server => demo_postgres_server;


}


################################################


body database_server demo_postgres_server {

        db_server_owner => "postgres";

        db_server_password => "";

        db_server_host => "localhost";

        db_server_type => "postgres";

        db_server_connection_db => "postgres";

}

################################################

bundle edit_line trust_local_users {

      delete_lines: ".*";

      insert_lines: "
# !!! This file is under CFEngine control.  Do not edit
# it directly or your changes may be overwritten.
#
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
local   all         all                               trust
";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-160-Databases-1110-Create\_DB\_Users.cf}
```cfengine3, options: "linenos": true
body common control {

        bundlesequence => { "create_db_users" };
        inputs => { "$(sys.libdir)/stdlib.cf" };

}


########################################################

bundle common db {

  vars:

      "db_users"

        slist   => splitstring(execresult("/usr/bin/psql -AXqt \
                     -c 'select usename from pg_user' -U postgres",
                                           "noshell"
                                         ),
                               "\n",
                               "100"
                              ),
        comment => "List of DB users";


      "createuser_defaults"
        string => " -U postgres  --no-createdb \
                    --no-createrole --no-superuser ",
        comment => "Default arguments we'll use with /usr/bin/createuser
                    to create regular unprivileged PostgreSQL accounts";

}

########################################################


bundle agent create_db_users {

  classes:

      "postgres_node"

        expression => returnszero("/usr/bin/pgrep postmaster >/dev/null",
                                  "useshell"),
        comment => "Identify if this node is running postgres.";


  methods:

    postgres_node::

      "any"
        usebundle => create_pg_user("nagios", "$(db.createuser_defaults)"),
        comment => "Every node that runs postgres should have pg user nagios
                    for monitoring using check-postgres.pl plugin";

    specialcase1::

      "any"
        usebundle => create_pg_user("superuser1",
                                    " -U postgres --superuser "),
        comment => "Create db superuser superuser1";

    specialcase2::

      "any"
        usebundle => create_pg_user("regularuser1",
                                    "$(db.createuser_defaults)"),
        comment => "Application X requires regularuser1";


}


####################################################

bundle agent create_pg_user(username,args) {


  classes:

      "$(username)_exists"

        expression => reglist("@(db.db_users)","$(username)"),
        comment => "Check if username already exists in the database.";


  commands:


      "/usr/bin/createuser $(args)  $(username)"
        contain => in_shell_and_silent,
        ifvarclass => "!$(username)_exists",
        comment => "Create PostgreSQL user $(username) with
                    createuser args $(args)";
}
```
\end{codelisting}

<!---
Filename: 960-310-Processes-0010-title\_card.md
-->

### Making Sure A Process Is Running


\begin{codelisting}
\codecaption{960-320-Processes-0020-Restart\_a\_process\_if\_it\_is\_running\_or\_start\_it\_if\_it\_is\_not\_running.cf}
```cfengine3, options: "linenos": true
bundle agent aingent main
{
  processes:

      ".*"

        process_count   => anyprocs,
        process_select  => proc_finder;


  commands:

    process_running::

      "/bin/echo restart command";

    process_not_running::
      "/bin/echo start command";

}

########################################################

body process_select proc_finder

{

        command => "sendmail: .*";
        # (Anchored) regular expression matching the CMD
        # field of a process

        process_result => "command";

}

########################################################

body process_count anyprocs

{
        match_range => "0,0";
        # Integer range for acceptable number of matches for this process

        out_of_range_define => { "process_running" };
        # List of classes to define if the matches are out of range

        in_range_define => { "process_not_running" };
        # List of classes to define if the matches are in range.

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0030-perms\_groups.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        perms => acceptable_groups;
}

body perms acceptable_groups {

        groups => {"root", "games", "mail" };

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0040-rename.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  files:
      "/bin/chown"
        rename => to("/bin/CHOWN");
}

```
\end{codelisting}

<!---
Filename: 960-330-Files-0050-title\_card.md
-->

####  Files


\begin{codelisting}
\codecaption{960-330-Files-0060-Disable\_And\_Rename.cf}
```cfengine3, options: "linenos": true
#body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  files:
      "/tmp/test2"
        rename => disable_for_good;
}


body rename disable_for_good
{
        disable => "true";
        disable_mode => "000";
}


```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0070-Repository.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }

bundle agent main {

  files:

      "/tmp/file.txt"

        create => "true",
        edit_line => insert_lines("$(sys.date)"), # guarantees an edit
        edit_defaults => timestamp,
        repository => "/var/cfengine/repository",
        comment => "Save all history of edits to this important file.";
}

body edit_defaults timestamp
{
        edit_backup => "timestamp";
}

# Example output:
#
# linux# cf-agent -f ./MISC__files__repository.cf -b example -KI
#  >> Using command line specified bundlesequence
#  -> Edited file /tmp/file.txt
# Moved /tmp/file.txt_1333404966_Mon_Apr__2_17_16_07_2012.cf-before-edit \
# to repository location \
# /var/cfengine/repository/_tmp_file.txt_1333404966_Mon_Apr__2_17_16_07_2012.\
# cf-before-edit
# linux# cf-agent -f ./MISC__files__repository.cf -b example -KI
#  >> Using command line specified bundlesequence
#  -> Edited file /tmp/file.txt
# Moved /tmp/file.txt_1333404969_Mon_Apr__2_17_16_10_2012.cf-before-edit \
# to repository location \
# /var/cfengine/repository/_tmp_file.txt_1333404969_Mon_Apr__2_17_16_10_2012.\
# cf-before-edit
# linux#
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0080-edit\_multiple\_files.cf}
```cfengine3, options: "linenos": true
bundle agent main {

      # Demonstrate using regex to edit multiple files

  files:

      "/tmp/etc/.*.conf"

        edit_line => has_my_name_in_it,
        pathtype => "regex",
        comment => "Every *.conf file in /etc/ should have my name in it.";

}


bundle edit_line has_my_name_in_it {

      insert_lines: "# This file belongs to by Aleksey Tsalolikhin.";

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0090-input\_type\_preserving\_order\_while\_editing\_a\_file.cf}
```cfengine3, options: "linenos": true
body file control { inputs => { "$(sys.libdir)/stdlib.cf" }; }


bundle agent main {

  files:

      "/tmp/testfile"

        create  => "true",
        edit_line => proper_greetings;
}


####################################################


bundle edit_line  proper_greetings {


  insert_lines:

      "Good Evening"
        location => after("Good Day");

}
```
\end{codelisting}
\begin{codelisting}
\codecaption{960-330-Files-0100-owners.cf}
```cfengine3, options: "linenos": true
bundle agent main {

  files:

      "/tmp/testfile"

        comment => "/tmp/testfile must be mode 612 for application X to work;
                    it must be owned by user aleksey and group cfengine",
        create  => "true",
        perms   => proper_owner("aleksey");

}

############################################################

body perms proper_owner(user)
{
        owners => { "$(user)", "rob", "user2" };
}

```
\end{codelisting}

<!---
Filename: 960-340-PXEboot\_Kickstart\_Server-0110-title\_card.md
-->

### PXEboot Kickstart Server


\begin{codelisting}
\codecaption{960-340-PXEboot\_Kickstart\_Server-0120-Server.cf}
```cfengine3, options: "linenos": true
# configure a system to be a pxeboot kickstart server
# and to serve CentOS 5.7 i386.  configure kickstart
# config file to bootstrap CFEngine onto the new system:
# download and install CFEngine RPM, and download,
# install and execute CFEngine policy set.

# assumes that contents of CentOS 5.7 i386 installation DVD
# are in the Apache document root, /var/www/html/centos-5.7-i386
# (TODO - make a promise to mirror CentOS to this directory
# as per http://drcs.ca/blog/how-to-mirror-centos-5-and-\
# use-it-as-a-local-yum-repository/ )
#
#
# assumes the pxeboot/kickstart server address is 192.168.1.1
#
# WARNING: lowers the firewall instead of poking holes for
# UDP 67 and 69 (bootp and tftp)
# (TODO: poke holes for UDP 67 and 69 instead of lowering firewall)
#
# Assumes CFEngine RPM cfengine-community-3.2.1-1.el5.i386.rpm
# is in /var/www/html # (this needs to be done manually as
# cfengine.com requires login to access RPMs)
#
# Assumes CFengine policy files are in the httpd document root,
# cfengine_inputs.tar

body common control {

        inputs => { "$(sys.libdir)/stdlib.cf" };

        bundlesequence => {
                            "packages",
                            "enable_services",
                            "configure_dhcpd_config_file",
                            "run_pxe_commands_to_setup_pxeboot",
                            "start_services",
                            "configure_firewall_to_allow_bootp_and_tftp",
                            # not really.  i just turn off the firewall.
                            "configure_kickstart_file",
        };
}

bundle agent packages {


  vars:
      "desired_packages"
      ######################################################
      #              START OF PACKAGE LIST                 #

        slist =>
      {
        "system-config-netboot",
        "httpd",
        "xinetd",
        "tftp",
        "dhcp",
      };

      #              END OF PACKAGE LIST                   #
      ######################################################

  packages:

      "$(desired_packages)"

        package_method => yum,
        package_policy => "add";


}

bundle agent enable_services {

      # make sure services are configured to start at boot

  commands:
      "/sbin/chkconfig xinetd on";
      "/sbin/chkconfig tftp on";
      "/sbin/chkconfig httpd on";
      "/sbin/chkconfig dhcpd on";

}



bundle agent configure_dhcpd_config_file {

  files:
      "/etc/dhcpd.conf"
        create => "true",
        edit_line => my_dhcpd_config;
}

bundle edit_line my_dhcpd_config {

      delete_lines: ".*";

  insert_lines:

      "allow booting;
allow bootp;
class \"pxeclients\" {match if substring(option vendor-class-identifier, \
0, 9) = \"PXEClient\"; next-server 192.168.1.1; \
filename \"linux-install/pxelinux.0\"; }
ddns-update-style ad-hoc;

subnet 192.168.0.0 netmask 255.255.0.0 {
range 192.168.1.2 192.168.1.254;
}
"
        insert_type => "preserve_block";

}


bundle agent start_services {

      # make sure services are configured to start at boot

  commands:
      "/etc/init.d/httpd start";
      "/etc/init.d/xinetd start";
      "/etc/init.d/dhcpd start";
}

bundle agent configure_firewall_to_allow_bootp_and_tftp {
      # this bundle should edit iptables to allow UDP 67 and 69
  commands:
      "/etc/init.d/iptables stop";  # quick and dirty, not safe
}


bundle agent configure_kickstart_file {

  files:
      "/var/www/html/centos-5.7-i386.ks"

        create => "true",
        edit_line => my_kickstart_file;
}

bundle edit_line my_kickstart_file {


      delete_lines: ".*";

  insert_lines:
      "
cmdline
install
url --url http://192.168.1.1/centos-5.7-i386
lang en_US.UTF-8
keyboard us
clearpart --all
autopart
network --device eth0 --bootproto dhcp --hostname newborn
rootpw cfengine
firewall --enabled --port=22:tcp --port=22:tcp
authconfig --enableshadow --enablemd5
selinux --disabled
timezone --utc America/Los_Angeles
bootloader --location=mbr --driveorder=hda --append=\"rhgb quiet\"
reboot

%packages
@core
@base
device-mapper-multipath
-sysreport


%post
echo Downloading CFEngine RPM
wget http://192.168.1.1/cfengine-community-3.2.1-1.el5.i386.rpm
echo
echo

echo Downloading CFEngine inputs tar-ball
wget http://192.168.1.1/cfengine_inputs.tar
echo
echo

echo Installing CFEngine RPM
rpm -ihv cfengine-community-3.2.1-1.el5.i386.rpm
echo
echo

echo Removing the masterfiles that were shipped with 3.2.1
echo We provide our own policy set.
rm -f /var/cfengine/masterfiles/*
echo
echo

echo Extracting CFEngine policies
mkdir /var/cfengine/inputs >/dev/null 2>/dev/null
tar -C /var/cfengine/inputs -xvf cfengine_inputs.tar
echo
echo


echo Running CFEngine for the first time
/usr/local/sbin/cf-agent -I
"
        insert_type => "preserve_block";
}

bundle agent run_pxe_commands_to_setup_pxeboot {

  vars:
      "exec_result" string => execresult("/usr/sbin/pxeos -l", "noshell");

  classes:
      "centos_is_installed"
        expression => regcmp("centos-5.7-i386","$(exec_result)");

  commands:
    !centos_is_installed::
      "/usr/sbin/pxeos -a -i centos-5.7-i386 -p HTTP -D 0 -s 192.168.1.1 \
                       -L /centos-5.7-i386 \
                       -K 'http://192.168.1.1/centos-5.7-i386.ks' \
                        centos-5.7-i386";
      "/usr/sbin/pxeboot -a -O centos-5.7-i386 \
                         -K 'http://192.168.1.1/centos-5.7-i386.ks' \
                         -r 1000 192.168";

}
```
\end{codelisting}

<!---
Filename: 960-410-Monitor-0010-title\_card.md
-->

### CFEngine Monitor daemon


\begin{codelisting}
\codecaption{960-410-Monitor-0020-Example\_of\_using\_monitoring.cf}
```cfengine3, options: "linenos": true
# report environmental conditions

bundle agent main {

  vars:
      "threshold" int => "50";

      ##########################################3
  classes:

      "CPU_load_high"
        expression => isgreaterthan("$(mon.value_cpu)","$(threshold)");

  reports:
    CPU_load_high::
      "!!!!! CPU LOAD IS OVER THRESHOLD OF $(threshold) percent !!!! ";

}
```
\end{codelisting}
  
