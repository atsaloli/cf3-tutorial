# Install WordPress:
# 1. Install Infrastructure:
#   1.1. Install httpd and mod_php and PHP MySQL client.
#   1.2. Install MySQL server.
#           1.2.1. Secure MySQL
#           1.2.2. Create WordPress User in MySQL.
#           1.2.3. Create WordPress Database in MySQL.
#   1.3. Make sure httpd and MySQL servers are running.
# 2. Install the PHP application (WordPress)
#   2.1. Download tarball with the latest version of WordPress PHP
#         application.
#   2.2. Extract it into the httpd document root where it can be
#        run by the Web server.
#   2.3. Create WordPress config file wp-config.php from
#        wp-config-sample.php that's shipped with WordPress.
#   2.4. Tweak wp-config.php to put in the data needed to establish
#        database connection (db name, db username and password).


body common control
{

        bundlesequence => {
                            "wordpress_install",
        };


        inputs =>          { "$(sys.libdir)/stdlib.cf" };

}



bundle agent wordpress_install
{
  vars:
      "conf[DB_HOST]"      string => "db";
      "conf[DB_NAME]"      string => "wordpress";
      "conf[DB_USER]"      string => "wordpress";
      "conf[DB_PASSWORD]"  string => "L0PSA_2011_Linux";
      "conf[DB_ROOT_PASSWORD]"  string => "Linux_2011_L0PSA";
      "conf[htmlroot]"     string => "/var/www/html";
      "conf[tarfile]"      string => "/root/wordpress-latest.tar.gz";
      "conf[wp_dir]"       string => "$(conf[htmlroot])/wordpress";
      "conf[conf]"         string => "$(conf[wp_dir])/wp-config.php";
      "conf[wp_cfgsample]" string => "$(conf[wp_dir])/wp-config-sample.php";

  methods:

    web::

      "any"
usebundle => wp_web_front_end_packages_installed("wordpress_install.conf");

      "any"
usebundle => wp_web_front_end_services_up("wordpress_install.conf");

      "any"
usebundle => wp_tarball_is_present("wordpress_install.conf");

      "any"
usebundle => wp_tarball_is_unrolled("wordpress_install.conf");

      "any"
usebundle => conf_exists("wordpress_install.conf");

      "any"
usebundle => wp_is_properly_configured("wordpress_install.conf");

    db::

      "any"
usebundle => wp_db_back_end_packages_installed("wordpress_install.conf");

      "any"
usebundle => wp_db_back_end_services_up("wordpress_install.conf");

      "any"
usebundle => wp_mysql_is_secured("wordpress_install.conf");

      "any"
usebundle => wp_mysql_configuration("wordpress_install.conf");

}


#############################################

bundle agent wp_web_front_end_packages_installed(params)
{
  vars:

    debian::
      "desired_package" slist => {
                                   "apache2",
                                   "php5",
                                   "php5-mysql",
      };

    redhat::
      "desired_package" slist => {
                                   "httpd",
                                   "php",
                                   "php-mysql",
      };
  packages:
      "$(desired_package)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

  commands:
    packages_added&&redhat::
      "/sbin/service httpd graceful"
        comment => "Restarting httpd so it can pick up new modules.";

    packages_added&&debian::
      "/usr/sbin/service apache2 graceful"
        comment => "Restarting httpd so it can pick up new modules.";
}

#############################################
bundle agent wp_db_back_end_packages_installed(params)
{
  vars:

      "desired_package" slist => {
                                   "mysql-server",
      };

  packages:
      "$(desired_package)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

}


#############################################

bundle agent wp_web_front_end_services_up(params)
{

  processes:
    redhat::
      "httpd"  restart_class => "start_httpd_redhat";

    ubuntu::
      "apache2"  restart_class => "start_httpd_ubuntu";


  commands:
    start_httpd_redhat::
      "/sbin/service httpd start";

    start_httpd_ubuntu::
      "/usr/sbin/service apache2 start";

}

#############################################

bundle agent wp_db_back_end_services_up(params)
{
  processes:
    redhat::
      "mysqld" restart_class => "start_mysqld_redhat";

    ubuntu::
      "mysqld" restart_class => "start_mysqld_ubuntu";


  commands:
    start_mysqld_redhat::
      "/sbin/service mysqld start";

    start_mysqld_ubuntu::
      "/usr/sbin/service mysqld start";


}

#############################################

bundle agent wp_tarball_is_present(params)
{

  classes:
      "wordpress_tarball_is_present"
        expression => fileexists("$($(params)[tarfile])");

  reports:
    wordpress_tarball_is_present::
      "WordPress tarball is on disk.";

  commands:
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q -O $($(params)[tarfile]) \
                     http://wordpress.org/latest.tar.gz"
        comment => "Downloading latest version of WordPress.";
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{

  classes:
      "wordpress_directory_is_present"
        expression => fileexists("$($(params)[htmlroot])/wordpress/");

  reports:
    wordpress_directory_is_present::
      "WordPress directory is present.";

  commands:
    !wordpress_directory_is_present::
      "/bin/tar -C $($(params)[htmlroot]) -xzf $($(params)[tarfile])"
        comment => "Unrolling wordpress tarball to $($(params)[htmlroot]).";
}


#############################################

bundle agent wp_mysql_is_secured(params)
{

      #  remove the test databases and anonymous user created
      # by default and set the MySQL root password
      #
      # at first I tried to use mysql_secure_installation, but
      # it would not take the root password when it was given
      # to it as STDIN in a pipeline, it threw the error
      # "stty: standard input: Invalid argument"
      #
      # instead let's just do what mysql_secure_installation
      # does, so we can do it non-interactively:
      # - remove anonymous users
      # - remove remote root
      # - remove test database
      # - remove privileges on test database
      # - reload privilege tables



  commands:
      "/usr/bin/mysql -u root -e \"
      DELETE FROM mysql.user
      WHERE User='';
      DELETE FROM mysql.user
      WHERE User='root' AND Host!='localhost';
      DROP DATABASE test;
      DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
      FLUSH PRIVILEGES;\"
";

}

#############################################

bundle agent wp_mysql_configuration(params)
{

  commands:
      "/usr/bin/mysql -u root -e \"
      CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
      GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
      TO '$($(params)[DB_USER])'@'web'
      IDENTIFIED BY '$($(params)[DB_PASSWORD])';
      FLUSH PRIVILEGES;\"
";

}

#############################################

bundle agent conf_exists(params)
{

  classes:
      "wordpress_config_file_exists"
        expression => fileexists("$($(params)[conf])");

  reports:
    wordpress_config_file_exists::
      "WordPress config file $($(params)[conf]) is present";

  commands:
    !wordpress_config_file_exists::
      "/bin/cp -p $($(params)[wp_cfgsample]) $($(params)[conf])";
}

#############################################

bundle agent wp_is_properly_configured(params)
{
  vars:
      "wpparams" slist => getindices("$(params)");

  files:
      "$($(params)[conf])"
        edit_line => replace_or_add(
          "define\('$(wpparams)', *'(?!$($(params)[$(wpparams)])).*",
          "define('$(wpparams)', '$($(params)[$(wpparams)])');"
                                   );
}

#############################################

bundle edit_line replace_or_add(pattern,line)
# Diego's.
# Replace a pattern in a file with a single line.
# If the pattern is not found, add the line to the file.
# The pattern must match the whole line (it is automatically
# anchored to the start and end of the line) to avoid
# ambiguity.

{
  replace_patterns:
      "^${pattern}$"
        replace_with => value("${line}"),
        classes => always("replace_done");

  insert_lines:
    replace_done::
      "${line}";
}


body classes always(x)
# Diego's.
# Define a class no matter what the outcome of the promise is

{
        promise_repaired => { "$(x)" };
        promise_kept => { "$(x)" };
        repair_failed => { "$(x)" };
        repair_denied => { "$(x)" };
        repair_timeout => { "$(x)" };
}




# Todo:
#
#
# MySQL:
# - submit a patch to the MySQL folks to add a non-interactive option to
#   /usr/bin/mysql_secure_installation
# - change the root password using /usr/bin/mysqladmin -u root password
#   'new-password'
# - I've hardcoded the web server name as 'web', in allowing connects. 
#   make this more flexible.  (how?)
#
# httpd:
# - instead of hardcoding "/var/www/html", derive httpd document root on
#   the fly from httpd config fileusing Function readstringlist. (If it's
#   Apache, look for DocumentRoot)
#
# iptables:
# - port 80 may be closed.  need to open it.
