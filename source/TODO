https://github.com/nickanderson/CFEngine-zero-to-hero-primer

classes have scope -- this needs to be mentioned earlier when I first
introduce soft classes

Add a section on "control bodies" (e.g. boddy common control, body file control) to teh chapter on body parts
They are attributes of an inherent "control" promise.

Add a chapter to "templates" section that would cover legacy CFEngine templates but would say they are deprecated.

Make sure I have examples of `services:` promises

Add links to "create" and "touch" attributes in the reference manual.
https://docs.cfengine.com/docs/3.12/reference-promise-types-files.html#create

Add a separate slide to introduce the "handle"
attribute.  and a separate slide to introduce
the "comment" attribute.

Move methods promises before vars promises,
because I have some vars example that use
methods promises now

If the students put their exercises in the 
services/ directory in masterfiles and then 
call them from main.cf as methods promises,
will that work? or do we need to 'input' these
files first? DOCUMENT HOW TO ENABLE AUTOLOAD


add irange to the right hand side of promise attributes (e.g. vsize under process_select)

the Monitoring chapter needs a cleanup... the monitoring Cpu threshold example needs more xplanation

also Monitoring should be in the advanced topics... get rid of that chapter, we don't need it in the introductory tutorial...

also need to prune the "special variables" chapter, there is too much in there that we don't really need...  actually the Special Variables chapter should be a section in the "variables chapter".  

Add example of remote copy of a single file, before
430-100-File_Copying-1110-Remote_copy.cf:

Add definitions of Index and Indices to the Arrays section

make sure we have an exercise to bootstrap the hub:

root@ubuntu:~# /var/cfengine/bin/cf-agent --bootstrap  192.168.23.151 
R: This host assumes the role of policy server
R: Updated local policy from policy server
R: Started the server
R: Started the scheduler
  notice: Bootstrap to '192.168.23.151' completed successfully!
root@ubuntu:~# 


-------------------------------------------------------------

Add a chapter on attribute types

- add Agent Promise Attributes (appendix C from "Learning CFEngine 3") to this book
- add a GLOSSARY with ALL terms defined
- look at templates/
- look at 1.cf.  It shows three ways that a list can be
  used.  It should be broken up into three slides.
- is there a way to extract the second element of a list?
- give a simple example of using an array
- add my reference materials to Reference chapter
- Break up "CFEngine Special Variables" chapter 
- Break up "Copying Files" chapter into Local/Remote
- Add a chapter on the Reference manual, and an orientation to the CFEngine BoK, books, etc.
Make sure we have a link to www.verticalsysadmin.com/cfengine/
- Add a "further study" section

8-Oct-2015

- add perl script that reformats the cfengine policies to version control
  of VSA_Training_Examples
  and publish it to the class...   

TO DO:

course materials:
- portrait orientation
- revision date
- separate repo for mkpdf toolchain

-----------------------------------------------------------

if you put a sequence of signals like

  signals => { "term", "kill" }

how long does CFEngine wait after sending TERM before
sending KILL?

-----------------------------------------------------------

give an example of shutting down cups and disabling it in a more portable way

chkconfig is a red hat thing

add to cfengine_stdlib.cf standard_services bundle  "disable" handling

--------
040-0051_Notes_on_Running.__normal_ordering.cf OUT GRADIENT	ZZ

-----------
080-0172
:%s/file.tmpl/hello.tmpl/g
:%s/file.txt/hello.txt/g

----
where does CFEngine get its lifecycle information?  (3 year lifecycle)


bundle agent example {

classes: 

  "one-two"

       expression => "any";

reports:

  one_two::

         "Yay!";


                     }

cf3> 
cf3>    =========================================================
cf3>    classes in bundle example (3)
cf3>    =========================================================
cf3> 
cf3> Class identifier "mil-mail01" contains illegal characters - canonifying
cf3> Initiate variable convergence...
cf3> 
cf3>      +  Private classes augmented:
cf3> 
cf3>      -  Private classes diminished:
cf3> 


chapter 100 is out of order, shold be after body-parts

----------------------

how about making promise attributes comma delimited, in body parts?  that
would be harmonious to how they are detailed in the promise body

---------------------------

add an index to the reference manual (cfengine reserved word index)

---------------------------

500 data types should be before Body Parts (because body parts examples
contain lists)

0-----

reference value mentions "first, last, all" in comments in examples
as possible values for "occurrences" but now it is only "first, all"

----
add more exericses to the course	

-----------

parser:

students type "body agent" instead of "bundle agent" sometimes

(but we do want to be able to say "body agent control")


--------

according to 3.3.8 cf-promises, this is a valid promise:

bundle agent myname {

files:

}

----

in 3.3.8, this creates a directory but does not tell us

it should say:
  -> Created directory /tmp/etc

Press ENTER or type command to continue
 >> Using command line specified bundlesequence
 -> Created file /tmp/etc/motd, mode = 600
R: All systems nominal


------------------

how do you cancel a persistent class?

(add a demo)

------------------

put the COPBL section in logical order.  remove the file select example to an
Appendix section

------------------------
Ask neil watson if he could make the vim syntax highlighter 
warn us if we use anything other than a cfengine reserved 
word on the LHS.
--------------------------

Array of lists example does not work

------------------------------

top of page 29

action => if_repaired

should be

classes => if_repaired

------------------------------

discuss default bundlesequence (run all the bundles in the input file in the
order they appear) on the help-cfengine mailing list


---


it would be nice if methods type promises, the promiser defaulted to
"any"

---

question from Shing and Ammon, cleanup of /var/cfengine/outputs results
in a non-zero Promises Repaired percentage.  How to separate the promises
related to cfengine's internal maintenance from system repair promises?

---

to do

- publish CFEngine Design Center half-day class

- make a functions summary reference card

- add example screenshot of Topic Maps

- send poster

